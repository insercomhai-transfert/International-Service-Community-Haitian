{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "# Performance Analysis"
      },
      "name": "text - 1"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Subscriptions}"
        ],
        "parameters": [
          {
            "id": "7d3239b1-19a0-44fd-a771-df82340e0d88",
            "version": "KqlParameterItem/1.0",
            "name": "DefaultResource",
            "type": 5,
            "value": "value::1",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "resourceTypeFilter": {
                "microsoft.resources/subscriptions": true,
                "microsoft.resources/resourcegroups": true
              },
              "additionalResourceOptions": [
                "value::1"
              ]
            }
          },
          {
            "id": "0caf61ec-d776-4642-8553-5293060a62c7",
            "version": "KqlParameterItem/1.0",
            "name": "ContextFree",
            "type": 1,
            "query": "{\"version\":\"1.0.0\",\"content\":\"\\\"{DefaultResource}\\\"\"}",
            "isHiddenWhenLocked": true,
            "queryType": 8,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "6e82c4c1-769e-4549-bd80-b356ef999efa",
            "version": "KqlParameterItem/1.0",
            "name": "Selection",
            "type": 1,
            "query": "take 1\r\n| extend x = split ({DefaultResource:value}, '/')\r\n| project value = tostring(pack('sub', x[2], 'rg', case(x[4] != 'null', x[4], ''), 'vm', case(x[8] != 'null', x[8], '')))",
            "crossComponentResources": [
              "value::selected"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "604f6d89-c6f9-4bdb-b4ca-483f56a8946c",
            "version": "KqlParameterItem/1.0",
            "name": "Subscriptions",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type in~('microsoft.compute/virtualmachines', 'microsoft.compute/virtualmachinescalesets')\r\n| summarize Count = count() by subscriptionId\r\n| order by Count desc\r\n| extend Rank = row_number()\r\n| project value = subscriptionId, label = subscriptionId, selected = iff(subscriptionId =~ todynamic('{Selection}').sub, true, false)",
            "crossComponentResources": [
              "value::selected"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::1"
              ],
              "showDefault": false
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": [
              "value::1"
            ]
          },
          {
            "id": "efc388e8-ac7b-4e72-8573-e97cfe370f16",
            "version": "KqlParameterItem/1.0",
            "name": "ResourceGroup",
            "label": "Resource groups",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type in~('microsoft.compute/virtualmachines', 'microsoft.compute/virtualmachinescalesets')\r\n| summarize Count = count() by resourceGroup\r\n| order by Count desc\r\n| extend Rank = row_number()\r\n| project value = resourceGroup, label = resourceGroup, selected = iff(resourceGroup =~ todynamic('{Selection}').rg, true, false)\r\n| order by value asc",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ]
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "ff31cd1b-224e-42bd-8d65-f803ca13ce13",
            "version": "KqlParameterItem/1.0",
            "name": "Resources",
            "label": "Virtual machines",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Resources \r\n| where resourceGroup in~({ResourceGroup}) and type in~('microsoft.compute/virtualmachines', 'microsoft.compute/virtualmachinescalesets')\r\n| project id, name, selected=false, group=iff(type =~ \"microsoft.compute/virtualmachines\", \"Virtual machines\", \"Virtual machine scale sets\")",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ]
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "feb5ccab-6fe6-4c5f-9161-ca0e412bd637",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "label": "Time range",
            "type": 4,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "d643672d-1bc2-497d-a5ce-20f631ee9399",
            "version": "KqlParameterItem/1.0",
            "name": "ResourceScope",
            "type": 7,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "Resources\r\n| take 1\r\n| project x = dynamic([\"microsoft.compute/virtualmachines\", \"microsoft.compute/virtualmachinescalesets\", \"microsoft.resources/resourcegroups\", \"microsoft.resources/subscriptions\"])\r\n| mvexpand x to typeof(string)\r\n| extend jkey = 1\r\n| join kind = inner (Resources \r\n| where id in~ ({Resources})\r\n| summarize Subs = dcount(subscriptionId), resourceGroups = dcount(resourceGroup), resourceCount = count()\r\n| extend jkey = 1) on jkey\r\n| project x, label = 'x', selected = case(x in ('microsoft.compute/virtualmachinescalesets', 'microsoft.compute/virtualmachines') and resourceCount <= 5, true, x == 'microsoft.resources/resourcegroups' and resourceGroups <= 3 and resourceCount > 5, true, x == 'microsoft.resources/subscriptions' and resourceGroups > 3 and resourceCount > 5, true, false)\r\n",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "e36a2c69-a3c1-4b0c-b758-b37bc16b4669",
            "version": "KqlParameterItem/1.0",
            "name": "Test",
            "type": 1,
            "query": "let perf = InsightsMetrics\r\n| where TimeGenerated {TimeRange}\r\n| take 1;\r\nlet servicemap = ServiceMapComputer_CL\r\n| where TimeGenerated {TimeRange}\r\n| take 1;\r\nperf\r\n| union servicemap",
            "crossComponentResources": [
              "{Resources}"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.resources/subscriptions"
          }
        ],
        "style": "above",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "name": "top-level parameters"
    },
    {
      "type": 1,
      "content": {
        "json": "⚠ No counters were detected. Try the following:\r\n\r\n* Select a different time range\r\n* Try different scope selections\r\n* Onboard to Azure Monitor for VMs ([Azure Monitor for VMs GA FAQ](https://docs.microsoft.com/en-us/azure/azure-monitor/insights/vminsights-ga-release-faq))."
      },
      "conditionalVisibility": {
        "parameterName": "Test",
        "comparison": "isEqualTo",
        "value": null
      },
      "name": "onboarding prompt"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "cellValue": "tab",
            "linkTarget": "parameter",
            "linkLabel": "Top 100 Machines",
            "subTarget": "top100",
            "style": "link"
          },
          {
            "cellValue": "tab",
            "linkTarget": "parameter",
            "linkLabel": "Top 10 Machines",
            "subTarget": "top10",
            "style": "link"
          }
        ]
      },
      "name": "top-level tabs"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{DefaultResource}"
        ],
        "parameters": [
          {
            "id": "aa2368fc-ad30-4608-b96a-72abf7b1e1af",
            "version": "KqlParameterItem/1.0",
            "name": "Counter",
            "type": 2,
            "description": "Select a VM performance counter for the table below",
            "isRequired": true,
            "query": "InsightsMetrics\r\n| where TimeGenerated {TimeRange}\r\n| summarize by Namespace, Name, CounterText = Name\r\n| order by Name asc, Namespace asc\r\n| project Counter = pack('counter', Name, 'object', Namespace), CounterText, group = Namespace",
            "crossComponentResources": [
              "{Resources}"
            ],
            "value": "{\"counter\":\"BytesPerSecond\",\"object\":\"LogicalDisk\"}",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.resources/subscriptions"
          },
          {
            "id": "9ad8858d-8ef3-4144-94b1-66a8bf9fa9c9",
            "version": "KqlParameterItem/1.0",
            "name": "Aggregators",
            "type": 2,
            "description": "Select one or more different aggregates to display in the table below",
            "isRequired": true,
            "multiSelect": true,
            "quote": "",
            "delimiter": ",",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Average\", \"label\":\"Average\", \"selected\": true },\r\n    { \"value\":\"P5th\", \"label\":\"P5th\", \"selected\": false },\r\n    { \"value\":\"P10th\", \"label\":\"P10th\", \"selected\": false },\r\n    { \"value\":\"P50th\", \"label\":\"P50th\", \"selected\": false },\r\n    { \"value\":\"P80th\", \"label\":\"P80th\", \"selected\": false },\r\n    { \"value\":\"P90th\", \"label\":\"P90th\", \"selected\": false },\r\n    { \"value\":\"P95th\", \"label\":\"P95th\", \"selected\": true },\r\n    { \"value\":\"Min\", \"label\":\"Min\", \"selected\": false },\r\n    { \"value\":\"Max\", \"label\":\"Max\", \"selected\": true }\r\n]"
          },
          {
            "id": "6a7306ea-247f-46ca-abca-501911f9e9d3",
            "version": "KqlParameterItem/1.0",
            "name": "TableTrend",
            "type": 2,
            "description": "Select a percentile to display in the Trend column in the table below",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Average = round(avg(Val), 2)\", \"label\":\"Average\", \"selected\": true },\r\n    { \"value\":\"P5th = round(percentile(Val, 5), 2)\", \"label\":\"P5th\", \"selected\": false },\r\n    { \"value\":\"P10th = round(percentile(Val, 10), 2)\", \"label\":\"P10th\", \"selected\": false },\r\n    { \"value\":\"P50th = round(percentile(Val, 50), 2)\", \"label\":\"P50th\", \"selected\": false },\r\n    { \"value\":\"P80th = round(percentile(Val, 80), 2)\", \"label\":\"P80th\", \"selected\": false },\r\n    { \"value\":\"P90th = round(percentile(Val, 90), 2)\", \"label\":\"P90th\", \"selected\": false },\r\n    { \"value\":\"P95th = round(percentile(Val, 95), 2)\", \"label\":\"P95th\", \"selected\": false }\r\n]"
          },
          {
            "id": "a31e3a83-360d-49a2-9fbd-928dd8e3ff35",
            "version": "KqlParameterItem/1.0",
            "name": "tableTrendLabel",
            "type": 1,
            "description": "Select a percentile to display in the Trend column in the table below",
            "query": "{\"version\":\"1.0.0\",\"content\":\"\\\"{TableTrend:label}\\\"\",\"transformers\":null}",
            "isHiddenWhenLocked": true,
            "queryType": 8,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "672b978e-5ee5-48c0-ba3a-fe6fc45d3f26",
            "version": "KqlParameterItem/1.0",
            "name": "tableTrendOrder",
            "type": 1,
            "value": "desc",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "if (TableTrend contains 'P5th'), result = 'asc'",
                "criteriaContext": {
                  "leftOperand": "TableTrend",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "P5th",
                  "resultValType": "static",
                  "resultVal": "asc"
                }
              },
              {
                "condition": "if (TableTrend contains 'P10th'), result = 'asc'",
                "criteriaContext": {
                  "leftOperand": "TableTrend",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "P10th",
                  "resultValType": "static",
                  "resultVal": "asc"
                }
              },
              {
                "condition": "else result = 'desc'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "desc"
                }
              }
            ]
          },
          {
            "id": "c2f05b6d-970d-4fde-88b0-868387c02250",
            "version": "KqlParameterItem/1.0",
            "name": "mergedAggregators",
            "type": 1,
            "value": "Average",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "if (Aggregators contains tableTrendLabel), result = Aggregators",
                "criteriaContext": {
                  "leftOperand": "Aggregators",
                  "operator": "contains",
                  "rightValType": "param",
                  "rightVal": "tableTrendLabel",
                  "resultValType": "param",
                  "resultVal": "Aggregators"
                }
              },
              {
                "condition": "else result = '{Aggregators},{tableTrendLabel}'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "{Aggregators},{tableTrendLabel}"
                }
              }
            ]
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "{ResourceScope}"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Test",
          "comparison": "isNotEqualTo",
          "value": null
        },
        {
          "parameterName": "tab",
          "comparison": "isEqualTo",
          "value": "top100"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Test",
        "comparison": "isNotEqualTo",
        "value": null
      },
      "name": "top-100 parameters"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let metric = dynamic({Counter}); \r\nlet timeRangeStart = {TimeRange:start};\r\nlet timeRangeEnd = {TimeRange:end};\r\nlet timeRangeGrain = {TimeRange:grain};\r\nlet maxResultCount = 100;\r\nlet summaryPerComputer = totable(InsightsMetrics       | where TimeGenerated {TimeRange}  | where Namespace == metric.object and Name == metric.counter      | summarize hint.shufflekey = Computer Average = avg(Val), Max = max(Val), Min = min(Val), percentiles(Val, 5, 10, 50, 80, 90, 95) by Computer       | project Computer, Average, Max, Min, P5th = percentile_Val_5, P10th = percentile_Val_10, P50th = percentile_Val_50, P80th = percentile_Val_80, P90th = percentile_Val_90, P95th = percentile_Val_95       | order by {TableTrend:label} {tableTrendOrder}, Computer       | limit maxResultCount); let computerList = summaryPerComputer       | project Computer; let MachineSummary = ServiceMapComputer_CL      | where TimeGenerated {TimeRange}      | where Computer in (computerList)      | summarize arg_max(TimeGenerated, *) by Computer      | project Computer, MachineSummary = pack('Fully Qualified Domain Name', Computer, 'OS Type', OperatingSystemFamily_s, 'Operating System', OperatingSystemFullName_s, 'Ipv4 Addresses', Ipv4Addresses_s,         'Ipv6 Addresses', Ipv6Addresses_s, 'Mac Addresses', MacAddresses_s, 'DNS Names', DnsNames_s, 'CPUs', strcat(Cpus_d, ' @ ', CpuSpeed_d, ' MHz'), 'Bitness', Bitness_s,         'Physcial Memory', strcat(PhysicalMemory_d, ' MB'), 'Virtualization State', VirtualizationState_s, 'VM Type', VirtualMachineType_s, 'OMS Agent', split(ResourceName_s, 'm-')[1]);let EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];let OmsNodeIdentityAndProps = computerList      | extend NodeId = Computer      | extend Priority = 1      | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);let ServiceMapNodeIdentityAndProps = ServiceMapComputer_CL      | where TimeGenerated {TimeRange}      | where Computer in (computerList)      | summarize arg_max(TimeGenerated, *) by Computer      | extend Computer = ComputerName_s, AzureCloudServiceNodeIdentity = iif(isnotempty(columnifexists('AzureCloudServiceName_s', '')), strcat(columnifexists('AzureCloudServiceInstanceId_s', ''), ' |',                     columnifexists('AzureCloudServiceDeployment_g', '')), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(columnifexists('AzureVmScaleSetName_s', '')),              strcat(columnifexists('AzureVmScaleSetInstanceId_s', ''), ' |',                     columnifexists('AzureVmScaleSetDeployment_g', '')), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', ComputerName_s,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId_g,                   'resourceGroup', AzureResourceGroup_s,                   'azureResourceId', columnifexists('AzureResourceId_s', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', columnifexists('AzureCloudServiceInstanceId_s', ''),                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName_s', ''),                   'cloudServiceDeploymentId', columnifexists('AzureCloudServiceDeployment_g', ''),                   'cloudServiceName', columnifexists('AzureCloudServiceName_s', ''),                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('AzureName_s', ''),                   'vmScaleSetDeploymentId', columnifexists('AzureVmScaleSetDeployment_g', ''),                   'vmScaleSetName', columnifexists('AzureVmScaleSetName_s', ''),                   'serviceFabricClusterName', columnifexists('AzureServiceFabricClusterName_s', ''),                   'vmScaleSetResourceId', columnifexists('AzureVmScaleSetResourceId_s', ''),                   'resourceGroupName', columnifexists('AzureResourceGroup_s', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId_g', ''),                   'mappingResourceId', ResourceId) | project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;let NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                                  | summarize arg_max(Priority, *) by Computer; let NodeIdentityAndPropsMin = NodeIdentityAndProps      | extend Type = iff(NodeProps.type == 'StandAloneNode', iff(NodeProps.azureResourceId == '', 'Non-Azure Virtual Machine', 'Azure Virtual Machine'), NodeProps.type),      ResourceId = iff(NodeProps.type == 'AzureScaleSetNode', NodeProps.vmScaleSetResourceId,          iff(NodeProps.type == 'AzureCloudServiceNode', NodeProps.cloudServiceDeploymentId, Computer)),     ResourceName = iff(NodeProps.type == 'AzureScaleSetNode', strcat(NodeProps.vmScaleSetName, '  | ', NodeProps.scaleSetInstanceId),          iff(NodeProps.type == 'AzureCloudServiceNode', strcat(NodeProps.cloudServiceRoleName, '  | ', NodeProps.cloudServiceInstanceId), Computer))      | project Computer, Type, ResourceId, ResourceName;let trend = InsightsMetrics           | where TimeGenerated {TimeRange}          | where Computer in (computerList)           | where Namespace == metric.object and Name == metric.counter         | make-series {TableTrend} default = 0 on TimeGenerated in range(timeRangeStart, timeRangeEnd, timeRangeGrain) by Computer      | project Computer, ['Trend ({TableTrend:label})'] = {TableTrend:label}; summaryPerComputer      | join kind=leftouter (trend) on Computer      | join kind=leftouter (NodeIdentityAndProps) on Computer      | join kind=leftouter (NodeIdentityAndPropsMin) on Computer      | join kind=leftouter (MachineSummary) on Computer      | project ResourceName, Type, {mergedAggregators}, ['Trend ({TableTrend:label})'], Properties = MachineSummary      | sort by {TableTrend:label} {tableTrendOrder}",
        "size": 3,
        "noDataMessage": "There is no data for this counter, either enable the counter or onboard machines to this workspace",
        "queryType": 0,
        "resourceType": "{ResourceScope}",
        "crossComponentResources": [
          "{Resources}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Type",
              "formatter": 1,
              "formatOptions": {}
            },
            {
              "columnMatch": "Average",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "P50th",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Trend (Average)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Properties",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "CellDetails",
                "linkLabel": "ℹ️ Info"
              }
            },
            {
              "columnMatch": "P95th",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "P5th",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "P10th",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "P80th",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "P90th",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Min",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Max",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Trend (P95th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (P5th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (P90th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (P80th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (P50th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Trend (P10th)",
              "formatter": 10,
              "formatOptions": {
                "palette": "blue"
              }
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top100"
      },
      "name": "top-100 query"
    },
    {
      "type": 1,
      "content": {
        "json": "### CPU Utilization %"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "text - 12"
    },
    {
      "type": 1,
      "content": {
        "json": "### Available Memory"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "text - 13"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resources}"
        ],
        "parameters": [
          {
            "id": "92358ae0-d5e1-494b-b65b-6d904f1325c5",
            "version": "KqlParameterItem/1.0",
            "name": "Aggregate",
            "type": 2,
            "isRequired": true,
            "value": "P95th = round(percentile(Val, 95), 2)",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Average = round(avg(Val), 2)\", \"label\":\"Average\"},\r\n    { \"value\":\"P5th = round(percentile(Val, 5), 2)\", \"label\":\"P5th\"},\r\n    { \"value\":\"P10th = round(percentile(Val, 10), 2)\", \"label\":\"P10th\"},\r\n    { \"value\":\"P50th = round(percentile(Val, 50), 2)\", \"label\":\"P50th\"},\r\n    { \"value\":\"P80th = round(percentile(Val, 80), 2)\", \"label\":\"P80th\"},\r\n    { \"value\":\"P90th = round(percentile(Val, 90), 2)\", \"label\":\"P90th\"},\r\n    { \"value\":\"P95th = round(percentile(Val, 95), 2)\", \"label\":\"P95th\"}\r\n]"
          },
          {
            "id": "27345375-4376-4e2f-8ac4-59d4eab9d235",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateOrderLeft",
            "type": 1,
            "value": "desc",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "if (Aggregate contains 'P5th'), result = 'asc'",
                "criteriaContext": {
                  "leftOperand": "Aggregate",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "P5th",
                  "resultValType": "static",
                  "resultVal": "asc"
                }
              },
              {
                "condition": "if (Aggregate contains 'P10th'), result = 'asc'",
                "criteriaContext": {
                  "leftOperand": "Aggregate",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "P10th",
                  "resultValType": "static",
                  "resultVal": "asc"
                }
              },
              {
                "condition": "else result = 'desc'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "desc"
                }
              }
            ]
          },
          {
            "id": "4d9ba0ec-9d22-4fec-9f85-4be334f42d91",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateLeftValue",
            "type": 1,
            "isRequired": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"\\\"{Aggregate:value}\\\"\",\"transformers\":null}",
            "crossComponentResources": [
              "{Resources}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 8
          },
          {
            "id": "50242f48-6c7d-449b-ad93-838c94e615a0",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateLeftLabel",
            "type": 1,
            "isRequired": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"\\\"{Aggregate:label}\\\"\",\"transformers\":null}",
            "crossComponentResources": [
              "{Resources}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 8
          }
        ],
        "style": "above",
        "queryType": 8,
        "resourceType": "microsoft.resources/subscriptions"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "cpu params"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resources}"
        ],
        "parameters": [
          {
            "id": "333837c2-d5a4-4173-9aad-3db1dca17e2a",
            "version": "KqlParameterItem/1.0",
            "name": "Aggregate",
            "type": 2,
            "isRequired": true,
            "value": "P5th = round(percentile(Val, 5), 2)",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Average = round(avg(Val), 2)\", \"label\":\"Average\"},\r\n    { \"value\":\"P5th = round(percentile(Val, 5), 2)\", \"label\":\"P5th\"},\r\n    { \"value\":\"P10th = round(percentile(Val, 10), 2)\", \"label\":\"P10th\"},\r\n    { \"value\":\"P50th = round(percentile(Val, 50), 2)\", \"label\":\"P50th\"},\r\n    { \"value\":\"P80th = round(percentile(Val, 80), 2)\", \"label\":\"P80th\"},\r\n    { \"value\":\"P90th = round(percentile(Val, 90), 2)\", \"label\":\"P90th\"},\r\n    { \"value\":\"P95th = round(percentile(Val, 95), 2)\", \"label\":\"P95th\"}\r\n]"
          },
          {
            "id": "a23b29a5-5e4a-4d8e-ba73-bfdf27b2980e",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateOrderRight",
            "type": 1,
            "value": "asc",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "if (Aggregate contains 'P5th'), result = 'asc'",
                "criteriaContext": {
                  "leftOperand": "Aggregate",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "P5th",
                  "resultValType": "static",
                  "resultVal": "asc"
                }
              },
              {
                "condition": "if (Aggregate contains 'P10th'), result = 'asc'",
                "criteriaContext": {
                  "leftOperand": "Aggregate",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "P10th",
                  "resultValType": "static",
                  "resultVal": "asc"
                }
              },
              {
                "condition": "else result = 'desc'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "desc"
                }
              }
            ]
          },
          {
            "id": "cc8dfabc-9eb9-4227-97bb-f5e9319030ec",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateRightValue",
            "type": 1,
            "isRequired": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"\\\"{Aggregate:value}\\\"\",\"transformers\":null}",
            "crossComponentResources": [
              "{Resources}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 8
          },
          {
            "id": "ff7a79ff-742a-4c6e-8628-c52f45b3bf71",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateRightLabel",
            "type": 1,
            "isRequired": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"\\\"{Aggregate:label}\\\"\",\"transformers\":null}",
            "crossComponentResources": [
              "{Resources}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 8
          }
        ],
        "style": "above",
        "queryType": 8,
        "resourceType": "microsoft.resources/subscriptions"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "memory params"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let cpuSummary=totable(InsightsMetrics\r\n    | where TimeGenerated {TimeRange}\r\n    | where _ResourceId in~ ({Resources})\r\n    | where (Namespace == 'Processor' and Name == 'UtilizationPercentage')\r\n    | summarize hint.shufflekey=Computer {aggregateLeftValue} by Computer, Name\r\n    | top 10 by {aggregateLeftLabel} {aggregateOrderLeft});\r\nlet computerList=(cpuSummary \r\n    | project Computer);\r\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\r\nlet OmsNodeIdentityAndProps = computerList\r\n    | extend NodeId = Computer\r\n    | extend Priority = 1\r\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\r\nlet ServiceMapNodeIdentityAndProps = ServiceMapComputer_CL\r\n    | where TimeGenerated {TimeRange}\r\n    | where Computer in (computerList)\r\n    | summarize arg_max(TimeGenerated, *) by Computer\r\n    | extend Computer = ComputerName_s, AzureCloudServiceNodeIdentity = iif(isnotempty(columnifexists('AzureCloudServiceName_s', '')), strcat(columnifexists('AzureCloudServiceInstanceId_s', ''), '|',                     columnifexists('AzureCloudServiceDeployment_g', '')), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(columnifexists('AzureVmScaleSetName_s', '')),              strcat(columnifexists('AzureVmScaleSetInstanceId_s', ''), '|',                     columnifexists('AzureVmScaleSetDeployment_g', '')), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', ComputerName_s,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId_g,                   'resourceGroup', AzureResourceGroup_s,                   'azureResourceId', columnifexists('AzureResourceId_s', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', columnifexists('AzureCloudServiceInstanceId_s', ''),                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName_s', ''),                   'cloudServiceDeploymentId', columnifexists('AzureCloudServiceDeployment_g', ''),                   'cloudServiceName', columnifexists('AzureCloudServiceName_s', ''),                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('AzureName_s', ''),                   'vmScaleSetDeploymentId', columnifexists('AzureVmScaleSetDeployment_g', ''),                   'vmScaleSetName', columnifexists('AzureVmScaleSetName_s', ''),                   'serviceFabricClusterName', columnifexists('AzureServiceFabricClusterName_s', ''),                   'vmScaleSetResourceId', columnifexists('AzureVmScaleSetResourceId_s', ''),                   'resourceGroupName', columnifexists('AzureResourceGroup_s', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId_g', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\r\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \r\n    | summarize arg_max(Priority, *) by Computer; \r\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\r\n    | extend Kind = iff(NodeProps.type == \"StandAloneNode\", iff(NodeProps.azureResourceId == \"\", \"Non-Azure Virtual Machine\", \"Azure Virtual Machine\"), NodeProps.type), \r\n    ResourceId = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.vmScaleSetResourceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceDeploymentId, Computer)),\r\n    ResourceName = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.scaleSetInstanceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceInstanceId, Computer))\r\n    | project Computer, Kind, ResourceId, ResourceName;\r\nInsightsMetrics\r\n    | where TimeGenerated {TimeRange}\r\n    | where _ResourceId in~ ({Resources})\r\n    | where (Namespace == 'Processor' and Name == 'UtilizationPercentage')\r\n    | where Computer in (computerList)\r\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\r\n    | summarize {aggregateLeftValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName",
        "size": 0,
        "aggregation": 3,
        "showAnnotations": true,
        "noDataMessage": "There is no data for this counter, either enable the counter or onboard machines to this workspace",
        "queryType": 0,
        "resourceType": "{ResourceScope}",
        "crossComponentResources": [
          "{Resources}"
        ],
        "visualization": "linechart",
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "Computer",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "value",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {
          "ySettings": {
            "unit": 1,
            "min": 0,
            "max": 100
          }
        }
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "cpu query"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let memorySummary=totable(InsightsMetrics\r\n    | where TimeGenerated {TimeRange} \r\n    | where _ResourceId in~ ({Resources})\r\n    | where Namespace == 'Memory' and Name == 'AvailableMB'\r\n    | summarize hint.shufflekey=Computer {aggregateRightValue} by Computer, Name\r\n    | top 10 by {aggregateRightLabel} {aggregateOrderRight});\r\nlet computerList=(memorySummary \r\n    | project Computer);\r\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\r\nlet OmsNodeIdentityAndProps = computerList\r\n    | extend NodeId = Computer\r\n    | extend Priority = 1\r\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\r\nlet ServiceMapNodeIdentityAndProps = ServiceMapComputer_CL\r\n    | where TimeGenerated {TimeRange}\r\n    | where Computer in (computerList)\r\n    | summarize arg_max(TimeGenerated, *) by Computer\r\n    | extend Computer = ComputerName_s, AzureCloudServiceNodeIdentity = iif(isnotempty(columnifexists('AzureCloudServiceName_s', '')), strcat(columnifexists('AzureCloudServiceInstanceId_s', ''), '|',                     columnifexists('AzureCloudServiceDeployment_g', '')), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(columnifexists('AzureVmScaleSetName_s', '')),              strcat(columnifexists('AzureVmScaleSetInstanceId_s', ''), '|',                     columnifexists('AzureVmScaleSetDeployment_g', '')), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', ComputerName_s,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId_g,                   'resourceGroup', AzureResourceGroup_s,                   'azureResourceId', columnifexists('AzureResourceId_s', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', columnifexists('AzureCloudServiceInstanceId_s', ''),                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName_s', ''),                   'cloudServiceDeploymentId', columnifexists('AzureCloudServiceDeployment_g', ''),                   'cloudServiceName', columnifexists('AzureCloudServiceName_s', ''),                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('AzureName_s', ''),                   'vmScaleSetDeploymentId', columnifexists('AzureVmScaleSetDeployment_g', ''),                   'vmScaleSetName', columnifexists('AzureVmScaleSetName_s', ''),                   'serviceFabricClusterName', columnifexists('AzureServiceFabricClusterName_s', ''),                   'vmScaleSetResourceId', columnifexists('AzureVmScaleSetResourceId_s', ''),                   'resourceGroupName', columnifexists('AzureResourceGroup_s', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId_g', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\r\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \r\n    | summarize arg_max(Priority, *) by Computer; \r\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\r\n    | extend Kind = iff(NodeProps.type == \"StandAloneNode\", iff(NodeProps.azureResourceId == \"\", \"Non-Azure Virtual Machine\", \"Azure Virtual Machine\"), NodeProps.type), \r\n    ResourceId = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.vmScaleSetResourceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceDeploymentId, Computer)),\r\n    ResourceName = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.scaleSetInstanceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceInstanceId, Computer))\r\n    | project Computer, Kind, ResourceId, ResourceName;\r\nInsightsMetrics\r\n    | where TimeGenerated {TimeRange}\r\n    | where _ResourceId in~ ({Resources})\r\n    | where Namespace == 'Memory' and Name == 'AvailableMB'\r\n    | where Computer in (computerList)\r\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\r\n    | summarize {aggregateRightValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName",
        "size": 0,
        "aggregation": 3,
        "showAnnotations": true,
        "noDataMessage": "There is no data for this counter, either enable the counter or onboard machines to this workspace",
        "queryType": 0,
        "resourceType": "{ResourceScope}",
        "crossComponentResources": [
          "{Resources}"
        ],
        "visualization": "linechart",
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "Computer",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "value",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {
          "ySettings": {
            "unit": 4,
            "min": 0,
            "max": null
          }
        }
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "memory query"
    },
    {
      "type": 1,
      "content": {
        "json": "### Bytes Sent Rate"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "text - 18"
    },
    {
      "type": 1,
      "content": {
        "json": "### Bytes Received Rate"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "text - 19"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resources}"
        ],
        "parameters": [
          {
            "id": "360da4c1-97fa-4b15-a008-33a6110d0acd",
            "version": "KqlParameterItem/1.0",
            "name": "Aggregate",
            "type": 2,
            "isRequired": true,
            "value": "P95th = round(percentile(Val, 95), 2)",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Average = round(avg(Val), 2)\", \"label\":\"Average\"},\r\n    { \"value\":\"P5th = round(percentile(Val, 5), 2)\", \"label\":\"P5th\"},\r\n    { \"value\":\"P10th = round(percentile(Val, 10), 2)\", \"label\":\"P10th\"},\r\n    { \"value\":\"P50th = round(percentile(Val, 50), 2)\", \"label\":\"P50th\"},\r\n    { \"value\":\"P80th = round(percentile(Val, 80), 2)\", \"label\":\"P80th\"},\r\n    { \"value\":\"P90th = round(percentile(Val, 90), 2)\", \"label\":\"P90th\"},\r\n    { \"value\":\"P95th = round(percentile(Val, 95), 2)\", \"label\":\"P95th\"}\r\n]"
          },
          {
            "id": "31ccd4a1-d626-44bb-a5de-1780a33b37a5",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateOrderLeft",
            "type": 1,
            "value": "desc",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "if (Aggregate contains 'P5th'), result = 'asc'",
                "criteriaContext": {
                  "leftOperand": "Aggregate",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "P5th",
                  "resultValType": "static",
                  "resultVal": "asc"
                }
              },
              {
                "condition": "if (Aggregate contains 'P10th'), result = 'asc'",
                "criteriaContext": {
                  "leftOperand": "Aggregate",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "P10th",
                  "resultValType": "static",
                  "resultVal": "asc"
                }
              },
              {
                "condition": "else result = 'desc'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "desc"
                }
              }
            ]
          },
          {
            "id": "4765abab-a682-49f6-bb41-d64852aba192",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateLeftValue",
            "type": 1,
            "isRequired": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"\\\"{Aggregate:value}\\\"\",\"transformers\":null}",
            "crossComponentResources": [
              "{Resources}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 8
          },
          {
            "id": "1d9b0ea9-09d4-4c73-8e59-fa7ab760b880",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateLeftLabel",
            "type": 1,
            "isRequired": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"\\\"{Aggregate:label}\\\"\",\"transformers\":null}",
            "crossComponentResources": [
              "{Resources}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 8
          }
        ],
        "style": "above",
        "queryType": 8,
        "resourceType": "microsoft.resources/subscriptions"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "bytes sent params"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resources}"
        ],
        "parameters": [
          {
            "id": "6772b281-d17d-4293-a227-1b2ed67f399e",
            "version": "KqlParameterItem/1.0",
            "name": "Aggregate",
            "type": 2,
            "isRequired": true,
            "value": "P95th = round(percentile(Val, 95), 2)",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Average = round(avg(Val), 2)\", \"label\":\"Average\"},\r\n    { \"value\":\"P5th = round(percentile(Val, 5), 2)\", \"label\":\"P5th\"},\r\n    { \"value\":\"P10th = round(percentile(Val, 10), 2)\", \"label\":\"P10th\"},\r\n    { \"value\":\"P50th = round(percentile(Val, 50), 2)\", \"label\":\"P50th\"},\r\n    { \"value\":\"P80th = round(percentile(Val, 80), 2)\", \"label\":\"P80th\"},\r\n    { \"value\":\"P90th = round(percentile(Val, 90), 2)\", \"label\":\"P90th\"},\r\n    { \"value\":\"P95th = round(percentile(Val, 95), 2)\", \"label\":\"P95th\"}\r\n]"
          },
          {
            "id": "5e2eef28-0528-406f-86b5-ceae535455f9",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateOrderRight",
            "type": 1,
            "value": "desc",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "if (Aggregate contains 'P5th'), result = 'asc'",
                "criteriaContext": {
                  "leftOperand": "Aggregate",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "P5th",
                  "resultValType": "static",
                  "resultVal": "asc"
                }
              },
              {
                "condition": "if (Aggregate contains 'P10th'), result = 'asc'",
                "criteriaContext": {
                  "leftOperand": "Aggregate",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "P10th",
                  "resultValType": "static",
                  "resultVal": "asc"
                }
              },
              {
                "condition": "else result = 'desc'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "desc"
                }
              }
            ]
          },
          {
            "id": "586fa51c-1a45-4602-adcb-62eb0f619b7f",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateRightValue",
            "type": 1,
            "isRequired": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"\\\"{Aggregate:value}\\\"\",\"transformers\":null}",
            "crossComponentResources": [
              "{Resources}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 8
          },
          {
            "id": "912085b6-f920-4a37-9ce3-f1ef86bd5df8",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateRightLabel",
            "type": 1,
            "isRequired": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"\\\"{Aggregate:label}\\\"\",\"transformers\":null}",
            "crossComponentResources": [
              "{Resources}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 8
          }
        ],
        "style": "above",
        "queryType": 8,
        "resourceType": "microsoft.resources/subscriptions"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "bytes received params"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let memorySummary=totable(InsightsMetrics\r\n    | where TimeGenerated {TimeRange}\r\n    | where _ResourceId in~ ({Resources})\r\n    | where Namespace == 'Network' and Name == 'WriteBytesPerSecond'\r\n    | summarize hint.shufflekey=Computer {aggregateLeftValue} by Computer, Name\r\n    | top 10 by {aggregateLeftLabel} {aggregateOrderLeft});\r\nlet computerList=(memorySummary \r\n    | project Computer);\r\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\r\nlet OmsNodeIdentityAndProps = computerList\r\n    | extend NodeId = Computer\r\n    | extend Priority = 1\r\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\r\nlet ServiceMapNodeIdentityAndProps = ServiceMapComputer_CL\r\n    | where TimeGenerated {TimeRange}\r\n    | where Computer in (computerList)\r\n    | summarize arg_max(TimeGenerated, *) by Computer\r\n    | extend Computer = ComputerName_s, AzureCloudServiceNodeIdentity = iif(isnotempty(columnifexists('AzureCloudServiceName_s', '')), strcat(columnifexists('AzureCloudServiceInstanceId_s', ''), '|',                     columnifexists('AzureCloudServiceDeployment_g', '')), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(columnifexists('AzureVmScaleSetName_s', '')),              strcat(columnifexists('AzureVmScaleSetInstanceId_s', ''), '|',                     columnifexists('AzureVmScaleSetDeployment_g', '')), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', ComputerName_s,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId_g,                   'resourceGroup', AzureResourceGroup_s,                   'azureResourceId', columnifexists('AzureResourceId_s', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', columnifexists('AzureCloudServiceInstanceId_s', ''),                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName_s', ''),                   'cloudServiceDeploymentId', columnifexists('AzureCloudServiceDeployment_g', ''),                   'cloudServiceName', columnifexists('AzureCloudServiceName_s', ''),                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('AzureName_s', ''),                   'vmScaleSetDeploymentId', columnifexists('AzureVmScaleSetDeployment_g', ''),                   'vmScaleSetName', columnifexists('AzureVmScaleSetName_s', ''),                   'serviceFabricClusterName', columnifexists('AzureServiceFabricClusterName_s', ''),                   'vmScaleSetResourceId', columnifexists('AzureVmScaleSetResourceId_s', ''),                   'resourceGroupName', columnifexists('AzureResourceGroup_s', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId_g', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\r\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \r\n    | summarize arg_max(Priority, *) by Computer; \r\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\r\n    | extend Kind = iff(NodeProps.type == \"StandAloneNode\", iff(NodeProps.azureResourceId == \"\", \"Non-Azure Virtual Machine\", \"Azure Virtual Machine\"), NodeProps.type), \r\n    ResourceId = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.vmScaleSetResourceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceDeploymentId, Computer)),\r\n    ResourceName = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.scaleSetInstanceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceInstanceId, Computer))\r\n    | project Computer, Kind, ResourceId, ResourceName;\r\nInsightsMetrics\r\n    | where TimeGenerated {TimeRange}\r\n    | where _ResourceId in~ ({Resources})\r\n    | where Namespace == 'Network' and Name == 'WriteBytesPerSecond'\r\n    | where Computer in (computerList)\r\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\r\n    | summarize {aggregateLeftValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName",
        "size": 0,
        "showAnnotations": true,
        "noDataMessage": "There is no data for this counter, either enable the counter or onboard machines to this workspace",
        "queryType": 0,
        "resourceType": "{ResourceScope}",
        "crossComponentResources": [
          "{Resources}"
        ],
        "visualization": "linechart",
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "Computer",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "value",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {
          "ySettings": {
            "unit": 2,
            "min": 0,
            "max": null
          }
        }
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "bytes sent query"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let memorySummary=totable(InsightsMetrics\r\n    | where TimeGenerated {TimeRange}\r\n    | where _ResourceId in~ ({Resources})\r\n    | where Namespace == 'Network' and Name == 'ReadBytesPerSecond'\r\n    | summarize hint.shufflekey=Computer {aggregateRightValue} by Computer, Name\r\n    | top 10 by {aggregateRightLabel} {aggregateOrderRight});\r\nlet computerList=(memorySummary \r\n    | project Computer);\r\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\r\nlet OmsNodeIdentityAndProps = computerList\r\n    | extend NodeId = Computer\r\n    | extend Priority = 1\r\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\r\nlet ServiceMapNodeIdentityAndProps = ServiceMapComputer_CL\r\n    | where TimeGenerated {TimeRange}\r\n    | where Computer in (computerList)\r\n    | summarize arg_max(TimeGenerated, *) by Computer\r\n    | extend Computer = ComputerName_s, AzureCloudServiceNodeIdentity = iif(isnotempty(columnifexists('AzureCloudServiceName_s', '')), strcat(columnifexists('AzureCloudServiceInstanceId_s', ''), '|',                     columnifexists('AzureCloudServiceDeployment_g', '')), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(columnifexists('AzureVmScaleSetName_s', '')),              strcat(columnifexists('AzureVmScaleSetInstanceId_s', ''), '|',                     columnifexists('AzureVmScaleSetDeployment_g', '')), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', ComputerName_s,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId_g,                   'resourceGroup', AzureResourceGroup_s,                   'azureResourceId', columnifexists('AzureResourceId_s', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', columnifexists('AzureCloudServiceInstanceId_s', ''),                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName_s', ''),                   'cloudServiceDeploymentId', columnifexists('AzureCloudServiceDeployment_g', ''),                   'cloudServiceName', columnifexists('AzureCloudServiceName_s', ''),                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('AzureName_s', ''),                   'vmScaleSetDeploymentId', columnifexists('AzureVmScaleSetDeployment_g', ''),                   'vmScaleSetName', columnifexists('AzureVmScaleSetName_s', ''),                   'serviceFabricClusterName', columnifexists('AzureServiceFabricClusterName_s', ''),                   'vmScaleSetResourceId', columnifexists('AzureVmScaleSetResourceId_s', ''),                   'resourceGroupName', columnifexists('AzureResourceGroup_s', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId_g', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\r\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \r\n    | summarize arg_max(Priority, *) by Computer; \r\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\r\n    | extend Kind = iff(NodeProps.type == \"StandAloneNode\", iff(NodeProps.azureResourceId == \"\", \"Non-Azure Virtual Machine\", \"Azure Virtual Machine\"), NodeProps.type), \r\n    ResourceId = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.vmScaleSetResourceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceDeploymentId, Computer)),\r\n    ResourceName = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.scaleSetInstanceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceInstanceId, Computer))\r\n    | project Computer, Kind, ResourceId, ResourceName;\r\nInsightsMetrics\r\n    | where TimeGenerated {TimeRange}\r\n    | where _ResourceId in~ ({Resources})\r\n    | where Namespace == 'Network' and Name == 'ReadBytesPerSecond'\r\n    | where Computer in (computerList)\r\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\r\n    | summarize {aggregateRightValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName",
        "size": 0,
        "showAnnotations": true,
        "noDataMessage": "There is no data for this counter, either enable the counter or onboard machines to this workspace",
        "queryType": 0,
        "resourceType": "{ResourceScope}",
        "crossComponentResources": [
          "{Resources}"
        ],
        "visualization": "linechart",
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "Computer",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "value",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {
          "ySettings": {
            "unit": 2,
            "min": 0,
            "max": null
          }
        }
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "bytes received query"
    },
    {
      "type": 1,
      "content": {
        "json": "### Logical Disk Space Used %"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "text - 24"
    },
    {
      "type": 1,
      "content": {
        "json": ""
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "text - 25"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resources}"
        ],
        "parameters": [
          {
            "id": "5d6afbec-79f6-4cd1-b3a1-361503478304",
            "version": "KqlParameterItem/1.0",
            "name": "Aggregate",
            "type": 2,
            "isRequired": true,
            "value": "P95th = round(percentile(Val, 95), 2)",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Average = round(avg(Val), 2)\", \"label\":\"Average\"},\r\n    { \"value\":\"P5th = round(percentile(Val, 5), 2)\", \"label\":\"P5th\"},\r\n    { \"value\":\"P10th = round(percentile(Val, 10), 2)\", \"label\":\"P10th\"},\r\n    { \"value\":\"P50th = round(percentile(Val, 50), 2)\", \"label\":\"P50th\"},\r\n    { \"value\":\"P80th = round(percentile(Val, 80), 2)\", \"label\":\"P80th\"},\r\n    { \"value\":\"P90th = round(percentile(Val, 90), 2)\", \"label\":\"P90th\"},\r\n    { \"value\":\"P95th = round(percentile(Val, 95), 2)\", \"label\":\"P95th\"}\r\n]"
          },
          {
            "id": "1d5a805c-acce-4afe-a38b-c2740fb3ff26",
            "version": "KqlParameterItem/1.0",
            "name": "aggregateOrder",
            "type": 1,
            "value": "desc",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "if (Aggregate contains 'P5th'), result = 'asc'",
                "criteriaContext": {
                  "leftOperand": "Aggregate",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "P5th",
                  "resultValType": "static",
                  "resultVal": "asc"
                }
              },
              {
                "condition": "if (Aggregate contains 'P10th'), result = 'asc'",
                "criteriaContext": {
                  "leftOperand": "Aggregate",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "P10th",
                  "resultValType": "static",
                  "resultVal": "asc"
                }
              },
              {
                "condition": "else result = 'desc'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "desc"
                }
              }
            ]
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.resources/subscriptions"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "logical disk space used params"
    },
    {
      "type": 1,
      "content": {
        "json": ""
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "text - 27"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let memorySummary=totable(InsightsMetrics\r\n    | where TimeGenerated {TimeRange}\r\n    | where _ResourceId in~ ({Resources})\r\n    | where Namespace == 'LogicalDisk' and Name == 'FreeSpacePercentage'\r\n\t| extend Val = 100 - Val\r\n    | summarize hint.shufflekey=Computer {aggregateLeftValue} by Computer, Name\r\n    | top 10 by {aggregateLeftLabel} {aggregateOrderLeft});\r\nlet computerList=(memorySummary \r\n    | project Computer);\r\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\r\nlet OmsNodeIdentityAndProps = computerList\r\n    | extend NodeId = Computer\r\n    | extend Priority = 1\r\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\r\nlet ServiceMapNodeIdentityAndProps = ServiceMapComputer_CL\r\n    | where TimeGenerated {TimeRange}\r\n    | where Computer in (computerList)\r\n    | summarize arg_max(TimeGenerated, *) by Computer\r\n    | extend Computer = ComputerName_s, AzureCloudServiceNodeIdentity = iif(isnotempty(columnifexists('AzureCloudServiceName_s', '')), strcat(columnifexists('AzureCloudServiceInstanceId_s', ''), '|',                     columnifexists('AzureCloudServiceDeployment_g', '')), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(columnifexists('AzureVmScaleSetName_s', '')),              strcat(columnifexists('AzureVmScaleSetInstanceId_s', ''), '|',                     columnifexists('AzureVmScaleSetDeployment_g', '')), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', ComputerName_s,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId_g,                   'resourceGroup', AzureResourceGroup_s,                   'azureResourceId', columnifexists('AzureResourceId_s', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', columnifexists('AzureCloudServiceInstanceId_s', ''),                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName_s', ''),                   'cloudServiceDeploymentId', columnifexists('AzureCloudServiceDeployment_g', ''),                   'cloudServiceName', columnifexists('AzureCloudServiceName_s', ''),                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('AzureName_s', ''),                   'vmScaleSetDeploymentId', columnifexists('AzureVmScaleSetDeployment_g', ''),                   'vmScaleSetName', columnifexists('AzureVmScaleSetName_s', ''),                   'serviceFabricClusterName', columnifexists('AzureServiceFabricClusterName_s', ''),                   'vmScaleSetResourceId', columnifexists('AzureVmScaleSetResourceId_s', ''),                   'resourceGroupName', columnifexists('AzureResourceGroup_s', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId_g', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\r\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \r\n    | summarize arg_max(Priority, *) by Computer; \r\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\r\n    | extend Kind = iff(NodeProps.type == \"StandAloneNode\", iff(NodeProps.azureResourceId == \"\", \"Non-Azure Virtual Machine\", \"Azure Virtual Machine\"), NodeProps.type), \r\n    ResourceId = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.vmScaleSetResourceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceDeploymentId, Computer)),\r\n    ResourceName = iff(NodeProps.type == \"AzureScaleSetNode\", NodeProps.scaleSetInstanceId, \r\n        iff(NodeProps.type == \"AzureCloudServiceNode\", NodeProps.cloudServiceInstanceId, Computer))\r\n    | project Computer, Kind, ResourceId, ResourceName;\r\nInsightsMetrics\r\n    | where TimeGenerated {TimeRange}\r\n    | where _ResourceId in~ ({Resources})\r\n    | where Namespace == 'LogicalDisk' and Name == 'FreeSpacePercentage'\r\n\t| extend Val = 100 - Val\r\n    | where Computer in (computerList)\r\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\r\n    | summarize {aggregateLeftValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName",
        "size": 0,
        "aggregation": 3,
        "showAnnotations": true,
        "noDataMessage": "There is no data for this counter, either enable the counter or onboard machines to this workspace",
        "queryType": 0,
        "resourceType": "{ResourceScope}",
        "crossComponentResources": [
          "{Resources}"
        ],
        "visualization": "linechart",
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "Computer",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "value",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {
          "ySettings": {
            "unit": 1,
            "min": 0,
            "max": 100
          }
        }
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "top10"
      },
      "customWidth": "50",
      "name": "logical disk space used query"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
