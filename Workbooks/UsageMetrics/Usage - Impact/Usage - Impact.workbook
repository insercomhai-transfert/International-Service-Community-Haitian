{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "8e5b3d6e-f2a7-4d5f-99e7-8d51e31d842e",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "label": "During",
            "type": 4,
            "description": "Choose the time range for this report.",
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ]
            }
          },
          {
            "id": "24f98f96-2d26-4567-b8c1-9eca1b0121c5",
            "version": "KqlParameterItem/1.0",
            "name": "WhoUsed",
            "label": "For who used",
            "type": 2,
            "description": "Use the value of the selected metric on this event.",
            "isRequired": true,
            "query": "let table_customEvents = customEvents\r\n| where timestamp {TimeRange}\r\n| summarize total = count() by itemType, name \r\n| extend label = strcat(\"🟦 \", name)\r\n| top 500 by total desc;\r\nlet table_pageViews = pageViews\r\n| where timestamp {TimeRange}\r\n| summarize total = count() by itemType, name \r\n| extend label = strcat(\"🟨 \", name)\r\n| top 500 by total desc;\r\nlet table_requests = requests\r\n| where timestamp {TimeRange}\r\n| summarize total = count() by itemType, name \r\n| extend label = strcat(\"🟥 \", name)\r\n| top 500 by total desc; \r\nunion table_customEvents,table_pageViews,table_requests\r\n| project value=name, label, group = itemType\r\n",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "809c2750-18d5-47e3-b41a-f6cdb7ef561a",
            "version": "KqlParameterItem/1.0",
            "name": "BucketItem",
            "label": "analyze how its",
            "type": 2,
            "description": "Select the metric used to bucketize data.",
            "isRequired": true,
            "query": "let getTableSchema = (table: (*), tableName: string) { \r\n\t  table\r\n      | project  column_ifexists(\"customDimensions\",'')\r\n      | evaluate bag_unpack(column_ifexists(\"customDimensions\",''))\r\n      | getschema \r\n      | project label=ColumnName, ColumnType, TableName=tableName};\r\nlet t1 = getTableSchema(pageViews, 'pageViews');\r\nlet t2 = getTableSchema(customEvents, 'customEvents');\r\nlet t3 = getTableSchema(requests, 'requests');\r\nlet durationTable = datatable(value:string, label:string, group: string, selected: string)[\r\n\t'duration', 'Duration', 'Metrics', ''\r\n    ];\r\nlet customDimension =  union t1, t2, t3\r\n    | where ColumnType == 'string'\r\n    | summarize count() by label\r\n    | project value = strcat(\"customDimensions[\\\"\", label,\"\\\"]\"), label, group='Custom Properties', selected=''\r\n    | order by label asc;    \r\nlet validDimensionList = datatable(value:string, label:string)[\r\n\t'application_Version', 'Application version',\r\n\t'user_AuthenticatedId', 'Authenticated or anonymous traffic',\r\n\t'client_Browser', 'Browser version', \r\n\t'client_City', 'City',\r\n    'client_CountryOrRegion', 'Country or region', \r\n\t'cloud_RoleInstance', 'Cloud role instance', \r\n\t'cloud_RoleName', 'Cloud role name',\r\n\t'client_Model', 'Device model', \r\n    'client_OS', 'Operating system',\r\n\t'client_Type', 'Device type',\r\n\t'isSynthetic', 'Is real user traffic',\r\n    'name', 'Name', \r\n\t'operation_Name', 'Operation name',\r\n\t'performanceBucket', 'Performance',\r\n    'resultCode', 'Result code',\r\n    'responseCode', 'Response code',\r\n\t'tostring(parseurl(url)[\"Host\"])', 'URL host', \r\n\t'tostring(parseurl(url)[\"Path\"])', 'URL path',\r\n\t'operation_SyntheticSource', 'Source of synthetic traffic',\r\n\t'client_CountryOrRegion', 'State or province', \r\n\t'success', 'Successful request',\r\n    'type','Telemetry type'\r\n\t] | order by label asc;\r\nlet dimensionList = union pageViews, customEvents, requests\r\n    | where timestamp {TimeRange}\r\n    | getschema \r\n    | where ColumnType == \"string\"\r\n    | summarize count() by value = ColumnName\r\n    | join kind = inner validDimensionList on value\r\n    | project value, label, group = \"Standard Properties\", selected = ''\r\n    | order by label asc;\r\nunion durationTable, dimensionList, customDimension \r\n    | project value, label, group, selected\r\n    | where iff('{WhoUsed:label}' contains '🟦', group != 'Metrics', 1==1)\r\n\r\n",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "593233a9-14c2-464b-98fe-63c8e1419ae9",
            "version": "KqlParameterItem/1.0",
            "name": "ImpactItem",
            "label": "impacts the usage of ",
            "type": 2,
            "description": "Conversion will be calculated based on how many times this event happened after the impacting event.",
            "isRequired": true,
            "query": "let table_customEvents = customEvents\r\n| where timestamp {TimeRange}\r\n| summarize total = count() by itemType, name \r\n| extend label = strcat(\"🟦 \", name)\r\n| top 500 by total desc;\r\nlet table_pageViews = pageViews\r\n| where timestamp {TimeRange}\r\n| summarize total = count() by itemType, name \r\n| extend label = strcat(\"🟨 \", name)\r\n| top 500 by total desc;\r\nunion table_customEvents,table_pageViews\r\n| project value=name, label, group = itemType\r\n\r\n",
            "value": "Ajax query",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "1123006c-b3e0-4404-a47f-657ac07936f3",
            "version": "KqlParameterItem/1.0",
            "name": "Bucketize",
            "label": "Bucketize by",
            "type": 2,
            "description": "Determines how to bucketize the events.",
            "isRequired": true,
            "query": "datatable(value:string, text:string, selected: string)[\r\n'0.5', 'Half seconds', '',\r\n'0.25', 'Quarters of a second', '',\r\n'1', 'Seconds', '',\r\n'10', 'Deciles', '',\r\n'25', 'Quartiles', '',\r\n'5', 'Ventiles', 'true'\r\n]",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          }
        ],
        "style": "above",
        "queryType": 0
      },
      "name": "parameters - common"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "5632ed58-6194-40d9-a714-73c23cdba54d",
            "version": "KqlParameterItem/1.0",
            "name": "CustomFilters1",
            "label": "Add filters for who used",
            "type": 9,
            "description": "Add filters. Example: client_City == \"Seattle\" ",
            "multiSelect": true,
            "quote": "",
            "delimiter": " and ",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "802c11a0-9087-4a7b-a8be-747761d7ece5",
            "version": "KqlParameterItem/1.0",
            "name": "whoUsedFilters",
            "label": "",
            "type": 1,
            "value": null,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "if (CustomFilters1 is empty ), result = CustomFilters1",
                "criteriaContext": {
                  "leftOperand": "CustomFilters1",
                  "operator": "is Empty",
                  "rightValType": "static",
                  "resultValType": "param",
                  "resultVal": "CustomFilters1"
                }
              },
              {
                "condition": "else result = '| where {CustomFilters1}'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where {CustomFilters1}"
                }
              }
            ],
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "e26ccd9d-7c7e-44a3-963d-202d5e8ab71c",
            "version": "KqlParameterItem/1.0",
            "name": "CustomFilters2",
            "label": "Add filters for impacts ",
            "type": 9,
            "description": "Add filters. Example: client_Browser contains \"Edge\" ",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "65b92b9a-6983-483f-8bb1-cc97bf93aee2",
            "version": "KqlParameterItem/1.0",
            "name": "impactFilters",
            "type": 1,
            "value": null,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "if (CustomFilters2 is empty ), result = CustomFilters2",
                "criteriaContext": {
                  "leftOperand": "CustomFilters2",
                  "operator": "is Empty",
                  "rightValType": "param",
                  "resultValType": "param",
                  "resultVal": "CustomFilters2"
                }
              },
              {
                "condition": "else result = '| where {CustomFilters2}'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where {CustomFilters2}"
                }
              }
            ],
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          }
        ],
        "style": "pills",
        "queryType": 0
      },
      "name": "parameters - filters"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "db57ed02-320a-4427-81cc-d96b08ddc32d",
            "version": "KqlParameterItem/1.0",
            "name": "bucketQuery",
            "type": 1,
            "value": "| summarize percentiles(average, 5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100) | extend list = parse_json(strcat(\"[\", percentile_average_5,\",\",percentile_average_10,\",\",percentile_average_15,\",\",percentile_average_20,\",\",percentile_average_25,\",\",percentile_average_30,\",\",percentile_average_35,\",\",percentile_average_40,\",\",percentile_average_45,\",\",percentile_average_50,\",\",percentile_average_55,\",\",percentile_average_60,\",\",percentile_average_65,\",\",percentile_average_70,\",\",percentile_average_75,\",\",percentile_average_80,\",\",percentile_average_85,\",\",percentile_average_90,\",\",percentile_average_95,\",\",percentile_average_100, \"]\"))",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "if (Bucketize == '0.5'), result = '| extend list = parse_json(strcat(\"[\", 500,\",\",1000,\",\",1500,\",\",2000,\",\",2500,\",\",3000,\",\",3500,\",\",4000,\",\",4500,\",\",5000, \"]\"))'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "0.5",
                  "resultValType": "static",
                  "resultVal": "| extend list = parse_json(strcat(\"[\", 500,\",\",1000,\",\",1500,\",\",2000,\",\",2500,\",\",3000,\",\",3500,\",\",4000,\",\",4500,\",\",5000, \"]\"))"
                }
              },
              {
                "condition": "if (Bucketize == '10'), result = '| summarize percentiles(average, 10,20,30,40,50,60,70,80,90,100) | extend list = parse_json(strcat(\"[\", percentile_average_10,\",\",percentile_average_20,\",\",percentile_average_30,\",\",percentile_average_40,\",\",percentile_average_50,\",\",percentile_average_60,\",\",percentile_average_70,\",\",percentile_average_80,\",\",percentile_average_90,\",\",percentile_average_100, \"]\"))'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "10",
                  "resultValType": "static",
                  "resultVal": "| summarize percentiles(average, 10,20,30,40,50,60,70,80,90,100) | extend list = parse_json(strcat(\"[\", percentile_average_10,\",\",percentile_average_20,\",\",percentile_average_30,\",\",percentile_average_40,\",\",percentile_average_50,\",\",percentile_average_60,\",\",percentile_average_70,\",\",percentile_average_80,\",\",percentile_average_90,\",\",percentile_average_100, \"]\"))"
                }
              },
              {
                "condition": "if (Bucketize == '25'), result = '| summarize percentiles(average, 25,50,75,100) | extend list = parse_json(strcat(\"[\", percentile_average_25,\",\",percentile_average_50,\",\",percentile_average_75,\",\",percentile_average_100, \"]\"))'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "25",
                  "resultValType": "static",
                  "resultVal": "| summarize percentiles(average, 25,50,75,100) | extend list = parse_json(strcat(\"[\", percentile_average_25,\",\",percentile_average_50,\",\",percentile_average_75,\",\",percentile_average_100, \"]\"))"
                }
              },
              {
                "condition": "if (Bucketize == '1'), result = '| extend list = parse_json(strcat(\"[\", 1000,\",\",2000,\",\",3000,\",\",4000,\",\",5000,\",\",6000,\",\",7000,\",\",8000,\",\",9000,\",\",10000, \"]\"))'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "1",
                  "resultValType": "static",
                  "resultVal": "| extend list = parse_json(strcat(\"[\", 1000,\",\",2000,\",\",3000,\",\",4000,\",\",5000,\",\",6000,\",\",7000,\",\",8000,\",\",9000,\",\",10000, \"]\"))"
                }
              },
              {
                "condition": "if (Bucketize == '5'), result = '| summarize percentiles(average, 5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100) | extend list = parse_json(strcat(\"[\", percentile_average_5,\",\",percentile_average_10,\",\",percentile_average_15,\",\",percentile_average_20,\",\",percentile_average_25,\",\",percentile_average_30,\",\",percentile_average_35,\",\",percentile_average_40,\",\",percentile_average_45,\",\",percentile_average_50,\",\",percentile_average_55,\",\",percentile_average_60,\",\",percentile_average_65,\",\",percentile_average_70,\",\",percentile_average_75,\",\",percentile_average_80,\",\",percentile_average_85,\",\",percentile_average_90,\",\",percentile_average_95,\",\",percentile_average_100, \"]\"))'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "5",
                  "resultValType": "static",
                  "resultVal": "| summarize percentiles(average, 5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100) | extend list = parse_json(strcat(\"[\", percentile_average_5,\",\",percentile_average_10,\",\",percentile_average_15,\",\",percentile_average_20,\",\",percentile_average_25,\",\",percentile_average_30,\",\",percentile_average_35,\",\",percentile_average_40,\",\",percentile_average_45,\",\",percentile_average_50,\",\",percentile_average_55,\",\",percentile_average_60,\",\",percentile_average_65,\",\",percentile_average_70,\",\",percentile_average_75,\",\",percentile_average_80,\",\",percentile_average_85,\",\",percentile_average_90,\",\",percentile_average_95,\",\",percentile_average_100, \"]\"))"
                }
              },
              {
                "condition": "else result = '| extend list = parse_json(strcat(\"[\", 250,\",\",500,\",\",750,\",\",1000,\",\",1250,\",\",1500,\",\",1750,\",\",2000,\",\",2250,\",\",2500,\",\",2750,\",\",3000,\",\",3250,\",\",3500,\",\",3750,\",\",4000,\",\",4250,\",\",4500,\",\",4750,\",\",5000, \"]\"))'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| extend list = parse_json(strcat(\"[\", 250,\",\",500,\",\",750,\",\",1000,\",\",1250,\",\",1500,\",\",1750,\",\",2000,\",\",2250,\",\",2500,\",\",2750,\",\",3000,\",\",3250,\",\",3500,\",\",3750,\",\",4000,\",\",4250,\",\",4500,\",\",4750,\",\",5000, \"]\"))"
                }
              }
            ],
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "6a99cb19-efab-4114-a56f-4b20dc76bd83",
            "version": "KqlParameterItem/1.0",
            "name": "bucketizeFunc",
            "type": 1,
            "value": "case(metric >= 0 and metric <= buckets[0], 0,metric > buckets[0] and metric <= buckets[1], 1,metric > buckets[1] and metric <= buckets[2], 2,metric > buckets[2] and metric <= buckets[3], 3,metric > buckets[3] and metric <= buckets[4], 4,metric > buckets[4] and metric <= buckets[5], 5,metric > buckets[5] and metric <= buckets[6], 6,metric > buckets[6] and metric <= buckets[7], 7,metric > buckets[7] and metric <= buckets[8], 8,metric > buckets[8] and metric <= buckets[9], 9,metric > buckets[9] and metric <= buckets[10], 10,metric > buckets[10] and metric <= buckets[11], 11,metric > buckets[11] and metric <= buckets[12], 12,metric > buckets[12] and metric <= buckets[13], 13,metric > buckets[13] and metric <= buckets[14], 14,metric > buckets[14] and metric <= buckets[15], 15,metric > buckets[15] and metric <= buckets[16], 16,metric > buckets[16] and metric <= buckets[17], 17,metric > buckets[17] and metric <= buckets[18], 18,metric > buckets[18] and metric <= buckets[19], 19, -1)",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "if (Bucketize == '0.5'), result = 'case(metric >= 0 and metric <= buckets[0], 0,metric > buckets[0] and metric <= buckets[1], 1,metric > buckets[1] and metric <= buckets[2], 2,metric > buckets[2] and metric <= buckets[3], 3,metric > buckets[3] and metric <= buckets[4], 4,metric > buckets[4] and metric <= buckets[5], 5,metric > buckets[5] and metric <= buckets[6], 6,metric > buckets[6] and metric <= buckets[7], 7,metric > buckets[7] and metric <= buckets[8], 8,metric > buckets[8] and metric <= buckets[9], 9, -1)'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "0.5",
                  "resultValType": "static",
                  "resultVal": "case(metric >= 0 and metric <= buckets[0], 0,metric > buckets[0] and metric <= buckets[1], 1,metric > buckets[1] and metric <= buckets[2], 2,metric > buckets[2] and metric <= buckets[3], 3,metric > buckets[3] and metric <= buckets[4], 4,metric > buckets[4] and metric <= buckets[5], 5,metric > buckets[5] and metric <= buckets[6], 6,metric > buckets[6] and metric <= buckets[7], 7,metric > buckets[7] and metric <= buckets[8], 8,metric > buckets[8] and metric <= buckets[9], 9, -1)"
                }
              },
              {
                "condition": "if (Bucketize == '10'), result = 'case(metric >= 0 and metric <= buckets[0], 0,metric > buckets[0] and metric <= buckets[1], 1,metric > buckets[1] and metric <= buckets[2], 2,metric > buckets[2] and metric <= buckets[3], 3,metric > buckets[3] and metric <= buckets[4], 4,metric > buckets[4] and metric <= buckets[5], 5,metric > buckets[5] and metric <= buckets[6], 6,metric > buckets[6] and metric <= buckets[7], 7,metric > buckets[7] and metric <= buckets[8], 8,metric > buckets[8] and metric <= buckets[9], 9, -1)'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "10",
                  "resultValType": "static",
                  "resultVal": "case(metric >= 0 and metric <= buckets[0], 0,metric > buckets[0] and metric <= buckets[1], 1,metric > buckets[1] and metric <= buckets[2], 2,metric > buckets[2] and metric <= buckets[3], 3,metric > buckets[3] and metric <= buckets[4], 4,metric > buckets[4] and metric <= buckets[5], 5,metric > buckets[5] and metric <= buckets[6], 6,metric > buckets[6] and metric <= buckets[7], 7,metric > buckets[7] and metric <= buckets[8], 8,metric > buckets[8] and metric <= buckets[9], 9, -1)"
                }
              },
              {
                "condition": "if (Bucketize == '25'), result = 'case(metric >= 0 and metric <= buckets[0], 0,metric > buckets[0] and metric <= buckets[1], 1,metric > buckets[1] and metric <= buckets[2], 2,metric > buckets[2] and metric <= buckets[3], 3, -1)'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "25",
                  "resultValType": "static",
                  "resultVal": "case(metric >= 0 and metric <= buckets[0], 0,metric > buckets[0] and metric <= buckets[1], 1,metric > buckets[1] and metric <= buckets[2], 2,metric > buckets[2] and metric <= buckets[3], 3, -1)"
                }
              },
              {
                "condition": "if (Bucketize == '1'), result = 'case(metric >= 0 and metric <= buckets[0], 0,metric > buckets[0] and metric <= buckets[1], 1,metric > buckets[1] and metric <= buckets[2], 2,metric > buckets[2] and metric <= buckets[3], 3,metric > buckets[3] and metric <= buckets[4], 4,metric > buckets[4] and metric <= buckets[5], 5,metric > buckets[5] and metric <= buckets[6], 6,metric > buckets[6] and metric <= buckets[7], 7,metric > buckets[7] and metric <= buckets[8], 8,metric > buckets[8] and metric <= buckets[9], 9, -1)'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "1",
                  "resultValType": "static",
                  "resultVal": "case(metric >= 0 and metric <= buckets[0], 0,metric > buckets[0] and metric <= buckets[1], 1,metric > buckets[1] and metric <= buckets[2], 2,metric > buckets[2] and metric <= buckets[3], 3,metric > buckets[3] and metric <= buckets[4], 4,metric > buckets[4] and metric <= buckets[5], 5,metric > buckets[5] and metric <= buckets[6], 6,metric > buckets[6] and metric <= buckets[7], 7,metric > buckets[7] and metric <= buckets[8], 8,metric > buckets[8] and metric <= buckets[9], 9, -1)"
                }
              },
              {
                "condition": "if (Bucketize == '5'), result = 'case(metric >= 0 and metric <= buckets[0], 0,metric > buckets[0] and metric <= buckets[1], 1,metric > buckets[1] and metric <= buckets[2], 2,metric > buckets[2] and metric <= buckets[3], 3,metric > buckets[3] and metric <= buckets[4], 4,metric > buckets[4] and metric <= buckets[5], 5,metric > buckets[5] and metric <= buckets[6], 6,metric > buckets[6] and metric <= buckets[7], 7,metric > buckets[7] and metric <= buckets[8], 8,metric > buckets[8] and metric <= buckets[9], 9,metric > buckets[9] and metric <= buckets[10], 10,metric > buckets[10] and metric <= buckets[11], 11,metric > buckets[11] and metric <= buckets[12], 12,metric > buckets[12] and metric <= buckets[13], 13,metric > buckets[13] and metric <= buckets[14], 14,metric > buckets[14] and metric <= buckets[15], 15,metric > buckets[15] and metric <= buckets[16], 16,metric > buckets[16] and metric <= buckets[17], 17,metric > buckets[17] and metric <= buckets[18], 18,metric > buckets[18] and metric <= buckets[19], 19, -1)'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "5",
                  "resultValType": "static",
                  "resultVal": "case(metric >= 0 and metric <= buckets[0], 0,metric > buckets[0] and metric <= buckets[1], 1,metric > buckets[1] and metric <= buckets[2], 2,metric > buckets[2] and metric <= buckets[3], 3,metric > buckets[3] and metric <= buckets[4], 4,metric > buckets[4] and metric <= buckets[5], 5,metric > buckets[5] and metric <= buckets[6], 6,metric > buckets[6] and metric <= buckets[7], 7,metric > buckets[7] and metric <= buckets[8], 8,metric > buckets[8] and metric <= buckets[9], 9,metric > buckets[9] and metric <= buckets[10], 10,metric > buckets[10] and metric <= buckets[11], 11,metric > buckets[11] and metric <= buckets[12], 12,metric > buckets[12] and metric <= buckets[13], 13,metric > buckets[13] and metric <= buckets[14], 14,metric > buckets[14] and metric <= buckets[15], 15,metric > buckets[15] and metric <= buckets[16], 16,metric > buckets[16] and metric <= buckets[17], 17,metric > buckets[17] and metric <= buckets[18], 18,metric > buckets[18] and metric <= buckets[19], 19, -1)"
                }
              },
              {
                "condition": "else result = 'case(metric >= 0 and metric <= buckets[0], 0,metric > buckets[0] and metric <= buckets[1], 1,metric > buckets[1] and metric <= buckets[2], 2,metric > buckets[2] and metric <= buckets[3], 3,metric > buckets[3] and metric <= buckets[4], 4,metric > buckets[4] and metric <= buckets[5], 5,metric > buckets[5] and metric <= buckets[6], 6,metric > buckets[6] and metric <= buckets[7], 7,metric > buckets[7] and metric <= buckets[8], 8,metric > buckets[8] and metric <= buckets[9], 9,metric > buckets[9] and metric <= buckets[10], 10,metric > buckets[10] and metric <= buckets[11], 11,metric > buckets[11] and metric <= buckets[12], 12,metric > buckets[12] and metric <= buckets[13], 13,metric > buckets[13] and metric <= buckets[14], 14,metric > buckets[14] and metric <= buckets[15], 15,metric > buckets[15] and metric <= buckets[16], 16,metric > buckets[16] and metric <= buckets[17], 17,metric > buckets[17] and metric <= buckets[18], 18,metric > buckets[18] and metric <= buckets[19], 19, -1)'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "case(metric >= 0 and metric <= buckets[0], 0,metric > buckets[0] and metric <= buckets[1], 1,metric > buckets[1] and metric <= buckets[2], 2,metric > buckets[2] and metric <= buckets[3], 3,metric > buckets[3] and metric <= buckets[4], 4,metric > buckets[4] and metric <= buckets[5], 5,metric > buckets[5] and metric <= buckets[6], 6,metric > buckets[6] and metric <= buckets[7], 7,metric > buckets[7] and metric <= buckets[8], 8,metric > buckets[8] and metric <= buckets[9], 9,metric > buckets[9] and metric <= buckets[10], 10,metric > buckets[10] and metric <= buckets[11], 11,metric > buckets[11] and metric <= buckets[12], 12,metric > buckets[12] and metric <= buckets[13], 13,metric > buckets[13] and metric <= buckets[14], 14,metric > buckets[14] and metric <= buckets[15], 15,metric > buckets[15] and metric <= buckets[16], 16,metric > buckets[16] and metric <= buckets[17], 17,metric > buckets[17] and metric <= buckets[18], 18,metric > buckets[18] and metric <= buckets[19], 19, -1)"
                }
              }
            ],
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "10d00564-f0c4-4dbe-b4dd-781cfc7cea78",
            "version": "KqlParameterItem/1.0",
            "name": "bucketLabel",
            "type": 1,
            "value": "case(bucket == 0, \"Ventile 1\",bucket == 1, \"Ventile 2\",bucket == 2, \"Ventile 3\",bucket == 3, \"Ventile 4\",bucket == 4, \"Ventile 5\",bucket == 5, \"Ventile 6\",bucket == 6, \"Ventile 7\",bucket == 7, \"Ventile 8\",bucket == 8, \"Ventile 9\",bucket == 9, \"Ventile 10\",bucket == 10, \"Ventile 11\",bucket == 11, \"Ventile 12\",bucket == 12, \"Ventile 13\",bucket == 13, \"Ventile 14\",bucket == 14, \"Ventile 15\",bucket == 15, \"Ventile 16\",bucket == 16, \"Ventile 17\",bucket == 17, \"Ventile 18\",bucket == 18, \"Ventile 19\",bucket == 19, \"Ventile 20\", \"\")",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "if (Bucketize == '0.5'), result = 'case(bucket == 0, \"0s - 0.5s\",bucket == 1, \"0.5s - 1s\",bucket == 2, \"1s - 1.5s\",bucket == 3, \"1.5s - 2s\",bucket == 4, \"2s - 2.5s\",bucket == 5, \"2.5s - 3s\",bucket == 6, \"3s - 3.5s\",bucket == 7, \"3.5s - 4s\",bucket == 8, \"4s - 4.5s\",bucket == 9, \"4.5s - 5s\", \"\")'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "0.5",
                  "resultValType": "static",
                  "resultVal": "case(bucket == 0, \"0s - 0.5s\",bucket == 1, \"0.5s - 1s\",bucket == 2, \"1s - 1.5s\",bucket == 3, \"1.5s - 2s\",bucket == 4, \"2s - 2.5s\",bucket == 5, \"2.5s - 3s\",bucket == 6, \"3s - 3.5s\",bucket == 7, \"3.5s - 4s\",bucket == 8, \"4s - 4.5s\",bucket == 9, \"4.5s - 5s\", \"\")"
                }
              },
              {
                "condition": "if (Bucketize == '10'), result = 'case(bucket == 0, \"Decile 1\",bucket == 1, \"Decile 2\",bucket == 2, \"Decile 3\",bucket == 3, \"Decile 4\",bucket == 4, \"Decile 5\",bucket == 5, \"Decile 6\",bucket == 6, \"Decile 7\",bucket == 7, \"Decile 8\",bucket == 8, \"Decile 9\",bucket == 9, \"Decile 10\", \"\")'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "10",
                  "resultValType": "static",
                  "resultVal": "case(bucket == 0, \"Decile 1\",bucket == 1, \"Decile 2\",bucket == 2, \"Decile 3\",bucket == 3, \"Decile 4\",bucket == 4, \"Decile 5\",bucket == 5, \"Decile 6\",bucket == 6, \"Decile 7\",bucket == 7, \"Decile 8\",bucket == 8, \"Decile 9\",bucket == 9, \"Decile 10\", \"\")"
                }
              },
              {
                "condition": "if (Bucketize == '25'), result = 'case(bucket == 0, \"Quartile 1\",bucket == 1, \"Quartile 2\",bucket == 2, \"Quartile 3\",bucket == 3, \"Quartile 4\", \"\")'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "25",
                  "resultValType": "static",
                  "resultVal": "case(bucket == 0, \"Quartile 1\",bucket == 1, \"Quartile 2\",bucket == 2, \"Quartile 3\",bucket == 3, \"Quartile 4\", \"\")"
                }
              },
              {
                "condition": "if (Bucketize == '1'), result = 'case(bucket == 0, \"0s - 1s\",bucket == 1, \"1s - 2s\",bucket == 2, \"2s - 3s\",bucket == 3, \"3s - 4s\",bucket == 4, \"4s - 5s\",bucket == 5, \"5s - 6s\",bucket == 6, \"6s - 7s\",bucket == 7, \"7s - 8s\",bucket == 8, \"8s - 9s\",bucket == 9, \"9s - 10s\", \"\")'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "1",
                  "resultValType": "static",
                  "resultVal": "case(bucket == 0, \"0s - 1s\",bucket == 1, \"1s - 2s\",bucket == 2, \"2s - 3s\",bucket == 3, \"3s - 4s\",bucket == 4, \"4s - 5s\",bucket == 5, \"5s - 6s\",bucket == 6, \"6s - 7s\",bucket == 7, \"7s - 8s\",bucket == 8, \"8s - 9s\",bucket == 9, \"9s - 10s\", \"\")"
                }
              },
              {
                "condition": "if (Bucketize == '5'), result = 'case(bucket == 0, \"Ventile 1\",bucket == 1, \"Ventile 2\",bucket == 2, \"Ventile 3\",bucket == 3, \"Ventile 4\",bucket == 4, \"Ventile 5\",bucket == 5, \"Ventile 6\",bucket == 6, \"Ventile 7\",bucket == 7, \"Ventile 8\",bucket == 8, \"Ventile 9\",bucket == 9, \"Ventile 10\",bucket == 10, \"Ventile 11\",bucket == 11, \"Ventile 12\",bucket == 12, \"Ventile 13\",bucket == 13, \"Ventile 14\",bucket == 14, \"Ventile 15\",bucket == 15, \"Ventile 16\",bucket == 16, \"Ventile 17\",bucket == 17, \"Ventile 18\",bucket == 18, \"Ventile 19\",bucket == 19, \"Ventile 20\", \"\")'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "5",
                  "resultValType": "static",
                  "resultVal": "case(bucket == 0, \"Ventile 1\",bucket == 1, \"Ventile 2\",bucket == 2, \"Ventile 3\",bucket == 3, \"Ventile 4\",bucket == 4, \"Ventile 5\",bucket == 5, \"Ventile 6\",bucket == 6, \"Ventile 7\",bucket == 7, \"Ventile 8\",bucket == 8, \"Ventile 9\",bucket == 9, \"Ventile 10\",bucket == 10, \"Ventile 11\",bucket == 11, \"Ventile 12\",bucket == 12, \"Ventile 13\",bucket == 13, \"Ventile 14\",bucket == 14, \"Ventile 15\",bucket == 15, \"Ventile 16\",bucket == 16, \"Ventile 17\",bucket == 17, \"Ventile 18\",bucket == 18, \"Ventile 19\",bucket == 19, \"Ventile 20\", \"\")"
                }
              },
              {
                "condition": "else result = 'case(bucket == 0, \"0s - 0.25s\",bucket == 1, \"0.25s - 0.5s\",bucket == 2, \"0.5s - 0.75s\",bucket == 3, \"0.75s - 1s\",bucket == 4, \"1s - 1.25s\",bucket == 5, \"1.25s - 1.5s\",bucket == 6, \"1.5s - 1.75s\",bucket == 7, \"1.75s - 2s\",bucket == 8, \"2s - 2.25s\",bucket == 9, \"2.25s - 2.5s\",bucket == 10, \"2.5s - 2.75s\",bucket == 11, \"2.75s - 3s\",bucket == 12, \"3s - 3.25s\",bucket == 13, \"3.25s - 3.5s\",bucket == 14, \"3.5s - 3.75s\",bucket == 15, \"3.75s - 4s\",bucket == 16, \"4s - 4.25s\",bucket == 17, \"4.25s - 4.5s\",bucket == 18, \"4.5s - 4.75s\",bucket == 19, \"4.75s - 5s\", \"\")'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "case(bucket == 0, \"0s - 0.25s\",bucket == 1, \"0.25s - 0.5s\",bucket == 2, \"0.5s - 0.75s\",bucket == 3, \"0.75s - 1s\",bucket == 4, \"1s - 1.25s\",bucket == 5, \"1.25s - 1.5s\",bucket == 6, \"1.5s - 1.75s\",bucket == 7, \"1.75s - 2s\",bucket == 8, \"2s - 2.25s\",bucket == 9, \"2.25s - 2.5s\",bucket == 10, \"2.5s - 2.75s\",bucket == 11, \"2.75s - 3s\",bucket == 12, \"3s - 3.25s\",bucket == 13, \"3.25s - 3.5s\",bucket == 14, \"3.5s - 3.75s\",bucket == 15, \"3.75s - 4s\",bucket == 16, \"4s - 4.25s\",bucket == 17, \"4.25s - 4.5s\",bucket == 18, \"4.5s - 4.75s\",bucket == 19, \"4.75s - 5s\", \"\")"
                }
              }
            ],
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "46276124-a667-4cb0-926e-056a309b91f9",
            "version": "KqlParameterItem/1.0",
            "name": "bucketTooltip",
            "type": 1,
            "value": "case(bucket == 0, strcat(0 , \" s \", \"to\", \" \" , buckets[0]*100/100000.0, \" s\"),bucket == 1, strcat(buckets[0]*100/100000.0 , \" s \", \"to\", \" \" , buckets[1]*100/100000.0, \" s\"),bucket == 2, strcat(buckets[1]*100/100000.0 , \" s \", \"to\", \" \" , buckets[2]*100/100000.0, \" s\"),bucket == 3, strcat(buckets[2]*100/100000.0 , \" s \", \"to\", \" \" , buckets[3]*100/100000.0, \" s\"),bucket == 4, strcat(buckets[3]*100/100000.0 , \" s \", \"to\", \" \" , buckets[4]*100/100000.0, \" s\"),bucket == 5, strcat(buckets[4]*100/100000.0 , \" s \", \"to\", \" \" , buckets[5]*100/100000.0, \" s\"),bucket == 6, strcat(buckets[5]*100/100000.0 , \" s \", \"to\", \" \" , buckets[6]*100/100000.0, \" s\"),bucket == 7, strcat(buckets[6]*100/100000.0 , \" s \", \"to\", \" \" , buckets[7]*100/100000.0, \" s\"),bucket == 8, strcat(buckets[7]*100/100000.0 , \" s \", \"to\", \" \" , buckets[8]*100/100000.0, \" s\"),bucket == 9, strcat(buckets[8]*100/100000.0 , \" s \", \"to\", \" \" , buckets[9]*100/100000.0, \" s\"),bucket == 10, strcat(buckets[9]*100/100000.0 , \" s \", \"to\", \" \" , buckets[10]*100/100000.0, \" s\"),bucket == 11, strcat(buckets[10]*100/100000.0 , \" s \", \"to\", \" \" , buckets[11]*100/100000.0, \" s\"),bucket == 12, strcat(buckets[11]*100/100000.0 , \" s \", \"to\", \" \" , buckets[12]*100/100000.0, \" s\"),bucket == 13, strcat(buckets[12]*100/100000.0 , \" s \", \"to\", \" \" , buckets[13]*100/100000.0, \" s\"),bucket == 14, strcat(buckets[13]*100/100000.0 , \" s \", \"to\", \" \" , buckets[14]*100/100000.0, \" s\"),bucket == 15, strcat(buckets[14]*100/100000.0 , \" s \", \"to\", \" \" , buckets[15]*100/100000.0, \" s\"),bucket == 16, strcat(buckets[15]*100/100000.0 , \" s \", \"to\", \" \" , buckets[16]*100/100000.0, \" s\"),bucket == 17, strcat(buckets[16]*100/100000.0 , \" s \", \"to\", \" \" , buckets[17]*100/100000.0, \" s\"),bucket == 18, strcat(buckets[17]*100/100000.0 , \" s \", \"to\", \" \" , buckets[18]*100/100000.0, \" s\"),bucket == 19, strcat(buckets[18]*100/100000.0 , \" s \", \"to\", \" \" , buckets[19]*100/100000.0, \" s\"), \"\")",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "if (Bucketize == '0.5'), result = 'case(bucket == 0, \"\",bucket == 1, \"\",bucket == 2, \"\",bucket == 3, \"\",bucket == 4, \"\",bucket == 5, \"\",bucket == 6, \"\",bucket == 7, \"\",bucket == 8, \"\",bucket == 9, \"\", \"\")'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "0.5",
                  "resultValType": "static",
                  "resultVal": "case(bucket == 0, \"\",bucket == 1, \"\",bucket == 2, \"\",bucket == 3, \"\",bucket == 4, \"\",bucket == 5, \"\",bucket == 6, \"\",bucket == 7, \"\",bucket == 8, \"\",bucket == 9, \"\", \"\")"
                }
              },
              {
                "condition": "if (Bucketize == '10'), result = 'case(bucket == 0, strcat(0 , \" s \", \"to\", \" \" , buckets[0]*100/100000.0, \" s\"),bucket == 1, strcat(buckets[0]*100/100000.0 , \" s \", \"to\", \" \" , buckets[1]*100/100000.0, \" s\"),bucket == 2, strcat(buckets[1]*100/100000.0 , \" s \", \"to\", \" \" , buckets[2]*100/100000.0, \" s\"),bucket == 3, strcat(buckets[2]*100/100000.0 , \" s \", \"to\", \" \" , buckets[3]*100/100000.0, \" s\"),bucket == 4, strcat(buckets[3]*100/100000.0 , \" s \", \"to\", \" \" , buckets[4]*100/100000.0, \" s\"),bucket == 5, strcat(buckets[4]*100/100000.0 , \" s \", \"to\", \" \" , buckets[5]*100/100000.0, \" s\"),bucket == 6, strcat(buckets[5]*100/100000.0 , \" s \", \"to\", \" \" , buckets[6]*100/100000.0, \" s\"),bucket == 7, strcat(buckets[6]*100/100000.0 , \" s \", \"to\", \" \" , buckets[7]*100/100000.0, \" s\"),bucket == 8, strcat(buckets[7]*100/100000.0 , \" s \", \"to\", \" \" , buckets[8]*100/100000.0, \" s\"),bucket == 9, strcat(buckets[8]*100/100000.0 , \" s \", \"to\", \" \" , buckets[9]*100/100000.0, \" s\"), \"\")'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "10",
                  "resultValType": "static",
                  "resultVal": "case(bucket == 0, strcat(0 , \" s \", \"to\", \" \" , buckets[0]*100/100000.0, \" s\"),bucket == 1, strcat(buckets[0]*100/100000.0 , \" s \", \"to\", \" \" , buckets[1]*100/100000.0, \" s\"),bucket == 2, strcat(buckets[1]*100/100000.0 , \" s \", \"to\", \" \" , buckets[2]*100/100000.0, \" s\"),bucket == 3, strcat(buckets[2]*100/100000.0 , \" s \", \"to\", \" \" , buckets[3]*100/100000.0, \" s\"),bucket == 4, strcat(buckets[3]*100/100000.0 , \" s \", \"to\", \" \" , buckets[4]*100/100000.0, \" s\"),bucket == 5, strcat(buckets[4]*100/100000.0 , \" s \", \"to\", \" \" , buckets[5]*100/100000.0, \" s\"),bucket == 6, strcat(buckets[5]*100/100000.0 , \" s \", \"to\", \" \" , buckets[6]*100/100000.0, \" s\"),bucket == 7, strcat(buckets[6]*100/100000.0 , \" s \", \"to\", \" \" , buckets[7]*100/100000.0, \" s\"),bucket == 8, strcat(buckets[7]*100/100000.0 , \" s \", \"to\", \" \" , buckets[8]*100/100000.0, \" s\"),bucket == 9, strcat(buckets[8]*100/100000.0 , \" s \", \"to\", \" \" , buckets[9]*100/100000.0, \" s\"), \"\")"
                }
              },
              {
                "condition": "if (Bucketize == '25'), result = 'case(bucket == 0, strcat(0 , \" s \", \"to\", \" \" , buckets[0]*100/100000.0, \" s\"),bucket == 1, strcat(buckets[0]*100/100000.0 , \" s \", \"to\", \" \" , buckets[1]*100/100000.0, \" s\"),bucket == 2, strcat(buckets[1]*100/100000.0 , \" s \", \"to\", \" \" , buckets[2]*100/100000.0, \" s\"),bucket == 3, strcat(buckets[2]*100/100000.0 , \" s \", \"to\", \" \" , buckets[3]*100/100000.0, \" s\"), \"\")'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "25",
                  "resultValType": "static",
                  "resultVal": "case(bucket == 0, strcat(0 , \" s \", \"to\", \" \" , buckets[0]*100/100000.0, \" s\"),bucket == 1, strcat(buckets[0]*100/100000.0 , \" s \", \"to\", \" \" , buckets[1]*100/100000.0, \" s\"),bucket == 2, strcat(buckets[1]*100/100000.0 , \" s \", \"to\", \" \" , buckets[2]*100/100000.0, \" s\"),bucket == 3, strcat(buckets[2]*100/100000.0 , \" s \", \"to\", \" \" , buckets[3]*100/100000.0, \" s\"), \"\")"
                }
              },
              {
                "condition": "if (Bucketize == '1'), result = 'case(bucket == 0, \"\",bucket == 1, \"\",bucket == 2, \"\",bucket == 3, \"\",bucket == 4, \"\",bucket == 5, \"\",bucket == 6, \"\",bucket == 7, \"\",bucket == 8, \"\",bucket == 9, \"\", \"\")'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "1",
                  "resultValType": "static",
                  "resultVal": "case(bucket == 0, \"\",bucket == 1, \"\",bucket == 2, \"\",bucket == 3, \"\",bucket == 4, \"\",bucket == 5, \"\",bucket == 6, \"\",bucket == 7, \"\",bucket == 8, \"\",bucket == 9, \"\", \"\")"
                }
              },
              {
                "condition": "if (Bucketize == '5'), result = 'case(bucket == 0, strcat(0 , \" s \", \"to\", \" \" , buckets[0]*100/100000.0, \" s\"),bucket == 1, strcat(buckets[0]*100/100000.0 , \" s \", \"to\", \" \" , buckets[1]*100/100000.0, \" s\"),bucket == 2, strcat(buckets[1]*100/100000.0 , \" s \", \"to\", \" \" , buckets[2]*100/100000.0, \" s\"),bucket == 3, strcat(buckets[2]*100/100000.0 , \" s \", \"to\", \" \" , buckets[3]*100/100000.0, \" s\"),bucket == 4, strcat(buckets[3]*100/100000.0 , \" s \", \"to\", \" \" , buckets[4]*100/100000.0, \" s\"),bucket == 5, strcat(buckets[4]*100/100000.0 , \" s \", \"to\", \" \" , buckets[5]*100/100000.0, \" s\"),bucket == 6, strcat(buckets[5]*100/100000.0 , \" s \", \"to\", \" \" , buckets[6]*100/100000.0, \" s\"),bucket == 7, strcat(buckets[6]*100/100000.0 , \" s \", \"to\", \" \" , buckets[7]*100/100000.0, \" s\"),bucket == 8, strcat(buckets[7]*100/100000.0 , \" s \", \"to\", \" \" , buckets[8]*100/100000.0, \" s\"),bucket == 9, strcat(buckets[8]*100/100000.0 , \" s \", \"to\", \" \" , buckets[9]*100/100000.0, \" s\"),bucket == 10, strcat(buckets[9]*100/100000.0 , \" s \", \"to\", \" \" , buckets[10]*100/100000.0, \" s\"),bucket == 11, strcat(buckets[10]*100/100000.0 , \" s \", \"to\", \" \" , buckets[11]*100/100000.0, \" s\"),bucket == 12, strcat(buckets[11]*100/100000.0 , \" s \", \"to\", \" \" , buckets[12]*100/100000.0, \" s\"),bucket == 13, strcat(buckets[12]*100/100000.0 , \" s \", \"to\", \" \" , buckets[13]*100/100000.0, \" s\"),bucket == 14, strcat(buckets[13]*100/100000.0 , \" s \", \"to\", \" \" , buckets[14]*100/100000.0, \" s\"),bucket == 15, strcat(buckets[14]*100/100000.0 , \" s \", \"to\", \" \" , buckets[15]*100/100000.0, \" s\"),bucket == 16, strcat(buckets[15]*100/100000.0 , \" s \", \"to\", \" \" , buckets[16]*100/100000.0, \" s\"),bucket == 17, strcat(buckets[16]*100/100000.0 , \" s \", \"to\", \" \" , buckets[17]*100/100000.0, \" s\"),bucket == 18, strcat(buckets[17]*100/100000.0 , \" s \", \"to\", \" \" , buckets[18]*100/100000.0, \" s\"),bucket == 19, strcat(buckets[18]*100/100000.0 , \" s \", \"to\", \" \" , buckets[19]*100/100000.0, \" s\"), \"\")'",
                "criteriaContext": {
                  "leftOperand": "Bucketize",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "5",
                  "resultValType": "static",
                  "resultVal": "case(bucket == 0, strcat(0 , \" s \", \"to\", \" \" , buckets[0]*100/100000.0, \" s\"),bucket == 1, strcat(buckets[0]*100/100000.0 , \" s \", \"to\", \" \" , buckets[1]*100/100000.0, \" s\"),bucket == 2, strcat(buckets[1]*100/100000.0 , \" s \", \"to\", \" \" , buckets[2]*100/100000.0, \" s\"),bucket == 3, strcat(buckets[2]*100/100000.0 , \" s \", \"to\", \" \" , buckets[3]*100/100000.0, \" s\"),bucket == 4, strcat(buckets[3]*100/100000.0 , \" s \", \"to\", \" \" , buckets[4]*100/100000.0, \" s\"),bucket == 5, strcat(buckets[4]*100/100000.0 , \" s \", \"to\", \" \" , buckets[5]*100/100000.0, \" s\"),bucket == 6, strcat(buckets[5]*100/100000.0 , \" s \", \"to\", \" \" , buckets[6]*100/100000.0, \" s\"),bucket == 7, strcat(buckets[6]*100/100000.0 , \" s \", \"to\", \" \" , buckets[7]*100/100000.0, \" s\"),bucket == 8, strcat(buckets[7]*100/100000.0 , \" s \", \"to\", \" \" , buckets[8]*100/100000.0, \" s\"),bucket == 9, strcat(buckets[8]*100/100000.0 , \" s \", \"to\", \" \" , buckets[9]*100/100000.0, \" s\"),bucket == 10, strcat(buckets[9]*100/100000.0 , \" s \", \"to\", \" \" , buckets[10]*100/100000.0, \" s\"),bucket == 11, strcat(buckets[10]*100/100000.0 , \" s \", \"to\", \" \" , buckets[11]*100/100000.0, \" s\"),bucket == 12, strcat(buckets[11]*100/100000.0 , \" s \", \"to\", \" \" , buckets[12]*100/100000.0, \" s\"),bucket == 13, strcat(buckets[12]*100/100000.0 , \" s \", \"to\", \" \" , buckets[13]*100/100000.0, \" s\"),bucket == 14, strcat(buckets[13]*100/100000.0 , \" s \", \"to\", \" \" , buckets[14]*100/100000.0, \" s\"),bucket == 15, strcat(buckets[14]*100/100000.0 , \" s \", \"to\", \" \" , buckets[15]*100/100000.0, \" s\"),bucket == 16, strcat(buckets[15]*100/100000.0 , \" s \", \"to\", \" \" , buckets[16]*100/100000.0, \" s\"),bucket == 17, strcat(buckets[16]*100/100000.0 , \" s \", \"to\", \" \" , buckets[17]*100/100000.0, \" s\"),bucket == 18, strcat(buckets[17]*100/100000.0 , \" s \", \"to\", \" \" , buckets[18]*100/100000.0, \" s\"),bucket == 19, strcat(buckets[18]*100/100000.0 , \" s \", \"to\", \" \" , buckets[19]*100/100000.0, \" s\"), \"\")"
                }
              },
              {
                "condition": "else result = 'case(bucket == 0, \"\",bucket == 1, \"\",bucket == 2, \"\",bucket == 3, \"\",bucket == 4, \"\",bucket == 5, \"\",bucket == 6, \"\",bucket == 7, \"\",bucket == 8, \"\",bucket == 9, \"\",bucket == 10, \"\",bucket == 11, \"\",bucket == 12, \"\",bucket == 13, \"\",bucket == 14, \"\",bucket == 15, \"\",bucket == 16, \"\",bucket == 17, \"\",bucket == 18, \"\",bucket == 19, \"\", \"\")'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "case(bucket == 0, \"\",bucket == 1, \"\",bucket == 2, \"\",bucket == 3, \"\",bucket == 4, \"\",bucket == 5, \"\",bucket == 6, \"\",bucket == 7, \"\",bucket == 8, \"\",bucket == 9, \"\",bucket == 10, \"\",bucket == 11, \"\",bucket == 12, \"\",bucket == 13, \"\",bucket == 14, \"\",bucket == 15, \"\",bucket == 16, \"\",bucket == 17, \"\",bucket == 18, \"\",bucket == 19, \"\", \"\")"
                }
              }
            ],
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "18dbb5f3-6f1b-4b0b-8ab8-e0bb6f90e4ac",
            "version": "KqlParameterItem/1.0",
            "name": "Correlation",
            "type": 1,
            "query": "let sampleSize = 10000000;\r\nlet unSampledImpactingEvents = union customEvents, pageViews, requests\r\n| where itemType == iff('{WhoUsed:label}' contains '🟦', 'customEvent',  iff('{WhoUsed:label}' contains '🟨', 'pageView', 'request'))\r\n| where timestamp {TimeRange}\r\n| where name == '{WhoUsed}'\r\n{whoUsedFilters}\r\n| extend metric = todouble(duration)\r\n| extend metric = iff(isnull(metric), 0.0, metric)\r\n| project metric, timestamp, session_Id;\r\nlet totalImpactingEvents = toscalar(unSampledImpactingEvents | count);\r\nlet impactingSamplingRatio = iff(totalImpactingEvents == 0 or totalImpactingEvents <= sampleSize, 1.0, 1.0 * sampleSize / totalImpactingEvents);\r\nlet impactingEvents = unSampledImpactingEvents\r\n| sample sampleSize\r\n| extend session_Id = hash(session_Id);\r\nlet unSampledImpactedEvents = union customEvents, pageViews\r\n| where itemType == iff('{ImpactItem:label}' contains '🟦', 'customEvent', 'pageView')\r\n| where timestamp {TimeRange}\r\n| where name =='{ImpactItem}'\r\n{impactFilters};\r\nlet totalImpactedEvents = toscalar(unSampledImpactedEvents | count);\r\nlet impactedSamplingRatio = iff(totalImpactedEvents == 0 or totalImpactedEvents <= sampleSize, 1.0, 1.0 * sampleSize / totalImpactedEvents);\r\nlet impactedEvents = unSampledImpactedEvents\r\n| sample sampleSize\r\n| extend session_Id = hash(session_Id)\r\n| summarize itemIds = makelist(itemId), timestamps = makelist(timestamp) by session_Id;\r\nlet mappedSessions = materialize( impactingEvents\r\n| join  kind= leftouter ( impactedEvents ) on session_Id);\r\nlet mappedImpactedMetrics = mappedSessions\r\n| mvexpand impactedEventTimeStamp = timestamps, impactedEventId = itemIds\r\n| extend impactedEventTimeStamp = todatetime(impactedEventTimeStamp)  \r\n| where timestamp < impactedEventTimeStamp\r\n| extend impactedEventId = tostring(impactedEventId)\r\n| summarize average= avg(metric) by impactedEventId\r\n| extend impactedMetricHappened = true;\r\nlet umappedPerformanceMetrics = mappedSessions\r\n| extend impactedEventsLen = arraylength(timestamps) - 1\r\n| where isnull(timestamps) or timestamp >= timestamps[impactedEventsLen]\r\n| summarize average = avg(metric) by session_Id\r\n| extend impactedMetricHappened = false;\r\nlet buckets = toscalar( union mappedImpactedMetrics, umappedPerformanceMetrics\r\n{bucketQuery}\r\n| project list );\r\nlet bucketize = (metric: double) {\r\n     {bucketizeFunc}\r\n};\r\nlet getBucketLabel = (bucket: int) {\r\n    {bucketLabel}\r\n};\r\nlet getBucketTooltip = (bucket: int) {\r\n    {bucketTooltip}\r\n};\r\nlet map =  union mappedImpactedMetrics, umappedPerformanceMetrics\r\n| extend bucket = bucketize(average)\r\n| where bucket >= 0\r\n| summarize Performance = avg(average), totalActualSubsessions = countif(impactedMetricHappened), totalPotentialSubsessions = countif(impactedMetricHappened == false) by bucket\r\n| extend totalActualSubsessions = iff(isnull(totalActualSubsessions), 0.0, bin(totalActualSubsessions / impactedSamplingRatio, 1))\r\n| extend totalPotentialSubsessions = iff(isnull(totalPotentialSubsessions), 0.0, bin(totalPotentialSubsessions / impactingSamplingRatio, 1))\r\n| extend Total = totalActualSubsessions + totalPotentialSubsessions\r\n| extend ConversionRate =  iff(Total == 0, 0.0, totalActualSubsessions / (totalActualSubsessions + totalPotentialSubsessions * 1.0))\r\n| project ConversionRate, Performance, Total;\r\nlet averagePerformance = toscalar(map\r\n| summarize avg(Performance));\r\nlet sumPerformance = toscalar(map\r\n| summarize sum(Performance));\r\nlet averageConversionRate = toscalar(map\r\n| summarize avg(ConversionRate));\r\nlet num = toscalar( map\r\n| extend perfDiff = Performance  - averagePerformance\r\n| extend convDiff = ConversionRate - averageConversionRate\r\n| extend mult = perfDiff * convDiff * Total\r\n| summarize sum(mult));\r\nlet den = toscalar( map\r\n| extend perfDiff = Performance  - averagePerformance\r\n| extend perfDiffSqr = perfDiff * perfDiff * Total\r\n| extend convDiff = ConversionRate - averageConversionRate\r\n| extend convDiffSqr = convDiff * convDiff * Total\r\n| summarize sumConv = sum(convDiffSqr), sumPerf = sum(perfDiffSqr)\r\n| extend sqr = sqrt(sumConv * sumPerf ) \r\n| project sqr );\r\nrange i from 1 to 1 step 1\r\n| extend correlation = num / den\r\n| project round(correlation,2)",
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "14f405f5-dda1-4f11-b491-d1aa2f071835",
            "version": "KqlParameterItem/1.0",
            "name": "CorrelationText",
            "type": 1,
            "value": "The \"duration\" of \"\" does not impact the usage of \"Ajax query\". (Correlation= NaN).",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "condition": "if (Correlation >= '0.75'), result = ' Usage of \"{ImpactItem}\" increases as  \"{BucketItem}\" of \"{WhoUsed}\" increases (Correlation = {Correlation}).'",
                "criteriaContext": {
                  "leftOperand": "Correlation",
                  "operator": ">=",
                  "rightValType": "static",
                  "rightVal": "0.75",
                  "resultValType": "static",
                  "resultVal": " Usage of \"{ImpactItem}\" increases as  \"{BucketItem}\" of \"{WhoUsed}\" increases (Correlation = {Correlation})."
                }
              },
              {
                "condition": "if (Correlation >= '0.5'), result = 'Usage of \"{ImpactItem}\" somewhat increases as  \"{BucketItem}\" of \"{WhoUsed}\" increases (Correlation = {Correlation}).'",
                "criteriaContext": {
                  "leftOperand": "Correlation",
                  "operator": ">=",
                  "rightValType": "static",
                  "rightVal": "0.5",
                  "resultValType": "static",
                  "resultVal": "Usage of \"{ImpactItem}\" somewhat increases as  \"{BucketItem}\" of \"{WhoUsed}\" increases (Correlation = {Correlation})."
                }
              },
              {
                "condition": "if (Correlation >= '0.3'), result = 'Usage of \"{ImpactItem}\" weakly increases as  \"{BucketItem}\" of \"{WhoUsed}\" increases (Correlation = {Correlation}).'",
                "criteriaContext": {
                  "leftOperand": "Correlation",
                  "operator": ">=",
                  "rightValType": "static",
                  "rightVal": "0.3",
                  "resultValType": "static",
                  "resultVal": "Usage of \"{ImpactItem}\" weakly increases as  \"{BucketItem}\" of \"{WhoUsed}\" increases (Correlation = {Correlation})."
                }
              },
              {
                "condition": "if (Correlation > '-0.3'), result = 'The \"{BucketItem}\" of \"{WhoUsed}\" does not impact the usage of \"{ImpactItem}\". (Correlation= {Correlation}).'",
                "criteriaContext": {
                  "leftOperand": "Correlation",
                  "operator": ">",
                  "rightValType": "static",
                  "rightVal": "-0.3",
                  "resultValType": "static",
                  "resultVal": "The \"{BucketItem}\" of \"{WhoUsed}\" does not impact the usage of \"{ImpactItem}\". (Correlation= {Correlation})."
                }
              },
              {
                "condition": "if (Correlation > '-0.5'), result = 'Usage of \"{ImpactItem}\" weakly decreases as  \"{BucketItem}\" of \"{WhoUsed}\" increases (Correlation = {Correlation}).'",
                "criteriaContext": {
                  "leftOperand": "Correlation",
                  "operator": ">",
                  "rightValType": "static",
                  "rightVal": "-0.5",
                  "resultValType": "static",
                  "resultVal": "Usage of \"{ImpactItem}\" weakly decreases as  \"{BucketItem}\" of \"{WhoUsed}\" increases (Correlation = {Correlation})."
                }
              },
              {
                "condition": "if (Correlation > '-0.75'), result = 'Usage of \"{ImpactItem}\" somewhat decreases as  \"{BucketItem}\" of \"{WhoUsed}\" increases (Correlation = {Correlation}).'",
                "criteriaContext": {
                  "leftOperand": "Correlation",
                  "operator": ">",
                  "rightValType": "static",
                  "rightVal": "-0.75",
                  "resultValType": "static",
                  "resultVal": "Usage of \"{ImpactItem}\" somewhat decreases as  \"{BucketItem}\" of \"{WhoUsed}\" increases (Correlation = {Correlation})."
                }
              },
              {
                "condition": "if (Correlation >= '-1'), result = 'Usage of \"{ImpactItem}\" decreases as  \"{BucketItem}\" of \"{WhoUsed}\" increases (Correlation = {Correlation}).'",
                "criteriaContext": {
                  "leftOperand": "Correlation",
                  "operator": ">=",
                  "rightValType": "static",
                  "rightVal": "-1",
                  "resultValType": "static",
                  "resultVal": "Usage of \"{ImpactItem}\" decreases as  \"{BucketItem}\" of \"{WhoUsed}\" increases (Correlation = {Correlation})."
                }
              },
              {
                "condition": "else result = 'The \"{BucketItem}\" of \"{WhoUsed}\" does not impact the usage of \"{ImpactItem}\". (Correlation= {Correlation}).'",
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "The \"{BucketItem}\" of \"{WhoUsed}\" does not impact the usage of \"{ImpactItem}\". (Correlation= {Correlation})."
                }
              }
            ],
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          }
        ],
        "style": "above",
        "queryType": 0
      },
      "conditionalVisibility": {
        "parameterName": "BucketItem",
        "comparison": "isEqualTo",
        "value": "duration"
      },
      "name": "parameters - Duration"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"background: rgb(242, 242, 242); color: black; height: 50px; width=100%; text-align: left;padding: 10px 0;\">\r\n\t<div style=\"color: black;font-size: large;padding:0px 10px\">⚠️ {CorrelationText}<div></div>"
      },
      "conditionalVisibility": {
        "parameterName": "BucketItem",
        "comparison": "isEqualTo",
        "value": "duration"
      },
      "name": "text - 5"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let sampleSize = 10000000;\nlet unSampledImpactingEvents = union customEvents, pageViews, requests\n| where itemType == iff('{WhoUsed:label}' contains '🟦', 'customEvent',  iff('{WhoUsed:label}' contains '🟨', 'pageView', 'request'))\n| where timestamp {TimeRange}\n| where name == '{WhoUsed}'\n{whoUsedFilters}\n| extend metric = todouble(duration)\n| extend metric = iff(isnull(metric), 0.0, metric)\n| project metric, timestamp, session_Id;\nlet totalImpactingEvents = toscalar(unSampledImpactingEvents | count);\nlet impactingSamplingRatio = iff(totalImpactingEvents == 0 or totalImpactingEvents <= sampleSize, 1.0, 1.0 * sampleSize / totalImpactingEvents);\nlet impactingEvents = unSampledImpactingEvents\n| sample sampleSize\n| extend session_Id = hash(session_Id);\nlet unSampledImpactedEvents = union customEvents, pageViews\n| where itemType == iff('{ImpactItem:label}' contains '🟦', 'customEvent', 'pageView')\n| where timestamp {TimeRange}\n| where name =='{ImpactItem}'\n{impactFilters};\nlet totalImpactedEvents = toscalar(unSampledImpactedEvents | count);\nlet impactedSamplingRatio = iff(totalImpactedEvents == 0 or totalImpactedEvents <= sampleSize, 1.0, 1.0 * sampleSize / totalImpactedEvents);\nlet impactedEvents = unSampledImpactedEvents\n| sample sampleSize\n| extend session_Id = hash(session_Id)\n| summarize itemIds = makelist(itemId), timestamps = makelist(timestamp) by session_Id;\nlet mappedSessions = materialize( impactingEvents\n| join  kind= leftouter ( impactedEvents ) on session_Id);\nlet mappedImpactedMetrics = mappedSessions\n| mvexpand impactedEventTimeStamp = timestamps, impactedEventId = itemIds\n| extend impactedEventTimeStamp = todatetime(impactedEventTimeStamp)  \n| where timestamp < impactedEventTimeStamp\n| extend impactedEventId = tostring(impactedEventId)\n| summarize average= avg(metric) by impactedEventId\n| extend impactedMetricHappened = true;\nlet umappedPerformanceMetrics = mappedSessions\n| extend impactedEventsLen = arraylength(timestamps) - 1\n| where isnull(timestamps) or timestamp >= timestamps[impactedEventsLen]\n| summarize average = avg(metric) by session_Id\n| extend impactedMetricHappened = false;\n\nlet buckets = toscalar( union mappedImpactedMetrics, umappedPerformanceMetrics\n{bucketQuery}\n| project list );\nlet bucketize = (metric: double) {\n    {bucketizeFunc}\n};\nlet getBucketLabel = (bucket: int) {\n    {bucketLabel}\n};\nlet getBucketTooltip = (bucket: int) {\n    {bucketTooltip}\n};\nlet bucketResults =  union mappedImpactedMetrics, umappedPerformanceMetrics\n| extend bucket = bucketize(average)\n| where bucket >= 0\n| summarize totalActualSubsessions = countif(impactedMetricHappened), totalPotentialSubsessions = countif(impactedMetricHappened == false), average = avg(average), avgList = makelist(average,1000) by bucket\n| extend conversion =  iff(totalActualSubsessions + totalPotentialSubsessions == 0, 0.0, totalActualSubsessions / (totalActualSubsessions + totalPotentialSubsessions * 1.0))\n| extend medianIndex = arraylength(avgList) /2\n| extend median = todouble(avgList[medianIndex]);\nlet overallResults =  union mappedImpactedMetrics, umappedPerformanceMetrics\n| summarize totalActualSubsessions = countif(impactedMetricHappened), totalPotentialSubsessions = countif(impactedMetricHappened == false), average = avg(average)\n| extend conversion =  iff(totalActualSubsessions + totalPotentialSubsessions == 0, 0.0, totalActualSubsessions / (totalActualSubsessions + totalPotentialSubsessions * 1.0))\n| extend bucket = 10000\n| extend median = todouble(average);\nlet scatterTable = union overallResults, bucketResults\n| order by bucket asc\n| extend totalActualSubsessions = iff(isnull(totalActualSubsessions), 0.0, bin(totalActualSubsessions / impactedSamplingRatio, 1))\n| extend totalPotentialSubsessions = iff(isnull(totalPotentialSubsessions), 0.0, bin(totalPotentialSubsessions / impactingSamplingRatio, 1))\n| extend conversion = iff(isnull(conversion), 0.0, conversion)\n| extend label = getBucketLabel(bucket)\n| extend tooltip = getBucketTooltip(bucket)\n| extend total = totalActualSubsessions + totalPotentialSubsessions\n| project total, conversion, median, xy = tolong(median) * conversion * total, xx = tolong(median) * median * total;\nlet baseline = scatterTable\n| project total, conversion = (todouble(conversion) * total), median = (tolong(median) * total), xy = tolong(median) * conversion * total, xx = tolong(median) * median * total\n| summarize x = sum(median), y = sum(conversion), xy = sum(xy), xx=sum(xx), n = sum(total);\nlet slope = toscalar(baseline | project lineSlope = (n * xy - x* y) / (n * xx - x * x));\nlet intercept = toscalar(baseline | project (y - slope * x) / n);\nlet calcBaseline=(a:long) {\n    slope * a + intercept\n};\nscatterTable\n| project median, conversion , baseline = calcBaseline(tolong(median))\n",
        "size": 0,
        "aggregation": 3,
        "title": "Rate of conversion of \"{ImpactItem}\" by \"{BucketItem}\" of \"{WhoUsed}\"",
        "queryType": 0,
        "visualization": "scatterchart",
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "baseline",
              "label": "baseline",
              "color": "gray",
              "comment": ""
            },
            {
              "seriesName": "conversion",
              "label": "conversion"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "BucketItem",
        "comparison": "isEqualTo",
        "value": "duration"
      },
      "name": "query - 2"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "loadType": "explicit",
        "loadButtonText": "Show data",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let sampleSize = 10000000;\r\nlet unSampledImpactingEvents = union customEvents, pageViews, requests\r\n| where itemType == iff('{WhoUsed:label}' contains '🟦', 'customEvent',  iff('{WhoUsed:label}' contains '🟨', 'pageView', 'request'))\r\n| where timestamp {TimeRange}\r\n| where name == '{WhoUsed}'\r\n{whoUsedFilters}\r\n| extend metric = todouble(duration)\r\n| extend metric = iff(isnull(metric), 0.0, metric)\r\n| project metric, timestamp, session_Id;\r\nlet totalImpactingEvents = toscalar(unSampledImpactingEvents | count);\r\nlet impactingSamplingRatio = iff(totalImpactingEvents == 0 or totalImpactingEvents <= sampleSize, 1.0, 1.0 * sampleSize / totalImpactingEvents);\r\nlet impactingEvents = unSampledImpactingEvents\r\n| sample sampleSize\r\n| extend session_Id = hash(session_Id);\r\nlet unSampledImpactedEvents = union customEvents, pageViews\r\n| where itemType == iff('{ImpactItem:label}' contains '🟦', 'customEvent', 'pageView')\r\n| where timestamp {TimeRange}\r\n| where name =='{ImpactItem}'\r\n{impactFilters};\r\nlet totalImpactedEvents = toscalar(unSampledImpactedEvents | count);\r\nlet impactedSamplingRatio = iff(totalImpactedEvents == 0 or totalImpactedEvents <= sampleSize, 1.0, 1.0 * sampleSize / totalImpactedEvents);\r\nlet impactedEvents = unSampledImpactedEvents\r\n| sample sampleSize\r\n| extend session_Id = hash(session_Id)\r\n| summarize itemIds = makelist(itemId), timestamps = makelist(timestamp) by session_Id;\r\nlet mappedSessions = materialize( impactingEvents\r\n| join  kind= leftouter ( impactedEvents ) on session_Id);\r\nlet mappedImpactedMetrics = mappedSessions\r\n| mvexpand impactedEventTimeStamp = timestamps, impactedEventId = itemIds\r\n| extend impactedEventTimeStamp = todatetime(impactedEventTimeStamp)  \r\n| where timestamp < impactedEventTimeStamp\r\n| extend impactedEventId = tostring(impactedEventId)\r\n| summarize average= avg(metric) by impactedEventId\r\n| extend impactedMetricHappened = true;\r\nlet umappedPerformanceMetrics = mappedSessions\r\n| extend impactedEventsLen = arraylength(timestamps) - 1\r\n| where isnull(timestamps) or timestamp >= timestamps[impactedEventsLen]\r\n| summarize average = avg(metric) by session_Id\r\n| extend impactedMetricHappened = false;\r\n\r\nlet buckets = toscalar( union mappedImpactedMetrics, umappedPerformanceMetrics\r\n{bucketQuery}\r\n| project list );\r\nlet bucketize = (metric: double) {\r\n    {bucketizeFunc}\r\n};\r\nlet getBucketLabel = (bucket: int) {\r\n    {bucketLabel}\r\n};\r\nlet getBucketTooltip = (bucket: int) {\r\n    {bucketTooltip}\r\n};\r\nlet bucketResults =  union mappedImpactedMetrics, umappedPerformanceMetrics\r\n| extend bucket = bucketize(average)\r\n| where bucket >= 0\r\n| summarize totalActualSubsessions = countif(impactedMetricHappened), totalPotentialSubsessions = countif(impactedMetricHappened == false), average = avg(average), avgList = makelist(average,1000) by bucket\r\n| extend conversion =  iff(totalActualSubsessions + totalPotentialSubsessions == 0, 0.0, totalActualSubsessions / (totalActualSubsessions + totalPotentialSubsessions * 1.0))\r\n| extend medianIndex = arraylength(avgList) /2\r\n| extend median = todouble(avgList[medianIndex]);\r\nlet overallResults =  union mappedImpactedMetrics, umappedPerformanceMetrics\r\n| summarize totalActualSubsessions = countif(impactedMetricHappened), totalPotentialSubsessions = countif(impactedMetricHappened == false), average = avg(average)\r\n| extend conversion =  iff(totalActualSubsessions + totalPotentialSubsessions == 0, 0.0, totalActualSubsessions / (totalActualSubsessions + totalPotentialSubsessions * 1.0))\r\n| extend bucket = 10000\r\n| extend median = todouble(average);\r\nlet formatter = (num: long) { \r\n    case( num < 1e3, tostring(num), \r\n          num < 1e6, strcat(tostring(round(num / 1e3, 2)), \"K\"),\r\n          num < 1e9, strcat(tostring(round(num / 1e6, 2)), \"M\"),\r\n          num < 1e12, strcat(tostring(round(num / 1e9, 2)), \"G\"),\r\n          num < 1e15, strcat(tostring(round(num / 1e12, 2)), \"T\"),\r\n          strcat(tostring(round(num / 1e15, 2)), \"P\"))};\r\nunion overallResults, bucketResults\r\n| order by bucket asc\r\n| extend totalActualSubsessions = iff(isnull(totalActualSubsessions), 0.0, bin(totalActualSubsessions / impactedSamplingRatio, 1))\r\n| extend totalPotentialSubsessions = iff(isnull(totalPotentialSubsessions), 0.0, bin(totalPotentialSubsessions / impactingSamplingRatio, 1))\r\n| extend conversion = iff(isnull(conversion), 0.0, conversion)\r\n| extend label = getBucketLabel(bucket)\r\n| extend tooltip = getBucketTooltip(bucket)\r\n| extend total = totalActualSubsessions + totalPotentialSubsessions\r\n| project Bucket = iff(isempty(label), \"Overall\" , label), ['\"{ImpactItem}\" Usage'] = strcat( formatter(total), \" events with \", formatter(totalActualSubsessions), \" converted and \", formatter(totalPotentialSubsessions), \" lost\"), ['Conversion Rate']= 100* conversion",
              "size": 0,
              "title": "\"{ImpactItem}\" usage bucketized by \"{BucketItem}\" of \"{WhoUsed}\"",
              "timeContext": {
                "durationMs": 0
              },
              "timeContextFromParameter": "TimeRange",
              "queryType": 0,
              "resourceType": "microsoft.insights/components",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Usage converted",
                    "formatter": 0,
                    "formatOptions": {},
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false
                      }
                    }
                  },
                  {
                    "columnMatch": "Usage lost",
                    "formatter": 0,
                    "formatOptions": {},
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "Total Events",
                    "formatter": 0,
                    "formatOptions": {},
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false
                      }
                    }
                  },
                  {
                    "columnMatch": "Conversion Rate",
                    "formatter": 4,
                    "formatOptions": {
                      "palette": "purple"
                    },
                    "numberFormat": {
                      "unit": 1,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false,
                        "maximumFractionDigits": 1
                      }
                    }
                  }
                ]
              },
              "sortBy": []
            },
            "conditionalVisibility": {
              "parameterName": "BucketItem",
              "comparison": "isEqualTo",
              "value": "duration"
            },
            "name": "query - 4"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let sampleSize = 10000000;\r\nlet successColum = strcat(\"\\\"\", strcat('\\'{ImpactItem}\\'',' Usage converted'),\"\\\"\");\r\nlet unSampledImpactingEvents = union customEvents, pageViews, requests\r\n| where itemType == iff('{WhoUsed:label}' contains '🟦', 'customEvent',  iff('{WhoUsed:label}' contains '🟨', 'pageView', 'request'))\r\n| where timestamp {TimeRange}\r\n| where name == '{WhoUsed}'\r\n{whoUsedFilters}\r\n| project bucket = {BucketItem}, timestamp, session_Id;\r\nlet totalImpactingEvents = toscalar(unSampledImpactingEvents | count);\r\nlet impactingSamplingRatio = iff(totalImpactingEvents == 0 or totalImpactingEvents <= sampleSize, 1.0, 1.0 * sampleSize / totalImpactingEvents);\r\nlet impactingEvents = unSampledImpactingEvents\r\n| sample sampleSize\r\n| extend session_Id = hash(session_Id);\r\nlet unSampledImpactedEvents = union customEvents, pageViews\r\n| where itemType == iff('{ImpactItem:label}' contains '🟦', 'customEvent', 'pageView')\r\n| where timestamp {TimeRange}\r\n| where name =='{ImpactItem}'\r\n{impactFilters};\r\nlet totalImpactedEvents = toscalar(unSampledImpactedEvents | count);\r\nlet impactedSamplingRatio = iff(totalImpactedEvents == 0 or totalImpactedEvents <= sampleSize, 1.0, 1.0 * sampleSize / totalImpactedEvents);\r\nlet impactedEvents = unSampledImpactedEvents\r\n| sample sampleSize\r\n| extend session_Id = hash(session_Id)\r\n| summarize itemIds = makelist(itemId), timestamps = makelist(timestamp)  by session_Id;\r\nlet mappedSessions = materialize( impactingEvents\r\n| join  kind= leftouter ( impactedEvents ) on session_Id);\r\nlet mappedImpactedMetrics = mappedSessions\r\n| mvexpand impactedEventTimeStamp = timestamps, impactedEventId = itemIds\r\n| extend impactedEventTimeStamp = todatetime(impactedEventTimeStamp)  \r\n| where timestamp < impactedEventTimeStamp\r\n| extend impactedEventId = tostring(impactedEventId)\r\n| summarize buckets = makelist(bucket), total = count() by impactedEventId\r\n| mvexpand buckets\r\n| extend bucket = tostring(buckets)\r\n| summarize bucketCount = count(), total=any(total) by impactedEventId, bucket\r\n| extend value = bucketCount * 1.0 / total\r\n| extend impactedMetricHappened = true;\r\nlet umappedPerformanceMetrics = mappedSessions\r\n| extend impactedEventsLen = arraylength(timestamps) - 1\r\n| where isnull(timestamps) or timestamp >= timestamps[impactedEventsLen]\r\n| summarize buckets = makelist(bucket), total = count() by session_Id\r\n| mvexpand buckets\r\n| extend bucket = tostring(buckets)\r\n| summarize bucketCount = count(), total=any(total) by session_Id, bucket\r\n| extend value = bucketCount * 1.0 / total\r\n| extend impactedMetricHappened = false;\r\nlet bucketResults =  union mappedImpactedMetrics, umappedPerformanceMetrics\r\n| summarize totalActualSubsessions = sumif(value, impactedMetricHappened), totalPotentialSubsessions = sumif(value, impactedMetricHappened == false) by bucket\r\n| extend conversion =  iff(totalActualSubsessions + totalPotentialSubsessions == 0.0, 0.0, totalActualSubsessions / (totalActualSubsessions + totalPotentialSubsessions * 1.0))\r\n| extend bucket = iif(isempty(bucket), \"<undefined>\", bucket), position = 0;\r\nlet overallResults =  union mappedImpactedMetrics, umappedPerformanceMetrics\r\n| summarize totalActualSubsessions = sumif(value, impactedMetricHappened), totalPotentialSubsessions = sumif(value, impactedMetricHappened == false)\r\n| extend conversion =  iff(totalActualSubsessions + totalPotentialSubsessions == 0.0, 0.0, totalActualSubsessions / (totalActualSubsessions + totalPotentialSubsessions * 1.0))\r\n| extend bucket = \"Overall\", position = 1;\r\nlet formatter = (num: long) { \r\n    case( num < 1e3, tostring(num), \r\n          num < 1e6, strcat(tostring(round(num / 1e3, 2)), \"K\"),\r\n          num < 1e9, strcat(tostring(round(num / 1e6, 2)), \"M\"),\r\n          num < 1e12, strcat(tostring(round(num / 1e9, 2)), \"G\"),\r\n          num < 1e15, strcat(tostring(round(num / 1e12, 2)), \"T\"),\r\n          strcat(tostring(round(num / 1e15, 2)), \"P\"))};\r\nunion overallResults, bucketResults\r\n| extend totalActualSubsessions = iff(isnull(totalActualSubsessions), 0.0, bin(totalActualSubsessions / impactedSamplingRatio, 1))\r\n| extend totalPotentialSubsessions = iff(isnull(totalPotentialSubsessions), 0.0, bin(totalPotentialSubsessions / impactingSamplingRatio, 1))\r\n| extend conversion = iff(isnull(conversion), 0.0, conversion)\r\n| extend total = totalActualSubsessions + totalPotentialSubsessions\r\n| order by position asc, bucket asc\r\n| project Bucket = iff(isempty(bucket), \"Overall\" , bucket), ['\"{ImpactItem}\" Usage'] = strcat( formatter(total), \" events with \", formatter(totalActualSubsessions), \" converted and \", formatter(totalPotentialSubsessions), \" lost\"), ['Conversion Rate']= 100* conversion\r\n",
              "size": 0,
              "title": "\"{ImpactItem}\" usage bucketized by \"{BucketItem}\" of \"{WhoUsed}\"",
              "timeContext": {
                "durationMs": 0
              },
              "timeContextFromParameter": "TimeRange",
              "queryType": 0,
              "resourceType": "microsoft.insights/components",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Usage converted",
                    "formatter": 0,
                    "formatOptions": {},
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false,
                        "maximumFractionDigits": 1
                      }
                    }
                  },
                  {
                    "columnMatch": "Usage lost",
                    "formatter": 0,
                    "formatOptions": {},
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false,
                        "maximumFractionDigits": 1
                      }
                    }
                  },
                  {
                    "columnMatch": "Total Events",
                    "formatter": 0,
                    "formatOptions": {},
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 1
                      }
                    }
                  },
                  {
                    "columnMatch": "Conversion Rate",
                    "formatter": 4,
                    "formatOptions": {
                      "palette": "purple"
                    },
                    "numberFormat": {
                      "unit": 1,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false,
                        "maximumFractionDigits": 1
                      }
                    }
                  }
                ]
              },
              "sortBy": []
            },
            "conditionalVisibility": {
              "parameterName": "BucketItem",
              "comparison": "isNotEqualTo",
              "value": "duration"
            },
            "name": "query - 6"
          }
        ]
      },
      "name": "group - showData"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}