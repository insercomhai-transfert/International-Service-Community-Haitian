{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<p> <span style=\"font-size:12px; font-style:italic\"> Click on any category below to discover optimization opportunities pertaining to that category. <a href=\"https://aka.ms/AzureBackupReportOptimizeTab\" target=\"_blank\">Learn More</a> </span> </p>"
            },
            "conditionalVisibility": {
              "parameterName": "TabName",
              "comparison": "isEqualTo",
              "value": "Optimize"
            },
            "name": "Optimize-GeneralInstructionText"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "datatable(TileName:string, Message:string)[\r\n\"Inactive Resources\",\"Click to view\",\r\n\"Policy Optimizations\",\"Click to view\"\r\n]",
              "size": 3,
              "color": "blue",
              "timeContext": {
                "durationMs": 86400000
              },
              "exportFieldName": "TileName",
              "exportParameterName": "OptimizeDimension",
              "exportDefaultValue": "",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{Workspaces}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "TileName",
                  "formatter": 3,
                  "formatOptions": {
                    "palette": "blue"
                  }
                },
                "subtitleContent": {
                  "columnMatch": "Message",
                  "formatter": 1,
                  "formatOptions": {
                    "compositeBarSettings": {
                      "labelText": "",
                      "columnSettings": []
                    }
                  }
                },
                "showBorder": true,
                "size": "auto"
              }
            },
            "conditionalVisibility": {
              "parameterName": "TabName",
              "comparison": "isEqualTo",
              "value": "Optimize"
            },
            "name": "Optimize-DimensionTiles",
            "styleSettings": {
              "margin": "-20px 0% 0% 0%"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "datatable(TileName:string, Message:string)[\r\n\"Retention Optimizations\",\"Click to view\",\r\n\"Backup Schedule Optimizations\",\"Click to view\"\r\n]",
              "size": 3,
              "exportFieldName": "TileName",
              "exportParameterName": "OptimizeSubDimension",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{Workspaces}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "TileName",
                  "formatter": 3,
                  "formatOptions": {
                    "palette": "blue"
                  }
                },
                "subtitleContent": {
                  "columnMatch": "Message",
                  "formatter": 1
                },
                "showBorder": true,
                "size": "auto"
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Policy Optimizations"
              }
            ],
            "name": "Optimize-DimensionSubTiles"
          },
          {
            "type": 1,
            "content": {
              "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">Databases configured for daily full backup </span> </div>"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Policy Optimizations"
              },
              {
                "parameterName": "OptimizeSubDimension",
                "comparison": "isEqualTo",
                "value": "Backup Schedule Optimizations"
              }
            ],
            "name": "Optimize-PolicyOptimizationsGrid2Title"
          },
          {
            "type": 1,
            "content": {
              "json": "<p> <span style=\"font-size:12px; font-style:italic\"> Using daily differential backups with weekly full backups is often more cost-effective than using daily full backups. <a href=\"https://aka.ms/AzureBackupReportDailyFullBackupView\" target=\"_blank\">Learn More</a> </span> </p>"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Policy Optimizations"
              },
              {
                "parameterName": "OptimizeSubDimension",
                "comparison": "isEqualTo",
                "value": "Backup Schedule Optimizations"
              }
            ],
            "name": "Optimize-PolicyOptimizationsGrid2InstructionText"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{Workspaces}"
              ],
              "parameters": [
                {
                  "id": "77aa6aec-8198-4e29-8196-e56c3fe81292",
                  "version": "KqlParameterItem/1.0",
                  "name": "ContainerNameWithBackupItemNameInOptimize2",
                  "label": "Search Item or Container",
                  "type": 1,
                  "description": "Use to search for a Backup Item by name. <br/> To search for a specific item in a container, use the syntax [container name];[item name] <br/> To search for all items in a container, use the syntax [container name];",
                  "value": "",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "46f7de5c-dc7f-48ed-bfd0-d5a868aef402",
                  "version": "KqlParameterItem/1.0",
                  "name": "OptimizeMetricRowsPerGrid_2",
                  "label": "Rows Per Page",
                  "type": 2,
                  "description": "Number of rows to display in grid view",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": []
                  },
                  "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "792ec3e5-00b6-4669-9db2-de3e6617b7b7",
                  "version": "KqlParameterItem/1.0",
                  "name": "OptimizeMetricPageNumber_2",
                  "label": "Page",
                  "type": 2,
                  "description": "Select Page Number",
                  "isRequired": true,
                  "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\nlet AzureStorageCutoffDate = datetime({AzureStorageCutOffDate});\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n      \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Client\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\",\r\n\t  \"AzureBackupServer/SQLDB\", \"Azure Backup Server/SQL Database\",\r\n\t  \"AzureBackupServer/VMwareVM\", \"Azure Backup Server/VMWare VM\",\r\n\t  \"AzureBackupServer/HyperVVM\", \"Azure Backup Server/Hyper-V VM\",\r\n\t  \"AzureBackupServer/FileFolder\", \"Azure Backup Server/Files and Folder\",\r\n\t  \"AzureBackupServer/Client\", \"Azure Backup Server/Client\",\r\n\t  \"AzureBackupServer/SystemState\", \"Azure Backup Server/System State\",\r\n\t  \"AzureBackupServer/Sharepoint\", \"Azure Backup Server/Sharepoint Database\",\r\n\t  \"AzureBackupServer/Exchange\", \"Azure Backup Server/Exchange Mailbox Database\"];\r\n// Params\r\nlet BackupManagementTypeParam =  split(replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"),\",\");\r\nlet BackupItemTypeParam = split(replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"),\",\");\r\nlet ExcludableAzureWorkloadBackupItemValues = set_difference(dynamic([\"SQLDataBase\",\"SAPHanaDatabase\",\"SAPAseDatabase\"]), BackupItemTypeParam);\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet Item_search =  @\"{ContainerNameWithBackupItemNameInOptimize2}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), BackupFrequency = columnifexists(\"BackupFrequency_s\", \"\"),\r\nDailyRetentionDuration = columnifexists(\"DailyRetentionDuration_s\", \"\"), WeeklyRetentionDuration = columnifexists(\"WeeklyRetentionDuration_s\", \"\"), MonthlyRetentionDuration = columnifexists(\"MonthlyRetentionDuration_s\", \"\"), YearlyRetentionDuration = columnifexists(\"YearlyRetentionDuration_s\", \"\"), LogBackupRetentionDuration = columnifexists(\"LogBackupRetentionDuration_s\", \"\"), LogBackupFrequency = columnifexists(\"LogBackupFrequency_s\", \"\"),  DiffBackupFormat = columnifexists(\"DiffBackupFormat_s\", \"\"), DiffBackupRetentionDuration = columnifexists(\"DiffBackupRetentionDuration_s\", \"\"), ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, BackupFrequency, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, LogBackupRetentionDuration, LogBackupFrequency, DiffBackupFormat, DiffBackupRetentionDuration, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   PolicyTable \r\n) on ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join  (\r\n   PolicyTable \r\n) on ResourceId;\r\n};\r\nlet RecoveryPointTableUnderAzureDiagnostics = ()\r\n{\r\n let RecoveryPointTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where OperationName == \"RecoveryPoint\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project LatestRecoveryPointLocation = columnifexists(\"LatestRecoveryPointLocation_s\", \"\"), OldestRecoveryPointLocation = columnifexists(\"OldestRecoveryPointLocation_s\", \"\"), LatestRecoveryPointTime = todatetime(columnifexists(\"LatestRecoveryPointTime_s\", \"\")), OldestRecoveryPointTime = todatetime(columnifexists(\"OldestRecoveryPointLocation_s\", \"\")),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId\r\n// Interested in only Vault/Cloud RPs\r\n| where LatestRecoveryPointLocation has \"Cloud\" \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   RecoveryPointTable \r\n) on ResourceId;\r\n};\r\nlet RecoveryPointTableUnderResourceSpecific = ()\r\n{\r\n let RecoveryPointTable = CoreAzureBackup \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"RecoveryPoint\" and  State != \"Deleted\"\r\n| project LatestRecoveryPointLocation, OldestRecoveryPointLocation, LatestRecoveryPointTime, OldestRecoveryPointTime,\r\nBackupItemUniqueId, TimeGenerated, ResourceId\r\n// Interested in only Vault/Cloud RPs\r\n| where LatestRecoveryPointLocation has \"Cloud\" \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   RecoveryPointTable \r\n) on ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestAzureWorkloadBackupItemDimensionTable = () {union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n//Filter only AzureWorkload after Report filter\r\n| where BackupManagementType has \"AzureWorkload\"\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n// Exclude Non-selected AzureWorkload BackupItem Values (due to '*' - all AzureWorkload Values get filtered, hence explicit check)\r\n| where BackupItemType !in (ExcludableAzureWorkloadBackupItemValues)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndRecoveryPointUnderAzureDiagnostics = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, BackupFrequency, ResourceId) on PolicyUniqueId, ResourceId\r\n| join kind= leftouter (\r\n   RecoveryPointTableUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project LatestRecoveryPointTime, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, LatestRecoveryPointTime,\r\n  BackupManagementServerUniqueId, PolicyName, BackupFrequency, ResourceId, StorageReplicationType\r\n};\r\nlet BackupItemAssociationAndRecoveryPointUnderResourceSpecific = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, BackupFrequency, ResourceId ) on PolicyUniqueId, ResourceId\r\n| join kind= leftouter (\r\n   RecoveryPointTableUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project LatestRecoveryPointTime, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, LatestRecoveryPointTime,\r\n  BackupManagementServerUniqueId, PolicyName, BackupFrequency, ResourceId, StorageReplicationType\r\n};\r\nlet LatestBackupItemAssociationAndRecoveryPointTableWithDailyFullBackup = ()\r\n{\r\nLatestAzureWorkloadBackupItemDimensionTable | join \r\n(union isfuzzy = true  \r\n(BackupItemAssociationAndRecoveryPointUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndRecoveryPointUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n)on BackupItemUniqueId\r\n| where BackupFrequency == \"Daily\"\r\n| project ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId,  BackupManagementType, BackupItemType, PolicyUniqueId, LatestRecoveryPointTime, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, PolicyUniqueId, LatestRecoveryPointTime, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n};\r\nlet OutputTable = (){LatestBackupItemAssociationAndRecoveryPointTableWithDailyFullBackup\r\n| project CustomBackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState))),\r\n  BackupManagementType, BackupItemType, LatestRecoveryPointTime, ResourceId, PolicyName, ProtectedContainerName, BackupItemName, BackupItemFriendlyName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemUniqueId\r\n};\r\nOutputTable\r\n| summarize c=count()\r\n| project num = (c-1)/{OptimizeMetricRowsPerGrid_2} + 1\r\n| project nums = range(1,num,1), num\r\n| mvexpand nums\r\n| project nums = tostring(nums), num = strcat(tostring(nums),\" of \",tostring(num))",
                  "crossComponentResources": [
                    "{Workspaces}"
                  ],
				  "value": "1",
                  "typeSettings": {
                    "additionalResourceOptions": []
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "above",
              "doNotRunWhenHidden": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Policy Optimizations"
              },
              {
                "parameterName": "OptimizeSubDimension",
                "comparison": "isEqualTo",
                "value": "Backup Schedule Optimizations"
              }
            ],
            "name": "Optimize-PolicyOptimizationsGrid2Parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\nlet AzureStorageCutoffDate = datetime({AzureStorageCutOffDate});\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n      \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Client\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\",\r\n\t  \"AzureBackupServer/SQLDB\", \"Azure Backup Server/SQL Database\",\r\n\t  \"AzureBackupServer/VMwareVM\", \"Azure Backup Server/VMWare VM\",\r\n\t  \"AzureBackupServer/HyperVVM\", \"Azure Backup Server/Hyper-V VM\",\r\n\t  \"AzureBackupServer/FileFolder\", \"Azure Backup Server/Files and Folder\",\r\n\t  \"AzureBackupServer/Client\", \"Azure Backup Server/Client\",\r\n\t  \"AzureBackupServer/SystemState\", \"Azure Backup Server/System State\",\r\n\t  \"AzureBackupServer/Sharepoint\", \"Azure Backup Server/Sharepoint Database\",\r\n\t  \"AzureBackupServer/Exchange\", \"Azure Backup Server/Exchange Mailbox Database\"];\r\n// Params\r\nlet BackupManagementTypeParam =  split(replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"),\",\");\r\nlet BackupItemTypeParam = split(replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"),\",\");\r\nlet ExcludableAzureWorkloadBackupItemValues = set_difference(dynamic([\"SQLDataBase\",\"SAPHanaDatabase\",\"SAPAseDatabase\"]), BackupItemTypeParam);\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet Item_search =  @\"{ContainerNameWithBackupItemNameInOptimize2}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), BackupFrequency = columnifexists(\"BackupFrequency_s\", \"\"),\r\nDailyRetentionDuration = columnifexists(\"DailyRetentionDuration_s\", \"\"), WeeklyRetentionDuration = columnifexists(\"WeeklyRetentionDuration_s\", \"\"), MonthlyRetentionDuration = columnifexists(\"MonthlyRetentionDuration_s\", \"\"), YearlyRetentionDuration = columnifexists(\"YearlyRetentionDuration_s\", \"\"), LogBackupRetentionDuration = columnifexists(\"LogBackupRetentionDuration_s\", \"\"), LogBackupFrequency = columnifexists(\"LogBackupFrequency_s\", \"\"),  DiffBackupFormat = columnifexists(\"DiffBackupFormat_s\", \"\"), DiffBackupRetentionDuration = columnifexists(\"DiffBackupRetentionDuration_s\", \"\"), ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, BackupFrequency, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, LogBackupRetentionDuration, LogBackupFrequency, DiffBackupFormat, DiffBackupRetentionDuration, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   PolicyTable \r\n) on ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join  (\r\n   PolicyTable \r\n) on ResourceId;\r\n};\r\nlet RecoveryPointTableUnderAzureDiagnostics = ()\r\n{\r\n let RecoveryPointTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where OperationName == \"RecoveryPoint\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project LatestRecoveryPointLocation = columnifexists(\"LatestRecoveryPointLocation_s\", \"\"), OldestRecoveryPointLocation = columnifexists(\"OldestRecoveryPointLocation_s\", \"\"), LatestRecoveryPointTime = todatetime(columnifexists(\"LatestRecoveryPointTime_s\", \"\")), OldestRecoveryPointTime = todatetime(columnifexists(\"OldestRecoveryPointLocation_s\", \"\")),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId\r\n// Interested in only Vault/Cloud RPs\r\n| where LatestRecoveryPointLocation has \"Cloud\" \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   RecoveryPointTable \r\n) on ResourceId;\r\n};\r\nlet RecoveryPointTableUnderResourceSpecific = ()\r\n{\r\n let RecoveryPointTable = CoreAzureBackup \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"RecoveryPoint\" and  State != \"Deleted\"\r\n| project LatestRecoveryPointLocation, OldestRecoveryPointLocation, LatestRecoveryPointTime, OldestRecoveryPointTime,\r\nBackupItemUniqueId, TimeGenerated, ResourceId\r\n// Interested in only Vault/Cloud RPs\r\n| where LatestRecoveryPointLocation has \"Cloud\" \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   RecoveryPointTable \r\n) on ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestAzureWorkloadBackupItemDimensionTable = () {union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n//Filter only AzureWorkload after Report filter\r\n| where BackupManagementType has \"AzureWorkload\"\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n// Exclude Non-selected AzureWorkload BackupItem Values (due to '*' - all AzureWorkload Values get filtered, hence explicit check)\r\n| where BackupItemType !in (ExcludableAzureWorkloadBackupItemValues)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndRecoveryPointUnderAzureDiagnostics = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, BackupFrequency, ResourceId) on PolicyUniqueId, ResourceId\r\n| join kind= leftouter (\r\n   RecoveryPointTableUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project LatestRecoveryPointTime, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, LatestRecoveryPointTime,\r\n  BackupManagementServerUniqueId, PolicyName, BackupFrequency, ResourceId, StorageReplicationType\r\n};\r\nlet BackupItemAssociationAndRecoveryPointUnderResourceSpecific = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, BackupFrequency, ResourceId ) on PolicyUniqueId, ResourceId\r\n| join kind= leftouter (\r\n   RecoveryPointTableUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project LatestRecoveryPointTime, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, LatestRecoveryPointTime,\r\n  BackupManagementServerUniqueId, PolicyName, BackupFrequency, ResourceId, StorageReplicationType\r\n};\r\nlet LatestBackupItemAssociationAndRecoveryPointTableWithDailyFullBackup = ()\r\n{\r\nLatestAzureWorkloadBackupItemDimensionTable | join \r\n(union isfuzzy = true  \r\n(BackupItemAssociationAndRecoveryPointUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndRecoveryPointUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n)on BackupItemUniqueId\r\n| where BackupFrequency == \"Daily\"\r\n| project ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId,  BackupManagementType, BackupItemType, PolicyUniqueId, LatestRecoveryPointTime, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, PolicyUniqueId, LatestRecoveryPointTime, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n};\r\nlet OutputTable = (){LatestBackupItemAssociationAndRecoveryPointTableWithDailyFullBackup\r\n| project CustomBackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState))),\r\n  BackupManagementType, BackupItemType, LatestRecoveryPointTime, ResourceId, PolicyName, ProtectedContainerName, BackupItemName, BackupItemFriendlyName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemName, BackupItemFriendlyName, PolicyName = iff(CustomBackupItemProtectionState == \"ProtectionStopped\", \"(none)\", PolicyName), BackupManagementType, BackupItemType, LatestRecoveryPointTime,  ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType\r\n| extend PolicyLink = strcat(ResourceId, \"/backupPolicies/\", PolicyName)\r\n| project BackupItemName, BackupItemFriendlyName, PolicyName, BackupManagementType, BackupItemType, LatestRecoveryPointTime,  ResourceId, PolicyLink, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType  \r\n| sort by BackupItemUniqueId asc \r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/{OptimizeMetricRowsPerGrid_2} + 1))\r\n| where page_num has ('{OptimizeMetricPageNumber_2}') or '*' in ('{OptimizeMetricPageNumber_2}')\r\n| extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\r\n| extend containerNameString = iff(array_length(split(ProtectedContainerName,\";\")) == 3, ProtectedContainerName, \"\")\r\n| parse containerNameString with entityType:string \";\" rgName:string \";\" entityName:string\r\n| extend entityTypeForAzureStorageUrl = iff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), \"\")\r\n| extend entityTypeForIaaSVMUrl = iff((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend entityTypeForAzureWorkloadUrl = iff(((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\") or (BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\")), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend AzureResource = iff(BackupManagementType in (\"DPM\", \"AzureBackupServer\", \"MAB\"), \"\" , iff(containerNameString != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId))\r\n| extend BackupItemLink =  iff ((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/IaasVMContainer;\", ProtectedContainerName, \"/protectedItems/VM;\", ProtectedContainerName),\r\niff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/StorageContainer;\", ProtectedContainerName, \"/protectedItems/AzureFileShare;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SQLDataBase;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SAPHanaDatabase;\", BackupItemName), \"\"))))\r\n|  extend container_array = split(ProtectedContainerName,\";\")\r\n|  extend container_arraylen = array_length(container_array)\r\n| project BackupItemName = BackupItemFriendlyName, ProtectedContainerName = ProtectedContainerFriendlyName, ContainerResourceGroup = iff(container_arraylen == 3, container_array[(container_arraylen-2)], \"(none)\"), PolicyName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), LatestRecoveryPointTime, ResourceId, StorageReplicationType, AzureResource, PolicyLink, BackupItemLink}; \r\n// To change BMSTypeWithBackupItemType to standard names\r\nlet CustomOutputTable = BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType\r\n| project BackupItemName, ProtectedContainerName, ContainerResourceGroup, PolicyName, BMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1 ,CustomBMSTypeWithBackupItemType ), LatestRecoveryPointTime, ResourceId, StorageReplicationType, AzureResource, PolicyLink, BackupItemLink\r\n| parse BMSTypeWithBackupItemType with ExtractedBMSType:string \"/\" ExtractedBackupItemType:string\r\n| project BackupItem=BackupItemName, Container=ProtectedContainerName, ResourceGroup=ContainerResourceGroup, Policy=PolicyName, LatestRecoveryPoint=LatestRecoveryPointTime, Vault=ResourceId, StorageReplicationType, AzureResource, PolicyLink, BackupItemLink, BackupManagementType=ExtractedBMSType, BackupItemType=ExtractedBackupItemType \r\n;\r\nCustomOutputTable",
              "size": 3,
              "noDataMessage": "No records found for the selected time range and scope",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{Workspaces}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "BackupItem",
                    "formatter": 16,
                    "formatOptions": {
                      "linkColumn": "BackupItemLink",
                      "linkTarget": "Resource",
                      "showIcon": true
                    },
                    "tooltipFormat": {
                      "tooltip": "Name of the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "Container",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Name of the Protected Container associated with the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "ResourceGroup",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Resource Group of the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "Policy",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Policy associated with the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "LatestRecoveryPoint",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Vault",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Vault associated with the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "StorageReplicationType",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AzureResource",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Azure Resource associated with the Backup Item. For Azure VM backup, SQL in Azure VM backup and SAP database in Azure VM backup, the Azure Resource is the Azure VM. For Azure Files Share backup, the Azure Resource is the Azure Storage Account. For on-premises Backup Items, this field is blank."
                    }
                  },
                  {
                    "columnMatch": "PolicyLink",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "BackupItemLink",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "BackupManagementType",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Backup Management Type"
                    }
                  },
                  {
                    "columnMatch": "BackupItemType",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Backup Item Type"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "BackupItem",
                    "label": "Backup Item"
                  },
                  {
                    "columnId": "Container"
                  },
                  {
                    "columnId": "ResourceGroup",
                    "label": "Resource Group"
                  },
                  {
                    "columnId": "Policy"
                  },
                  {
                    "columnId": "LatestRecoveryPoint",
                    "label": "Latest Recovery Point"
                  },
                  {
                    "columnId": "Vault"
                  },
                  {
                    "columnId": "StorageReplicationType"
                  },
                  {
                    "columnId": "AzureResource",
                    "label": "Azure Resource"
                  },
                  {
                    "columnId": "PolicyLink"
                  },
                  {
                    "columnId": "BackupItemLink"
                  },
                  {
                    "columnId": "BackupManagementType",
                    "label": "Backup Management Type"
                  },
                  {
                    "columnId": "BackupItemType",
                    "label": "Backup Item Type"
                  }
                ]
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Policy Optimizations"
              },
              {
                "parameterName": "OptimizeSubDimension",
                "comparison": "isEqualTo",
                "value": "Backup Schedule Optimizations"
              }
            ],
            "showPin": true,
            "name": "Optimize-PolicyOptimizationGrid2",
            "styleSettings": {
              "showBorder": true
            }
          },
          {
            "type": 1,
            "content": {
              "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">Backup Items with a large retention duration"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Policy Optimizations"
              },
              {
                "parameterName": "OptimizeSubDimension",
                "comparison": "isEqualTo",
                "value": "Retention Optimizations"
              }
            ],
            "name": "Optimize-PolicyOptimizationsGrid1Title"
          },
          {
            "type": 1,
            "content": {
              "json": "<p> <span style=\"font-size:12px; font-style:italic\"> Explore cost-saving opportunities by identifying items with backup retained for longer duration by your organization. <a href=\"https://aka.ms/AzureBackupReportLargeRetentionView\" target=\"_blank\">Learn More</a> </span> </p>"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Policy Optimizations"
              },
              {
                "parameterName": "OptimizeSubDimension",
                "comparison": "isEqualTo",
                "value": "Retention Optimizations"
              }
            ],
            "name": "Optimize-PolicyOptimizationsGrid1InstructionText1"
          },
          {
            "type": 1,
            "content": {
              "json": "<p> <span style=\"font-size:12px; font-style:italic\"> Use the below filters to identify backup items with retentions larger than the specified values. For the database workloads, retention duration of the full backups is considered. <a href=\"https://aka.ms/AzureBackupReportLargeRetentionView2\" target=\"_blank\">Learn More</a> </span> </p>"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Policy Optimizations"
              },
              {
                "parameterName": "OptimizeSubDimension",
                "comparison": "isEqualTo",
                "value": "Retention Optimizations"
              }
            ],
            "name": "Optimize-PolicyOptimizationsGrid1InstructionText2"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "bac04291-b7fd-4da5-8580-1815d0d2af4d",
                  "version": "KqlParameterItem/1.0",
                  "name": "DailyRetentionParam",
                  "label": "Daily RP Retention (days)",
                  "type": 1,
                  "description": "Use to specify minimum retention duration of daily retention points",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "5ff37c43-d299-4fea-b336-9e693346ec27",
                  "version": "KqlParameterItem/1.0",
                  "name": "WeeklyRetentionParam",
                  "label": "Weekly RP Retention (days)",
                  "type": 1,
                  "description": "Use to specify minimum retention duration of weekly retention points",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "4b5098ff-555d-4398-b611-48c9eea83994",
                  "version": "KqlParameterItem/1.0",
                  "name": "MonthlyRetentionParam",
                  "label": "Monthly RP Retention (days)",
                  "type": 1,
                  "description": "Use to specify monthly retention duration of daily retention points",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "056d71c8-9333-473a-b1c6-d9be75665fff",
                  "version": "KqlParameterItem/1.0",
                  "name": "YearlyRetentionParam",
                  "label": "Yearly RP Retention (days)",
                  "type": 1,
                  "description": "Use to specify minimum retention duration of yearly retention points",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                }
              ],
              "style": "above",
              "doNotRunWhenHidden": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Policy Optimizations"
              },
              {
                "parameterName": "OptimizeSubDimension",
                "comparison": "isEqualTo",
                "value": "Retention Optimizations"
              }
            ],
            "name": "Optimize-PolicyOptimizationGrid1Parameters1"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{Workspaces}"
              ],
              "parameters": [
                {
                  "id": "77aa6aec-8198-4e29-8196-e56c3fe81292",
                  "version": "KqlParameterItem/1.0",
                  "name": "ContainerNameWithBackupItemNameInOptimize_1",
                  "label": "Search Item or Container",
                  "type": 1,
                  "description": "Use to search for a Backup Item by name. <br/> To search for a specific item in a container, use the syntax [container name];[item name] <br/> To search for all items in a container, use the syntax [container name];",
                  "value": "",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "b8a26e03-124c-41bb-bd2c-3376aa80547b",
                  "version": "KqlParameterItem/1.0",
                  "name": "OptimizeMetric_Retention_SortBy",
                  "label": "Sort By",
                  "type": 2,
                  "description": "Use to sort by a certain column",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[{ \"value\": \"YearlyRetentionDuration\", \"label\": \"Yearly Retention Duration\" },\r\n{ \"value\": \"MonthlyRetentionDuration\", \"label\": \"Monthly Retention Duration\" }, \r\n{ \"value\": \"WeeklyRetentionDuration\", \"label\": \"Weekly Retention Duration\" },\r\n{ \"value\": \"DailyRetentionDuration\", \"label\": \"Daily Retention Duration\", \"selected\": \"true\" }]"
                },
                {
                  "id": "b4864988-e9db-434a-b79e-61d3f9d901c1",
                  "version": "KqlParameterItem/1.0",
                  "name": "Optimize_Retention_Order",
                  "label": "Order",
                  "type": 2,
                  "description": "Use to specify sort order: Ascending/Descending",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n    { \"value\":\"Ascending\", \"selected\":true},\r\n    { \"value\":\"Descending\"}\r\n]"
                },
                {
                  "id": "46f7de5c-dc7f-48ed-bfd0-d5a868aef402",
                  "version": "KqlParameterItem/1.0",
                  "name": "OptimizeMetricRowsPerGrid_1",
                  "label": "Rows Per Page",
                  "type": 2,
                  "description": "Number of rows to display in grid view",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": []
                  },
                  "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "792ec3e5-00b6-4669-9db2-de3e6617b7b7",
                  "version": "KqlParameterItem/1.0",
                  "name": "OptimizeMetricPageNumber_1",
                  "label": "Page",
                  "type": 2,
                  "description": "Select Page Number",
                  "isRequired": true,
                  "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\nlet AzureStorageCutoffDate = datetime({AzureStorageCutOffDate});\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n      \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Client\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\",\r\n\t  \"AzureBackupServer/SQLDB\", \"Azure Backup Server/SQL Database\",\r\n\t  \"AzureBackupServer/VMwareVM\", \"Azure Backup Server/VMWare VM\",\r\n\t  \"AzureBackupServer/HyperVVM\", \"Azure Backup Server/Hyper-V VM\",\r\n\t  \"AzureBackupServer/FileFolder\", \"Azure Backup Server/Files and Folder\",\r\n\t  \"AzureBackupServer/Client\", \"Azure Backup Server/Client\",\r\n\t  \"AzureBackupServer/SystemState\", \"Azure Backup Server/System State\",\r\n\t  \"AzureBackupServer/Sharepoint\", \"Azure Backup Server/Sharepoint Database\",\r\n\t  \"AzureBackupServer/Exchange\", \"Azure Backup Server/Exchange Mailbox Database\"];\r\n// Params\r\nlet BackupManagementTypeParam =  split(replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"),\",\");\r\nlet BackupItemTypeParam = split(replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"),\",\");\r\nlet ExcludableAzureWorkloadBackupItemValues = set_difference(dynamic([\"SQLDataBase\",\"SAPHanaDatabase\",\"SAPAseDatabase\"]), BackupItemTypeParam);\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet DailyRetentionParam =  iff( isempty(@\"{DailyRetentionParam}\"), todouble(-1), todouble(@\"{DailyRetentionParam}\"));\r\nlet WeeklyRetentionParam =  iff( isempty(@\"{WeeklyRetentionParam}\"), todouble(-1), todouble(@\"{WeeklyRetentionParam}\"));  \r\nlet MonthlyRetentionParam =   iff( isempty(@\"{MonthlyRetentionParam}\"), todouble(-1), todouble(@\"{MonthlyRetentionParam}\")); \r\nlet YearlyRetentionParam =   iff( isempty(@\"{YearlyRetentionParam}\"), todouble(-1), todouble(@\"{YearlyRetentionParam}\")); \r\nlet Item_search =  @\"{ContainerNameWithBackupItemNameInOptimize_1}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), BackupFrequency = columnifexists(\"BackupFrequency_s\", \"\"),\r\nDailyRetentionDuration = toint(columnifexists(\"DailyRetentionDuration_s\", \"\")), WeeklyRetentionDuration = toint(columnifexists(\"WeeklyRetentionDuration_s\", \"\")), MonthlyRetentionDuration = toint(columnifexists(\"MonthlyRetentionDuration_s\", \"\")), YearlyRetentionDuration = toint(columnifexists(\"YearlyRetentionDuration_s\", \"\")), LogBackupRetentionDuration = toint(columnifexists(\"LogBackupRetentionDuration_s\", \"\")), LogBackupFrequency = columnifexists(\"LogBackupFrequency_s\", \"\"),  DiffBackupFormat = columnifexists(\"DiffBackupFormat_s\", \"\"), DiffBackupRetentionDuration = toint(columnifexists(\"DiffBackupRetentionDuration_s\", \"\")), ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, BackupFrequency, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, LogBackupRetentionDuration, LogBackupFrequency, DiffBackupFormat, DiffBackupRetentionDuration, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   PolicyTable \r\n) on ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join  (\r\n   PolicyTable \r\n) on ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| where BackupItemType !in (ExcludableAzureWorkloadBackupItemValues)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndPolicyUnderAzureDiagnostics = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, ResourceId) on PolicyUniqueId, ResourceId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, \r\n  BackupManagementServerUniqueId, PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, ResourceId, StorageReplicationType\r\n};\r\nlet BackupItemAssociationAndPolicyUnderResourceSpecific = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, ResourceId ) on PolicyUniqueId, ResourceId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, \r\n  BackupManagementServerUniqueId, PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, ResourceId, StorageReplicationType\r\n};\r\nlet LatestBackupItemAssociationAndRecoveryPointTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join \r\n(union isfuzzy = true  \r\n(BackupItemAssociationAndPolicyUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndPolicyUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n)on BackupItemUniqueId\r\n| project ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId,  BackupManagementType, BackupItemType, PolicyUniqueId,  BackupItemProtectionState,PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, ResourceId, TimeGenerated, StorageReplicationType\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, PolicyUniqueId,  BackupItemProtectionState,PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, ResourceId, TimeGenerated, StorageReplicationType\r\n};\r\nlet OutputTable = (){LatestBackupItemAssociationAndRecoveryPointTable\r\n| project CustomBackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState))),\r\n  BackupManagementType, BackupItemType,  ResourceId, PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, ProtectedContainerName, BackupItemName, BackupItemFriendlyName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType\r\n| where  (DailyRetentionDuration > DailyRetentionParam) and (WeeklyRetentionDuration > WeeklyRetentionParam) and (MonthlyRetentionDuration > MonthlyRetentionParam) and (YearlyRetentionDuration > YearlyRetentionParam)\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemUniqueId\r\n};\r\nOutputTable\r\n| summarize c=count()\r\n| project num = (c-1)/{OptimizeMetricRowsPerGrid_1} + 1\r\n| project nums = range(1,num,1), num\r\n| mvexpand nums\r\n| project nums = tostring(nums), num = strcat(tostring(nums),\" of \",tostring(num))",
                  "crossComponentResources": [
                    "{Workspaces}"
                  ],
				  "value": "1",
                  "typeSettings": {
                    "additionalResourceOptions": []
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "above",
              "doNotRunWhenHidden": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Policy Optimizations"
              },
              {
                "parameterName": "OptimizeSubDimension",
                "comparison": "isEqualTo",
                "value": "Retention Optimizations"
              }
            ],
            "name": "Optimize-PolicyOptimizationsGrid1Parameters2"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\nlet AzureStorageCutoffDate = datetime({AzureStorageCutOffDate});\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n      \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Client\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\",\r\n\t  \"AzureBackupServer/SQLDB\", \"Azure Backup Server/SQL Database\",\r\n\t  \"AzureBackupServer/VMwareVM\", \"Azure Backup Server/VMWare VM\",\r\n\t  \"AzureBackupServer/HyperVVM\", \"Azure Backup Server/Hyper-V VM\",\r\n\t  \"AzureBackupServer/FileFolder\", \"Azure Backup Server/Files and Folder\",\r\n\t  \"AzureBackupServer/Client\", \"Azure Backup Server/Client\",\r\n\t  \"AzureBackupServer/SystemState\", \"Azure Backup Server/System State\",\r\n\t  \"AzureBackupServer/Sharepoint\", \"Azure Backup Server/Sharepoint Database\",\r\n\t  \"AzureBackupServer/Exchange\", \"Azure Backup Server/Exchange Mailbox Database\"];\r\n// Params\r\nlet BackupManagementTypeParam =  split(replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"),\",\");\r\nlet BackupItemTypeParam = split(replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"),\",\");\r\nlet ExcludableAzureWorkloadBackupItemValues = set_difference(dynamic([\"SQLDataBase\",\"SAPHanaDatabase\",\"SAPAseDatabase\"]), BackupItemTypeParam);\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet DailyRetentionParam =  iff( isempty(@\"{DailyRetentionParam}\"), todouble(-1), todouble(@\"{DailyRetentionParam}\"));\r\nlet WeeklyRetentionParam =  iff( isempty(@\"{WeeklyRetentionParam}\"), todouble(-1), todouble(@\"{WeeklyRetentionParam}\"));  \r\nlet MonthlyRetentionParam =   iff( isempty(@\"{MonthlyRetentionParam}\"), todouble(-1), todouble(@\"{MonthlyRetentionParam}\")); \r\nlet YearlyRetentionParam =   iff( isempty(@\"{YearlyRetentionParam}\"), todouble(-1), todouble(@\"{YearlyRetentionParam}\")); \r\nlet Item_search =  @\"{ContainerNameWithBackupItemNameInOptimize_1}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), BackupFrequency = columnifexists(\"BackupFrequency_s\", \"\"),\r\nDailyRetentionDuration = toint(columnifexists(\"DailyRetentionDuration_s\", \"\")), WeeklyRetentionDuration = toint(columnifexists(\"WeeklyRetentionDuration_s\", \"\")), MonthlyRetentionDuration = toint(columnifexists(\"MonthlyRetentionDuration_s\", \"\")), YearlyRetentionDuration = toint(columnifexists(\"YearlyRetentionDuration_s\", \"\")), LogBackupRetentionDuration = toint(columnifexists(\"LogBackupRetentionDuration_s\", \"\")), LogBackupFrequency = columnifexists(\"LogBackupFrequency_s\", \"\"),  DiffBackupFormat = columnifexists(\"DiffBackupFormat_s\", \"\"), DiffBackupRetentionDuration = toint(columnifexists(\"DiffBackupRetentionDuration_s\", \"\")), ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, BackupFrequency, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, LogBackupRetentionDuration, LogBackupFrequency, DiffBackupFormat, DiffBackupRetentionDuration, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   PolicyTable \r\n) on ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join  (\r\n   PolicyTable \r\n) on ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| where BackupItemType !in (ExcludableAzureWorkloadBackupItemValues)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndPolicyUnderAzureDiagnostics = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, ResourceId) on PolicyUniqueId, ResourceId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, \r\n  BackupManagementServerUniqueId, PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, ResourceId, StorageReplicationType\r\n};\r\nlet BackupItemAssociationAndPolicyUnderResourceSpecific = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, ResourceId ) on PolicyUniqueId, ResourceId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, \r\n  BackupManagementServerUniqueId, PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, ResourceId, StorageReplicationType\r\n};\r\nlet LatestBackupItemAssociationAndRecoveryPointTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join \r\n(union isfuzzy = true  \r\n(BackupItemAssociationAndPolicyUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndPolicyUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n)on BackupItemUniqueId\r\n| project ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId,  BackupManagementType, BackupItemType, PolicyUniqueId,  BackupItemProtectionState,PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, ResourceId, TimeGenerated, StorageReplicationType\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, PolicyUniqueId,  BackupItemProtectionState,PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, ResourceId, TimeGenerated, StorageReplicationType\r\n};\r\nlet OutputTable = (){LatestBackupItemAssociationAndRecoveryPointTable\r\n| project CustomBackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState))),\r\n  BackupManagementType, BackupItemType,  ResourceId, PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, ProtectedContainerName, BackupItemName, BackupItemFriendlyName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType\r\n| where  (DailyRetentionDuration > DailyRetentionParam) and (WeeklyRetentionDuration > WeeklyRetentionParam) and (MonthlyRetentionDuration > MonthlyRetentionParam) and (YearlyRetentionDuration > YearlyRetentionParam)\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemName, BackupItemFriendlyName, PolicyName = iff(CustomBackupItemProtectionState == \"ProtectionStopped\", \"(none)\", PolicyName), DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, BackupManagementType, BackupItemType,  ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType\r\n| extend PolicyLink = strcat(ResourceId, \"/backupPolicies/\", PolicyName)\r\n| project BackupItemName, BackupItemFriendlyName, PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, BackupManagementType, BackupItemType,  ResourceId, PolicyLink, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType\r\n| extend TempColumn = column_ifexists(tostring('{OptimizeMetric_Retention_SortBy}'), \"DailyRetentionDuration\")\r\n| extend ColumnToBeSorted = iff(tostring('{Optimize_Retention_Order}') == \"Ascending\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\r\n| sort by ColumnToBeSorted asc nulls last, BackupItemUniqueId asc  \r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/{OptimizeMetricRowsPerGrid_1} + 1))\r\n| where page_num has ('{OptimizeMetricPageNumber_1}') or '*' in ('{OptimizeMetricPageNumber_1}')\r\n| extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\r\n| extend containerNameString = iff(array_length(split(ProtectedContainerName,\";\")) == 3, ProtectedContainerName, \"\")\r\n| parse containerNameString with entityType:string \";\" rgName:string \";\" entityName:string\r\n| extend entityTypeForAzureStorageUrl = iff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), \"\")\r\n| extend entityTypeForIaaSVMUrl = iff((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend entityTypeForAzureWorkloadUrl = iff(((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\") or (BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\")), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend AzureResource = iff(BackupManagementType in (\"DPM\", \"AzureBackupServer\", \"MAB\"), \"\" , iff(containerNameString != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId))\r\n| extend BackupItemLink =  iff ((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/IaasVMContainer;\", ProtectedContainerName, \"/protectedItems/VM;\", ProtectedContainerName),\r\niff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/StorageContainer;\", ProtectedContainerName, \"/protectedItems/AzureFileShare;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SQLDataBase;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SAPHanaDatabase;\", BackupItemName), \"\"))))\r\n|  extend container_array = split(ProtectedContainerName,\";\")\r\n|  extend container_arraylen = array_length(container_array)\r\n| project BackupItemName = BackupItemFriendlyName, ProtectedContainerName = ProtectedContainerFriendlyName, ContainerResourceGroup = iff(container_arraylen == 3, container_array[(container_arraylen-2)], \"(none)\"), PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType),  ResourceId, StorageReplicationType, AzureResource, PolicyLink, BackupItemLink}; \r\n// To change BMSTypeWithBackupItemType to standard names\r\nlet CustomOutputTable = BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType\r\n| project BackupItemName, ProtectedContainerName, ContainerResourceGroup, PolicyName, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, BMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1 ,CustomBMSTypeWithBackupItemType ), ResourceId, StorageReplicationType, AzureResource, PolicyLink, BackupItemLink\r\n| parse BMSTypeWithBackupItemType with ExtractedBMSType:string \"/\" ExtractedBackupItemType:string\r\n| project BackupItem=BackupItemName, Container=ProtectedContainerName, ResourceGroup=ContainerResourceGroup, Policy=PolicyName,  DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, Vault=ResourceId, StorageReplicationType, AzureResource, PolicyLink, BackupItemLink, BackupManagementType=ExtractedBMSType, BackupItemType=ExtractedBackupItemType \r\n;\r\nCustomOutputTable",
              "size": 3,
              "noDataMessage": "No records found for the selected time range and scope",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{Workspaces}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "BackupItem",
                    "formatter": 16,
                    "formatOptions": {
                      "linkColumn": "BackupItemLink",
                      "linkTarget": "Resource",
                      "showIcon": true
                    },
                    "tooltipFormat": {
                      "tooltip": "Name of the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "Container",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Name of the Protected Container associated with the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "ResourceGroup",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Resource Group of the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "Policy",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Policy associated with the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "DailyRetentionDuration",
                    "formatter": 4,
                    "formatOptions": {
                      "min": 0,
                      "palette": "blue"
                    },
                    "tooltipFormat": {
                      "tooltip": "Retention duration of the daily retention points of the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "WeeklyRetentionDuration",
                    "formatter": 4,
                    "formatOptions": {
                      "min": 0,
                      "palette": "blue"
                    },
                    "tooltipFormat": {
                      "tooltip": "Retention duration of the weekly retention points of the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "MonthlyRetentionDuration",
                    "formatter": 4,
                    "formatOptions": {
                      "min": 0,
                      "palette": "blue"
                    },
                    "tooltipFormat": {
                      "tooltip": "Retention duration of the monthly retention points of the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "YearlyRetentionDuration",
                    "formatter": 4,
                    "formatOptions": {
                      "min": 0,
                      "palette": "blue"
                    },
                    "tooltipFormat": {
                      "tooltip": "Retention duration of the yearly retention points of the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "Vault",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Vault associated with the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "StorageReplicationType",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AzureResource",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Azure Resource associated with the Backup Item. For Azure VM backup, SQL in Azure VM backup and SAP database in Azure VM backup, the Azure Resource is the Azure VM. For Azure Files Share backup, the Azure Resource is the Azure Storage Account. For on-premises Backup Items, this field is blank."
                    }
                  },
                  {
                    "columnMatch": "PolicyLink",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "BackupItemLink",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "BackupManagementType",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Backup Management Type"
                    }
                  },
                  {
                    "columnMatch": "BackupItemType",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Backup Item Type"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "BackupItem",
                    "label": "Backup Item"
                  },
                  {
                    "columnId": "ResourceGroup",
                    "label": "Resource Group"
                  },
                  {
                    "columnId": "DailyRetentionDuration",
                    "label": "Daily RP Retention Duration"
                  },
                  {
                    "columnId": "WeeklyRetentionDuration",
                    "label": "Weekly RP Retention Duration"
                  },
                  {
                    "columnId": "MonthlyRetentionDuration",
                    "label": "Monthly RP Retention Duration"
                  },
                  {
                    "columnId": "YearlyRetentionDuration",
                    "label": "Yearly RP Retention Duration"
                  },
                  {
                    "columnId": "StorageReplicationType"
                  },
                  {
                    "columnId": "AzureResource",
                    "label": "Azure Resource"
                  },
                  {
                    "columnId": "PolicyLink"
                  },
                  {
                    "columnId": "BackupItemLink",
                    "label": ""
                  },
                  {
                    "columnId": "BackupManagementType",
                    "label": "Backup Management Type"
                  },
                  {
                    "columnId": "BackupItemType",
                    "label": "Backup Item Type"
                  }
                ]
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Policy Optimizations"
              },
              {
                "parameterName": "OptimizeSubDimension",
                "comparison": "isEqualTo",
                "value": "Retention Optimizations"
              }
            ],
            "showPin": true,
            "name": "Optimize-PolicyOptimizationsGrid1",
            "styleSettings": {
              "showBorder": true
            }
          },
          {
            "type": 1,
            "content": {
              "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">Backup Items without a recovery point in selected time range </span> </div>"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Inactive Resources"
              }
            ],
            "name": "Optimize-InactiveResourcesGrid1Title"
          },
          {
            "type": 1,
            "content": {
              "json": "<p> <span style=\"font-size:12px; font-style:italic\"> Below are the backup items which do not have a successful recovery point in the selected time range. You can save on costs by unprotecting decommissioned machines. <a href=\"https://aka.ms/AzureBackupReportDeletedResourcesView\" target=\"_blank\">Learn More</a> </span> </p>"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Inactive Resources"
              }
            ],
            "name": "Optimize-InactiveResourcesGrid1InstructionText"
          },
          {
            "type": 1,
            "content": {
              "json": "<p> <span style=\"font-size:12px; font-style:italic\"> Showing results for Time Range: {TimeRange} </span> </p>"
            },
            "conditionalVisibility": {
              "parameterName": "OptimizeDimension",
              "comparison": "isEqualTo",
              "value": "Inactive Resources"
            },
            "name": "Optimize-InactiveResourcesTimeRangeText"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{Workspaces}"
              ],
              "parameters": [
                {
                  "id": "77aa6aec-8198-4e29-8196-e56c3fe81292",
                  "version": "KqlParameterItem/1.0",
                  "name": "ContainerNameWithBackupItemNameInOptimize",
                  "label": "Search Item or Container",
                  "type": 1,
                  "description": "Use to search for a Backup Item by name. <br/> To search for a specific item in a container, use the syntax [container name];[item name] <br/> To search for all items in a container, use the syntax [container name];",
                  "value": "",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "46f7de5c-dc7f-48ed-bfd0-d5a868aef402",
                  "version": "KqlParameterItem/1.0",
                  "name": "OptimizeMetricRowsPerGrid",
                  "label": "Rows Per Page",
                  "type": 2,
                  "description": "Number of rows to display in grid view",
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": []
                  },
                  "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                },
                {
                  "id": "792ec3e5-00b6-4669-9db2-de3e6617b7b7",
                  "version": "KqlParameterItem/1.0",
                  "name": "OptimizeMetricPageNumber",
                  "label": "Page",
                  "type": 2,
                  "description": "Select Page Number",
                  "isRequired": true,
                  "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\nlet ExtRangeStart = RangeStart - 2d;\r\nlet ExtRangeEnd = RangeEnd + 2d;\r\nlet AzureStorageCutoffDate = datetime({AzureStorageCutOffDate});\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n      \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Client\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\",\r\n\t  \"AzureBackupServer/SQLDB\", \"Azure Backup Server/SQL Database\",\r\n\t  \"AzureBackupServer/VMwareVM\", \"Azure Backup Server/VMWare VM\",\r\n\t  \"AzureBackupServer/HyperVVM\", \"Azure Backup Server/Hyper-V VM\",\r\n\t  \"AzureBackupServer/FileFolder\", \"Azure Backup Server/Files and Folder\",\r\n\t  \"AzureBackupServer/Client\", \"Azure Backup Server/Client\",\r\n\t  \"AzureBackupServer/SystemState\", \"Azure Backup Server/System State\",\r\n\t  \"AzureBackupServer/Sharepoint\", \"Azure Backup Server/Sharepoint Database\",\r\n\t  \"AzureBackupServer/Exchange\", \"Azure Backup Server/Exchange Mailbox Database\"];\r\n// Params\r\nlet BackupManagementTypeParam =  split(replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"),\",\");\r\nlet BackupItemTypeParam = split(replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"),\",\");\r\nlet ExcludableAzureWorkloadBackupItemValues = set_difference(dynamic([\"SQLDataBase\",\"SAPHanaDatabase\",\"SAPAseDatabase\"]), BackupItemTypeParam);\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet Item_search =  @\"{ContainerNameWithBackupItemNameInOptimize}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   PolicyTable \r\n) on ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join  (\r\n   PolicyTable \r\n) on ResourceId;\r\n};\r\nlet RecoveryPointTableUnderAzureDiagnostics = ()\r\n{\r\n let RecoveryPointTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where OperationName == \"RecoveryPoint\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project LatestRecoveryPointLocation = columnifexists(\"LatestRecoveryPointLocation_s\", \"\"), OldestRecoveryPointLocation = columnifexists(\"OldestRecoveryPointLocation_s\", \"\"), LatestRecoveryPointTime = todatetime(columnifexists(\"LatestRecoveryPointTime_s\", \"\")), OldestRecoveryPointTime = todatetime(columnifexists(\"OldestRecoveryPointLocation_s\", \"\")),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId\r\n// Interested in only Vault/Cloud RPs\r\n| where LatestRecoveryPointLocation has \"Cloud\" \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   RecoveryPointTable \r\n) on ResourceId;\r\n};\r\nlet RecoveryPointTableUnderResourceSpecific = ()\r\n{\r\n let RecoveryPointTable = CoreAzureBackup \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"RecoveryPoint\" and  State != \"Deleted\"\r\n| project LatestRecoveryPointLocation, OldestRecoveryPointLocation, LatestRecoveryPointTime, OldestRecoveryPointTime,\r\nBackupItemUniqueId, TimeGenerated, ResourceId\r\n// Interested in only Vault/Cloud RPs\r\n| where LatestRecoveryPointLocation has \"Cloud\" \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   RecoveryPointTable \r\n) on ResourceId;\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join  (\r\n   JobTable \r\n) on ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   JobTable \r\n) on ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| where BackupItemType !in (ExcludableAzureWorkloadBackupItemValues)\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet TotalBackupItemAssociationAndRecoveryPointUnderAzureDiagnostics = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics \r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId, ResourceId\r\n| join kind= leftouter (\r\n   RecoveryPointTableUnderAzureDiagnostics  | project LatestRecoveryPointTime, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, LatestRecoveryPointTime,\r\n  BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet TotalBackupItemAssociationAndRecoveryPointUnderResourceSpecific = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId, ResourceId\r\n| join kind= leftouter (\r\n   RecoveryPointTableUnderResourceSpecific | project LatestRecoveryPointTime, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, LatestRecoveryPointTime,\r\n  BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet BackupItemWithoutSuccessfulBackup = (){\r\n union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation has \"Backup\"\r\n| where JobStatus in (\"Completed\",\"CompletedWithWarnings\")\r\n| join kind= rightanti (TotalBackupItemDimensionTable) on BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId\r\n};\r\nlet BackupItemWithoutSuccessfulBackupAndItsRecoveryPointTable = ()\r\n{\r\nBackupItemWithoutSuccessfulBackup | join \r\n(union isfuzzy = true  \r\n(TotalBackupItemAssociationAndRecoveryPointUnderAzureDiagnostics()\r\n),\r\n(TotalBackupItemAssociationAndRecoveryPointUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n)on BackupItemUniqueId\r\n// Additional check to ensure Recovery Point is not in the timerange. Can happen if no job records in the time range.\r\n| where not(LatestRecoveryPointTime >= RangeStart and LatestRecoveryPointTime <= RangeEnd)\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, PolicyUniqueId, LatestRecoveryPointTime, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n};\r\nlet OutputTable = (){BackupItemWithoutSuccessfulBackupAndItsRecoveryPointTable\r\n| project CustomBackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState))),\r\n  BackupManagementType, BackupItemType, LatestRecoveryPointTime, ResourceId, PolicyName, ProtectedContainerName, BackupItemName, BackupItemFriendlyName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemUniqueId\r\n};\r\nOutputTable\r\n| summarize c=count()\r\n| project num = (c-1)/{OptimizeMetricRowsPerGrid} + 1\r\n| project nums = range(1,num,1), num\r\n| mvexpand nums\r\n| project nums = tostring(nums), num = strcat(tostring(nums),\" of \",tostring(num))",
                  "crossComponentResources": [
                    "{Workspaces}"
                  ],
				  "value": "1",
                  "typeSettings": {
                    "additionalResourceOptions": []
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                }
              ],
              "style": "above",
              "doNotRunWhenHidden": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Inactive Resources"
              }
            ],
            "name": "Optimize-InactiveResourcesGrid1Parameters"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\nlet ExtRangeStart = RangeStart - 2d;\r\nlet ExtRangeEnd = RangeEnd + 2d;\r\nlet AzureStorageCutoffDate = datetime({AzureStorageCutOffDate});\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n      \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Client\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\",\r\n\t  \"AzureBackupServer/SQLDB\", \"Azure Backup Server/SQL Database\",\r\n\t  \"AzureBackupServer/VMwareVM\", \"Azure Backup Server/VMWare VM\",\r\n\t  \"AzureBackupServer/HyperVVM\", \"Azure Backup Server/Hyper-V VM\",\r\n\t  \"AzureBackupServer/FileFolder\", \"Azure Backup Server/Files and Folder\",\r\n\t  \"AzureBackupServer/Client\", \"Azure Backup Server/Client\",\r\n\t  \"AzureBackupServer/SystemState\", \"Azure Backup Server/System State\",\r\n\t  \"AzureBackupServer/Sharepoint\", \"Azure Backup Server/Sharepoint Database\",\r\n\t  \"AzureBackupServer/Exchange\", \"Azure Backup Server/Exchange Mailbox Database\"];\r\n// Params\r\nlet BackupManagementTypeParam =  split(replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"),\",\");\r\nlet BackupItemTypeParam = split(replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"),\",\");\r\nlet ExcludableAzureWorkloadBackupItemValues = set_difference(dynamic([\"SQLDataBase\",\"SAPHanaDatabase\",\"SAPAseDatabase\"]), BackupItemTypeParam);\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet Item_search =  @\"{ContainerNameWithBackupItemNameInOptimize}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   PolicyTable \r\n) on ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join  (\r\n   PolicyTable \r\n) on ResourceId;\r\n};\r\nlet RecoveryPointTableUnderAzureDiagnostics = ()\r\n{\r\n let RecoveryPointTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where OperationName == \"RecoveryPoint\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project LatestRecoveryPointLocation = columnifexists(\"LatestRecoveryPointLocation_s\", \"\"), OldestRecoveryPointLocation = columnifexists(\"OldestRecoveryPointLocation_s\", \"\"), LatestRecoveryPointTime = todatetime(columnifexists(\"LatestRecoveryPointTime_s\", \"\")), OldestRecoveryPointTime = todatetime(columnifexists(\"OldestRecoveryPointLocation_s\", \"\")),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId\r\n// Interested in only Vault/Cloud RPs\r\n| where LatestRecoveryPointLocation has \"Cloud\" \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   RecoveryPointTable \r\n) on ResourceId;\r\n};\r\nlet RecoveryPointTableUnderResourceSpecific = ()\r\n{\r\n let RecoveryPointTable = CoreAzureBackup \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"RecoveryPoint\" and  State != \"Deleted\"\r\n| project LatestRecoveryPointLocation, OldestRecoveryPointLocation, LatestRecoveryPointTime, OldestRecoveryPointTime,\r\nBackupItemUniqueId, TimeGenerated, ResourceId\r\n// Interested in only Vault/Cloud RPs\r\n| where LatestRecoveryPointLocation has \"Cloud\" \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   RecoveryPointTable \r\n) on ResourceId;\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType_s == \"AzureStorage\")\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join  (\r\n   JobTable \r\n) on ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   JobTable \r\n) on ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| where BackupItemType !in (ExcludableAzureWorkloadBackupItemValues)\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet TotalBackupItemAssociationAndRecoveryPointUnderAzureDiagnostics = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics \r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId, ResourceId\r\n| join kind= leftouter (\r\n   RecoveryPointTableUnderAzureDiagnostics  | project LatestRecoveryPointTime, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, LatestRecoveryPointTime,\r\n  BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet TotalBackupItemAssociationAndRecoveryPointUnderResourceSpecific = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId, ResourceId\r\n| join kind= leftouter (\r\n   RecoveryPointTableUnderResourceSpecific | project LatestRecoveryPointTime, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, LatestRecoveryPointTime,\r\n  BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet BackupItemWithoutSuccessfulBackup = (){\r\n union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation has \"Backup\"\r\n| where JobStatus in (\"Completed\",\"CompletedWithWarnings\")\r\n| join kind= rightanti (TotalBackupItemDimensionTable) on BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId\r\n};\r\nlet BackupItemWithoutSuccessfulBackupAndItsRecoveryPointTable = ()\r\n{\r\nBackupItemWithoutSuccessfulBackup | join \r\n(union isfuzzy = true  \r\n(TotalBackupItemAssociationAndRecoveryPointUnderAzureDiagnostics()\r\n),\r\n(TotalBackupItemAssociationAndRecoveryPointUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n)on BackupItemUniqueId\r\n// Additional check to ensure Recovery Point is not in the timerange. Can happen if no job records in the time range.\r\n| where not(LatestRecoveryPointTime >= RangeStart and LatestRecoveryPointTime <= RangeEnd)\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, PolicyUniqueId, LatestRecoveryPointTime, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n};\r\nlet OutputTable = (){BackupItemWithoutSuccessfulBackupAndItsRecoveryPointTable\r\n| project CustomBackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState))),\r\n  BackupManagementType, BackupItemType, LatestRecoveryPointTime, ResourceId, PolicyName, ProtectedContainerName, BackupItemName, BackupItemFriendlyName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemName, BackupItemFriendlyName, PolicyName = iff(CustomBackupItemProtectionState == \"ProtectionStopped\", \"(none)\", PolicyName), BackupManagementType, BackupItemType, LatestRecoveryPointTime,  ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType\r\n| extend PolicyLink = strcat(ResourceId, \"/backupPolicies/\", PolicyName)\r\n| project BackupItemName, BackupItemFriendlyName, PolicyName, BackupManagementType, BackupItemType, LatestRecoveryPointTime,  ResourceId, PolicyLink, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType  \r\n| sort by BackupItemUniqueId asc \r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/{OptimizeMetricRowsPerGrid} + 1))\r\n| where page_num has ('{OptimizeMetricPageNumber}') or '*' in ('{OptimizeMetricPageNumber}')\r\n| extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\r\n| extend containerNameString = iff(array_length(split(ProtectedContainerName,\";\")) == 3, ProtectedContainerName, \"\")\r\n| parse containerNameString with entityType:string \";\" rgName:string \";\" entityName:string\r\n| extend entityTypeForAzureStorageUrl = iff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), \"\")\r\n| extend entityTypeForIaaSVMUrl = iff((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend entityTypeForAzureWorkloadUrl = iff(((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\") or (BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\")), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend AzureResource = iff(BackupManagementType in (\"DPM\", \"AzureBackupServer\", \"MAB\"), \"\" , iff(containerNameString != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId))\r\n| extend BackupItemLink =  iff ((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/IaasVMContainer;\", ProtectedContainerName, \"/protectedItems/VM;\", ProtectedContainerName),\r\niff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/StorageContainer;\", ProtectedContainerName, \"/protectedItems/AzureFileShare;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SQLDataBase;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SAPHanaDatabase;\", BackupItemName), \"\"))))\r\n|  extend container_array = split(ProtectedContainerName,\";\")\r\n|  extend container_arraylen = array_length(container_array)\r\n| project BackupItemName = BackupItemFriendlyName, ProtectedContainerName = ProtectedContainerFriendlyName, ContainerResourceGroup = iff(container_arraylen == 3, container_array[(container_arraylen-2)], \"(none)\"), PolicyName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), LatestRecoveryPointTime, ResourceId, StorageReplicationType, AzureResource, PolicyLink, BackupItemLink}; \r\n// To change BMSTypeWithBackupItemType to standard names\r\nlet CustomOutputTable = BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType\r\n| project BackupItemName, ProtectedContainerName, ContainerResourceGroup, PolicyName, BMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1 ,CustomBMSTypeWithBackupItemType ), LatestRecoveryPointTime, ResourceId, StorageReplicationType, AzureResource, PolicyLink, BackupItemLink\r\n| parse BMSTypeWithBackupItemType with ExtractedBMSType:string \"/\" ExtractedBackupItemType:string\r\n| project BackupItem=BackupItemName, Container=ProtectedContainerName, ResourceGroup=ContainerResourceGroup, Policy=PolicyName, LatestRecoveryPoint=LatestRecoveryPointTime, Vault=ResourceId, StorageReplicationType, AzureResource, PolicyLink, BackupItemLink, BackupManagementType=ExtractedBMSType, BackupItemType=ExtractedBackupItemType \r\n;\r\nCustomOutputTable",
              "size": 3,
              "noDataMessage": "No records found for the selected time range and scope",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "crossComponentResources": [
                "{Workspaces}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "BackupItem",
                    "formatter": 16,
                    "formatOptions": {
                      "linkColumn": "BackupItemLink",
                      "linkTarget": "Resource",
                      "showIcon": true
                    },
                    "tooltipFormat": {
                      "tooltip": "Name of the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "Container",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Name of the Protected Container associated with the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "ResourceGroup",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Resource Group of the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "Policy",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Policy associated with the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "LatestRecoveryPoint",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Latest Recovery Point associated with the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "Vault",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Vault associated with the Backup Item"
                    }
                  },
                  {
                    "columnMatch": "StorageReplicationType",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "AzureResource",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Azure Resource associated with the Backup Item. For Azure VM backup, SQL in Azure VM backup and SAP database in Azure VM backup, the Azure Resource is the Azure VM. For Azure Files Share backup, the Azure Resource is the Azure Storage Account. For on-premises Backup Items, this field is blank."
                    }
                  },
                  {
                    "columnMatch": "PolicyLink",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "BackupItemLink",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "BackupManagementType",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Backup Management Type"
                    }
                  },
                  {
                    "columnMatch": "BackupItemType",
                    "formatter": 0,
                    "tooltipFormat": {
                      "tooltip": "Backup Item Type"
                    }
                  },
                  {
                    "columnMatch": "BackupItemName",
                    "formatter": 16,
                    "formatOptions": {
                      "linkColumn": "BackupItemLink",
                      "linkTarget": "Resource",
                      "showIcon": true
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "BackupItem",
                    "label": "Backup Item"
                  },
                  {
                    "columnId": "Container"
                  },
                  {
                    "columnId": "ResourceGroup",
                    "label": "Resource Group"
                  },
                  {
                    "columnId": "Policy"
                  },
                  {
                    "columnId": "LatestRecoveryPoint",
                    "label": "Latest Recovery Point"
                  },
                  {
                    "columnId": "Vault"
                  },
                  {
                    "columnId": "StorageReplicationType",
                    "label": "Storage Replication Type"
                  },
                  {
                    "columnId": "AzureResource",
                    "label": "Azure Resource"
                  },
                  {
                    "columnId": "PolicyLink"
                  },
                  {
                    "columnId": "BackupItemLink"
                  },
                  {
                    "columnId": "BackupManagementType",
                    "label": "Backup Management Type"
                  },
                  {
                    "columnId": "BackupItemType",
                    "label": "Backup Item Type"
                  }
                ]
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "TabName",
                "comparison": "isEqualTo",
                "value": "Optimize"
              },
              {
                "parameterName": "OptimizeDimension",
                "comparison": "isEqualTo",
                "value": "Inactive Resources"
              }
            ],
            "showPin": true,
            "name": "Optimize-InactiveResourcesGrid1",
            "styleSettings": {
              "showBorder": true
            }
          }
        ]
      },
      "name": "group - 0"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}