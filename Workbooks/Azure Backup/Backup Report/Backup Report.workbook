{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Overview",
            "subTarget": "Overview",
            "style": "link"
          },
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Summary",
            "subTarget": "Summary",
            "style": "primary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "13bf0ff5-c132-4c85-910e-9de00bb3d26e",
              "typeSource": "workbook",
              "gallerySource": "workbook"
            }
          },
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "BackupItems",
            "subTarget": "BackupItems",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Storage",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          },
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Usage",
            "subTarget": "Usage",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Protected Instances",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          },
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Job Distribution",
            "subTarget": "JobDistribution",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Job Distribution",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          },
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Job Details",
            "subTarget": "JobDetails",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Job Details",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          },
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Policy Adherence",
            "subTarget": "PolicyAdherence",
            "style": "link"
          },
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Alert Distribution",
            "subTarget": "AlertDistribution",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Alert Distribution",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          },
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Alert Details",
            "subTarget": "AlertDetails",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Alert Details",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          }
        ]
      },
      "name": "links - 8"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left;float:left;\"><span style=\"font-size:16px;font-weight:600\">Select Log Analytics Workspace </span> <br> <span style=\"font-size:12px;\"> <a href=\"#\"> How to configure vault diagnostic settings for backup reports </a> </span> </div> <div style=\"text-align:right; float:right\"> <span style=\"font-size:12px;\"> <a href=\"#\"> What happened to the Power BI reports? </a> </span> </div>"
      },
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Overview"
      },
      "name": "Overview-first"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Subscriptions}"
        ],
        "parameters": [
          {
            "id": "d1f42f81-eb8f-4653-a0ff-38564d7487b4",
            "version": "KqlParameterItem/1.0",
            "name": "Subscriptions",
            "type": 6,
            "description": "Subscriptions to filter the list of workspaces",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": false,
              "selectAllValue": ""
            }
          },
          {
            "id": "2373a24f-ad32-4909-a7f6-59b373dcde6c",
            "version": "KqlParameterItem/1.0",
            "name": "Workspaces",
            "type": 5,
            "description": "LA Workspaces configured in vault diagnostic settings",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type =~ 'microsoft.operationalinsights/workspaces' | project id",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "value": [],
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.insights/components"
      },
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Overview"
      },
      "customWidth": "50",
      "name": "parameters - 1 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "_____"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "text - 9"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left;float:left;\"><span style=\"font-size:16px;font-weight:600\">Report Filters </span> </div> <div style=\"text-align:right; float:right\"> <span style=\"font-size:12px;\"> <a href=\"#\"> How to use backup reports? </a> </span> </div>"
      },
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "text - 12"
    },
    {
      "type": 1,
      "content": {
        "json": "<p> 💡 <span style=\"font-size:12px; font-style:italic\"> Filters are applied left to right and top to bottom on each page. <a href=\"#\">Learn More</a> </span> </p>"
      },
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "text - 13"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "8c4ae44c-fa9a-4498-aedc-736a56e64b43",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "label": "Time Range",
            "type": 4,
            "description": "Time Range",
            "value": {
              "durationMs": 604800000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "4756b65c-80b2-4477-9bec-626cc713dfd7",
            "version": "KqlParameterItem/1.0",
            "name": "BMSTypeWithBackupItemTypeParam",
            "label": "BackupItem Type",
            "type": 2,
            "description": "Type of BackupItem",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where TimeRangeEndDay < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project  BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\") \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where TimeRangeEndDay < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType \r\n};\r\nCombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| distinct BackupManagementType, BackupItemType\r\n| distinct strcat(BackupManagementType, \"/\", BackupItemType) ",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "678680e5-76b5-4db8-bbef-5f73942caf2e",
            "version": "KqlParameterItem/1.0",
            "name": "VaultSubscription",
            "label": "Subscription Name",
            "type": 6,
            "description": "Subscription under which vault exists",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where TimeRangeEndDay < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId \r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where TimeRangeEndDay < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType,  ResourceId \r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n};\r\nCombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), SubscriptionId \r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct SubscriptionId\r\n",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2a83acc5-2123-476f-8a4c-da2fddf231a1",
            "version": "KqlParameterItem/1.0",
            "name": "Location",
            "label": "Vault Location",
            "type": 2,
            "description": "Location in which the vault was created",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used -  BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = startofday(TimeGenerated)\r\n| where TimeRangeEndDay < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| distinct ResourceId, AzureDataCenter, VaultName\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where TimeRangeEndDay < Today\r\n| where OperationName == \"Vault\" \r\n| distinct ResourceId, AzureDataCenter, VaultName;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where TimeRangeEndDay < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n| where SubscriptionId in ({VaultSubscription:id}) or '*' in ({VaultSubscription:id})\r\n;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where TimeRangeEndDay < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:id}) or '*' in ({VaultSubscription:id})\r\n;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics() | project AzureDataCenter),\r\n(BackupItemUnderResourceSpecific() | project AzureDataCenter)\r\n| distinct AzureDataCenter};\r\nLatestBackupItemTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "fefd31fa-2774-43ca-8cc3-44d477c969f0",
            "version": "KqlParameterItem/1.0",
            "name": "Vault",
            "label": "Vault Name",
            "type": 2,
            "description": "Name of the vault",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used -  BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = startofday(TimeGenerated)\r\n| where TimeRangeEndDay < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId, AzureDataCenter, VaultName\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where TimeRangeEndDay < Today\r\n| where OperationName == \"Vault\" \r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId, AzureDataCenter, VaultName;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where TimeRangeEndDay < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:id}) or '*' in ({VaultSubscription:id})\r\n;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where TimeRangeEndDay < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:id}) or '*' in ({VaultSubscription:id})\r\n;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics() | project VaultName),\r\n(BackupItemUnderResourceSpecific() | project VaultName)\r\n| distinct VaultName};\r\nLatestBackupItemTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "100",
      "name": "parameters - 7",
      "styleSettings": {
        "maxWidth": "100%"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "ⓘ <span style=\"font-size:12px;font-style:italic\"> All datetimes are in UTC. Data for the current partial day is not shown in the reports. <a href=\"#\">Learn More</a></span></div>"
      },
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "text - 14",
      "styleSettings": {
        "margin": "0% 0% 0% 0%",
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "__________________________________________________________________________________________"
      },
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "Overview - last",
      "styleSettings": {
        "padding": "0px 0px 10px 0px"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet RangeStartDay = startofday(now(-31d));\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet interval = 1d;\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend TimeRangeEndDay = startofday(TimeGenerated)\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n | where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n | where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n | where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| extend ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\r\n{\r\n let ProtectedInstanceTable = AzureDiagnostics \r\n | where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedInstance\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), ProtectedInstanceCount = toint(columnifexists(\"ProtectedInstanceCount_s\", \"\"))\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderResourceSpecific = (isProtectedContainerBillingType:bool)\r\n{\r\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedInstance\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet TotalProtectedInstanceTable = (isProtectedContainerBillingType:bool) \r\n{CombinedTable | union isfuzzy = true \r\n(ProtectedInstanceUnderAzureDiagnostics(isProtectedContainerBillingType) \r\n| extend BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\")),\r\n(ProtectedInstanceUnderResourceSpecific(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n// Exclude Log Jobs\r\n| extend JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\")\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n| extend JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\")\r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid)\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n// Exclude Log Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet AlertUnderAzureDiagnostics = ()\r\n{\r\nlet AlertTable = AzureDiagnostics \r\n| where TimeGenerated >= RangeStart\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Alert\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| extend AlertUniqueIdGuid = columnifexists(\"AlertUniqueId_g\", \"\") , AlertUniqueIdStr = columnifexists(\"AlertUniqueId_s\", \"\")\r\n| extend AlertUniqueId = iff(AlertUniqueIdGuid == \"\", AlertUniqueIdStr, AlertUniqueIdGuid)\r\n| extend AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n| where AlertOccurrenceDateTime >= RangeStart and AlertOccurrenceDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by AlertUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   AlertTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet AlertUnderResourceSpecific = ()\r\n{\r\nlet AlertTable = AddonAzureBackupAlerts \r\n| where TimeGenerated >= RangeStart\r\n| where OperationName == \"Alert\" \r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where AlertOccurrenceDateTime >= RangeStart and AlertOccurrenceDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by AlertUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   AlertTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = materialize(CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()\r\n| project BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), \r\nBackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\",\"\"), BackupItemUniqueId, TimeGenerated),\r\n(BackupItemUnderResourceSpecific())\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where BackupItemUniqueId != \"\"\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| project BackupItemUniqueId, BMSTypeWithBackupItemType);\r\nlet LatestBackupItemAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= leftouter\r\n(CombinedTable | union isfuzzy = true  \r\n(StorageAssociationUnderAzureDiagnostics | project StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")), BackupItemUniqueId, TimeGenerated),\r\n(StorageAssociationUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| summarize StorageConsumedInGBs = sum(StorageConsumedInMBs)/(1024 * 1024) by BMSTypeWithBackupItemType};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\nLatestBackupItemDimensionTable\r\n| join kind= leftouter \r\n(CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), JobStatus = columnifexists(\"JobStatus_s\", \"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\", \"\"),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\", \"\")), JobDurationInSec = todouble(columnifexists(\"JobDurationInSecs_s\", \"\"))\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet LatestAlertTableBasedOnBackupItem = (){\r\nLatestBackupItemDimensionTable\r\n| join kind= leftouter \r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderAzureDiagnostics()\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(AlertUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, AlertUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet LatestProtectedContainerUniqueIdTableBasedOnBackupItem = (){\r\nLatestBackupItemDimensionTable\r\n| join kind= leftouter \r\n(CombinedTable | union isfuzzy = true \r\n(BackupItemAssociationUnderAzureDiagnostics()\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\")\r\n),\r\n(BackupItemAssociationUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| distinct ProtectedContainerUniqueId\r\n};\r\nlet LatestProtectedInstanceTableFromProtectedContainerUniqueId = ()\r\n{ \r\nLatestProtectedContainerUniqueIdTableBasedOnBackupItem\r\n| join kind= leftouter (TotalProtectedInstanceTable(true)) on ProtectedContainerUniqueId == ProtectedContainerUniqueId;\r\n};\r\nlet LatestProtectedInstanceTableFromBackupItemUniqueId = ()\r\n{ \r\nLatestBackupItemDimensionTable\r\n| join kind= leftouter (TotalProtectedInstanceTable(false)) on BackupItemUniqueId == BackupItemUniqueId;\r\n};\r\nlet LatestProtectedInstanceTable = ( ) \r\n{ union \r\n(LatestProtectedInstanceTableFromProtectedContainerUniqueId()),\r\n(LatestProtectedInstanceTableFromBackupItemUniqueId())\r\n};\r\n(LatestBackupItemDimensionTable | count | extend Dummy = 1) \r\n| join (LatestBackupItemAndStorageConsumptionTable | summarize sum(StorageConsumedInGBs) | extend Dummy = 1) on Dummy == Dummy \r\n| join (LatestJobTableBasedOnBackupItem | where JobUniqueId != \"\" | summarize dcount(JobUniqueId) | extend Dummy = 1) on Dummy == Dummy \r\n| join (LatestProtectedInstanceTable | summarize sum(ProtectedInstanceCount) | extend Dummy = 1) on Dummy == Dummy \r\n| join (LatestAlertTableBasedOnBackupItem | where AlertUniqueId != \"\" | summarize dcount(AlertUniqueId) | extend Dummy = 1) on Dummy == Dummy \r\n| extend  Key = pack_array( \"BackupItems\", \"Protected Instances\",  \"Vault Storage (GB)\", \"Jobs Created\", \"Alerts Created\"), Value = pack_array( Count, sum_ProtectedInstanceCount, sum_StorageConsumedInGBs, dcount_JobUniqueId, dcount_AlertUniqueId), \r\nSubTitle = pack_array( \"\", \"\", \"\", \"\", \"\")\r\n| project Key, Value, SubTitle \r\n| mvexpand Key, Value, SubTitle",
        "size": 4,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Key",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "subtitleContent": {
            "columnMatch": "SubTitle",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatter": 12,
            "formatOptions": {
              "showIcon": true
            }
          },
          "showBorder": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Summary"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Summary"
      },
      "showPin": true,
      "name": "Summary-first"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "661ed0ad-cc20-4c62-b6c1-5668e6e2f692",
            "version": "KqlParameterItem/1.0",
            "name": "P1",
            "type": 1,
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.insights/components"
      },
      "name": "parameters - 10",
      "styleSettings": {
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">Key Parameters by BackupItem Type </span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Summary"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Summary"
      },
      "customWidth": "100",
      "name": "text - 16",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%"
      }
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "nav",
        "links": [
          {
            "cellValue": "{\"01) BackupItem Type\": \"Type of item being backed up, in format BackupManagement Type/BackupItem Type\", \"02) Backup Items\": \"Number of BackupItems associated with the BackupItem Type, as of the end of the selected period\", \"03) Job Success %\": \"% of jobs created in the selected period that succesfully completed. Data for log backup jobs are not shown in these reports\", \"04) Failed Jobs Trend\": \"Number of jobs that failed on each day in the selected period\", \"05) Active Alerts %\": \"% of Alerts created in the given period that are currently active\", \"06) Cloud Storage (GB)\": \"Total Cloud Storage consumed, as of the end of the selected period\", \"07) Cloud Storage Trend\":\"Amount of incremental cloud storage consumed on each day of the selected period\"}",
            "linkTarget": "CellDetails",
            "linkLabel": "ⓘ",
            "style": "link",
            "linkIsContextBlade": true
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Summary"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Summary"
      },
      "customWidth": "0",
      "name": "links - 15"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet RangeStartDay = startofday({TimeRange:start});\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet interval = 1d;\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend TimeRangeEndDay = startofday(TimeGenerated) \r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend TimeRangeEndDay = startofday(TimeGenerated) \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\r\n{\r\n let ProtectedInstanceTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedInstance\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), ProtectedInstanceCount = toint(columnifexists(\"ProtectedInstanceCount_s\", \"\"))\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderResourceSpecific = (isProtectedContainerBillingType:bool)\r\n{\r\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \r\n| where OperationName == \"ProtectedInstance\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet TotalProtectedInstanceTable = (isProtectedContainerBillingType:bool) \r\n{CombinedTable | union isfuzzy = true \r\n(ProtectedInstanceUnderAzureDiagnostics(isProtectedContainerBillingType) \r\n| extend BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\")),\r\n(ProtectedInstanceUnderResourceSpecific(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Exclude Log Jobs\r\n| extend JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\")\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n| extend JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\")\r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid)\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Exclude Log Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet AlertUnderAzureDiagnostics = ()\r\n{\r\nlet AlertTable = AzureDiagnostics \r\n| where TimeGenerated  >= RangeStart\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Alert\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| extend AlertUniqueIdGuid = columnifexists(\"AlertUniqueId_g\", \"\") , AlertUniqueIdStr = columnifexists(\"AlertUniqueId_s\", \"\")\r\n| extend AlertUniqueId = iff(AlertUniqueIdGuid == \"\", AlertUniqueIdStr, AlertUniqueIdGuid)\r\n| extend AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n| where AlertOccurrenceDateTime >= RangeStart and AlertOccurrenceDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by AlertUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   AlertTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet AlertUnderResourceSpecific = ()\r\n{\r\nlet AlertTable = AddonAzureBackupAlerts \r\n| where OperationName == \"Alert\" \r\n// Take records until previous day\r\n| where TimeGenerated  >= RangeStart\r\n| extend TimeRangeEndDay = TimeGenerated\r\n| where AlertOccurrenceDateTime >= RangeStart and AlertOccurrenceDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by AlertUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   AlertTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = materialize(CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()\r\n| project BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), \r\nBackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\",\"\"), BackupItemUniqueId, TimeGenerated),\r\n(BackupItemUnderResourceSpecific())\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where BackupItemUniqueId != \"\"\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| project BackupItemUniqueId, BMSTypeWithBackupItemType);\r\nlet LatestBackupItemAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= leftouter\r\n(CombinedTable | union isfuzzy = true  \r\n(StorageAssociationUnderAzureDiagnostics | project StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")), BackupItemUniqueId, TimeGenerated),\r\n(StorageAssociationUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| summarize StorageConsumedInGBs = sum(StorageConsumedInMBs)/(1024 * 1024) by BMSTypeWithBackupItemType};\r\nlet LatestBackupItemAndStorageConsumptionHistoryTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= leftouter\r\n(CombinedTable | union isfuzzy = true  \r\n(StorageAssociationHistoryUnderAzureDiagnostics() | project StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")), BackupItemUniqueId, TimeGenerated, TimeRangeEndDay),\r\n(StorageAssociationHistoryUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\nLatestBackupItemDimensionTable\r\n| join kind= leftouter \r\n(CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), JobStatus = columnifexists(\"JobStatus_s\", \"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\", \"\"),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\", \"\")), JobDurationInSec = todouble(columnifexists(\"JobDurationInSecs_s\", \"\"))\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet LatestAlertTableBasedOnBackupItem = (){\r\nLatestBackupItemDimensionTable\r\n| join kind= leftouter \r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderAzureDiagnostics()\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus = columnifexists(\"AlertStatus_s\", \"\")\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(AlertUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, AlertUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet ActiveAlertPercentageTable = ()\r\n{ \r\nLatestAlertTableBasedOnBackupItem\r\n// Calculate percentage\r\n| extend active=iff(AlertStatus == \"Active\" , 1 , 0)\r\n| extend record = iff(AlertUniqueId != \"\", 1, 0)  // to be used for total row count\r\n| summarize ActiveCount =sum(active), TotalCount=sum(record) by BMSTypeWithBackupItemType\r\n| extend ActiveAlertPercentage = (ActiveCount*100)/todouble(TotalCount)\r\n};\r\nlet JobSuccessPercentageTable = (){\r\nLatestJobTableBasedOnBackupItem\r\n// Calculate percentage\r\n| extend success=iff((JobStatus == \"Completed\" or JobStatus == \"CompletedWithWarnings\") , 1 , 0)\r\n| extend record = iff(JobUniqueId != \"\", 1, 0)  // to be used for total row count\r\n| summarize SuccessfulCount =sum(success), TotalCount=sum(record) by BMSTypeWithBackupItemType\r\n| extend JobSuccessPercentage = (SuccessfulCount*100)/todouble(TotalCount)\r\n};\r\nlet JobFailureTrendTable = () {\r\nLatestJobTableBasedOnBackupItem\r\n// Calculate Failure count\r\n| extend Failed=iff((JobStatus != \"Completed\" and JobStatus != \"CompletedWithWarnings\"), 1 , 0)\r\n| extend record = iff(JobUniqueId != \"\", 1, 0)  // to be used for total row count\r\n| make-series FailureCountSeries = sum(Failed) default=0\r\non TimeGenerated  from RangeStartDay to Today step interval by BMSTypeWithBackupItemType\r\n};\r\nlet CloudStorageTrendTable = ()\r\n{\r\nLatestBackupItemAndStorageConsumptionHistoryTable\r\n| make-series StorageConsumptionSeries = sum(StorageConsumedInMBs) default=0\r\non TimeGenerated  from RangeStartDay to Today step interval by BMSTypeWithBackupItemType\r\n};\r\nLatestBackupItemDimensionTable | summarize dcount(BackupItemUniqueId) by BMSTypeWithBackupItemType \r\n| join kind=leftouter JobSuccessPercentageTable on BMSTypeWithBackupItemType == BMSTypeWithBackupItemType \r\n| join kind=leftouter ActiveAlertPercentageTable on BMSTypeWithBackupItemType == BMSTypeWithBackupItemType \r\n| join kind=leftouter LatestBackupItemAndStorageConsumptionTable on BMSTypeWithBackupItemType == BMSTypeWithBackupItemType \r\n| join kind=leftouter JobFailureTrendTable on BMSTypeWithBackupItemType == BMSTypeWithBackupItemType \r\n| join kind=leftouter CloudStorageTrendTable on BMSTypeWithBackupItemType == BMSTypeWithBackupItemType \r\n| project-away BMSTypeWithBackupItemType1, BMSTypeWithBackupItemType2, BMSTypeWithBackupItemType3, BMSTypeWithBackupItemType4, BMSTypeWithBackupItemType5, TotalCount, TotalCount1, ActiveCount, SuccessfulCount, TimeGenerated, TimeGenerated1\r\n| order by BMSTypeWithBackupItemType asc",
        "size": 3,
        "exportFieldName": "BMSTypeWithBackupItemType",
        "exportParameterName": "BMSTypeWithBackupItemType",
        "exportDefaultValue": "*",
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "BMSTypeWithBackupItemType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "dcount_BackupItemUniqueId",
              "formatter": 1,
              "formatOptions": {
                "linkTarget": "WorkbookTemplate",
                "showIcon": true,
                "workbookContext": {
                  "componentIdSource": "workbook",
                  "resourceIdsSource": "workbook",
                  "templateIdSource": "static",
                  "templateId": "Community-Workbooks/Azure Backup/Storage",
                  "typeSource": "default",
                  "gallerySource": "static",
                  "gallery": "Azure Monitor"
                }
              }
            },
            {
              "columnMatch": "JobSuccessPercentage",
              "formatter": 18,
              "formatOptions": {
                "linkTarget": "WorkbookTemplate",
                "showIcon": true,
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": null,
                    "text": "{0}{1}"
                  }
                ],
                "workbookContext": {
                  "componentIdSource": "workbook",
                  "resourceIdsSource": "workbook",
                  "templateIdSource": "static",
                  "templateId": "Community-Workbooks/Azure Backup/Job DistributionCommunity-Workbooks/Azure Backup/Job Distribution",
                  "typeSource": "default",
                  "gallerySource": "static",
                  "gallery": "Azure Monitor"
                }
              },
              "numberFormat": {
                "unit": 1,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "ActiveAlertPercentage",
              "formatter": 18,
              "formatOptions": {
                "linkTarget": "WorkbookTemplate",
                "showIcon": true,
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ],
                "workbookContext": {
                  "componentIdSource": "workbook",
                  "resourceIdsSource": "workbook",
                  "templateIdSource": "static",
                  "templateId": "Community-Workbooks/Azure Backup/Alert Distribution",
                  "typeSource": "default",
                  "gallerySource": "static",
                  "gallery": "Azure Monitor"
                }
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "StorageConsumedInGBs",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 4
                }
              }
            },
            {
              "columnMatch": "FailureCountSeries",
              "formatter": 10,
              "formatOptions": {
                "palette": "orange",
                "showIcon": true
              }
            },
            {
              "columnMatch": "StorageConsumptionSeries",
              "formatter": 9,
              "formatOptions": {
                "palette": "orange",
                "showIcon": true
              }
            },
            {
              "columnMatch": "TimeGenerated",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "TimeGenerated1",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "sum_ProtectedInstanceCount",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "BMSTypeWithBackupItemType",
              "label": "BackupItem Type"
            },
            {
              "columnId": "dcount_BackupItemUniqueId",
              "label": "BackupItems"
            },
            {
              "columnId": "JobSuccessPercentage",
              "label": "Job Success %"
            },
            {
              "columnId": "ActiveAlertPercentage",
              "label": "Active Alerts %"
            },
            {
              "columnId": "StorageConsumedInGBs",
              "label": "Vault Storage (GB)"
            },
            {
              "columnId": "FailureCountSeries",
              "label": "Trend of Failed Jobs"
            },
            {
              "columnId": "StorageConsumptionSeries",
              "label": "Trend of Vault Storage Consumed"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Summary"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Summary"
      },
      "showPin": true,
      "name": "Summary - last",
      "styleSettings": {
        "margin": "-30px 0% 0% 0%",
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()\r\n| project BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), \r\nBackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\",\"\"), BackupItemUniqueId, TimeGenerated),\r\n(BackupItemUnderResourceSpecific())\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where BackupItemUniqueId != \"\"\r\n| summarize count(BackupItemUniqueId) by BackupItemProtectionState};\r\nLatestBackupItemDimensionTable",
        "size": 4,
        "exportFieldName": "BackupItemProtectionState",
        "exportParameterName": "BackupItemProtectionState",
        "exportDefaultValue": "*",
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "BackupItemProtectionState",
            "formatOptions": {
              "showIcon": true
            }
          },
          "subtitleContent": {
            "columnMatch": "SubTitle",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "count_BackupItemUniqueId",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto",
              "showIcon": true
            }
          },
          "showBorder": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "showPin": true,
      "name": "BackupItems - first"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">BackupItems and Storage by Policy</span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "name": "text - 19",
      "styleSettings": {
        "margin": "0% 0% 10px 0%"
      }
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "nav",
        "links": [
          {
            "cellValue": "{\"01) Policy\":\"Name of the backup policy\", \"02) Vault\":\"Vault associated with the given policy\", \"03) Vault Storage (MB)\":\"Total backend storage consumed by all items being backed up according to the given policy (as on end of selected period)\", \"04) #BackupItems\":\"Number of items being backed up according to the given policy (as on end of selected period)\" }",
            "linkTarget": "CellDetails",
            "linkLabel": "ⓘ",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "customWidth": "0",
      "name": "links - 18"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "a29464c3-34f0-4d60-82bb-614b8128b7f9",
            "version": "KqlParameterItem/1.0",
            "name": "PolicyName",
            "label": "Search by Policy Name",
            "type": 1,
            "description": "Search by Policy Name",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "5dc2a074-b510-44f2-9530-cfcbd159b59c",
            "version": "KqlParameterItem/1.0",
            "name": "BillingMetricSortBy",
            "label": "Sort By",
            "type": 2,
            "description": "Sort by a certain column",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{ \"value\": \"count_BackupItemUniqueId\", \"label\": \"# BackupItems\" },\r\n{ \"value\": \"sum_StorageConsumedInMBs\", \"label\": \"Vault Storage (MB)\", \"selected\": \"true\" }]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "df3cc03c-53f7-4523-a29b-e50bf1b6d922",
            "version": "KqlParameterItem/1.0",
            "name": "BillingMetricOrder",
            "label": "Order",
            "type": 2,
            "description": "Sort Order",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"Ascending\"},\r\n    { \"value\":\"Descending\", \"selected\":true}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "44b4c590-ecc4-4d3d-840e-16c4638000d4",
            "version": "KqlParameterItem/1.0",
            "name": "StorageMetricRowsPerGrid",
            "label": "Items per page",
            "type": 2,
            "description": "Number of rows on each page (max 500)",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "90478836-8cb6-4235-98a0-7724ac01d29a",
            "version": "KqlParameterItem/1.0",
            "name": "StorageMetricPageNumber",
            "label": "Page Number",
            "type": 2,
            "description": "Page Number",
            "isRequired": true,
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType, BackupItemProtectionState, PolicyName\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyTableUnderAzureDiagnostics = ()\r\n{\r\n let PolicyTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"Policy\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), ResourceId, TimeGenerated\r\n| extend PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid)\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId, ResourceId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyTableUnderResourceSpecific = ()\r\n{\r\n let PolicyTable = AddonAzureBackupPolicy \r\n| where OperationName == \"Policy\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project PolicyUniqueId, PolicyName, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId, ResourceId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()\r\n| project BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), \r\nBackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\",\"\"), BackupItemUniqueId, TimeGenerated, ResourceId),\r\n(BackupItemUnderResourceSpecific())\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where BackupItemUniqueId != \"\"\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics |  project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupItemUniqueId, BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), \r\n    PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\"), TimeGenerated, ResourceId\r\n    | extend PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid) | project-away PolicyUniqueIdGuid, PolicyUniqueIdStr \r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyTableUnderAzureDiagnostics ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= fullouter (\r\n   StorageAssociationUnderAzureDiagnostics | project StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")), BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyTableUnderResourceSpecific ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= fullouter (\r\n   StorageAssociationUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= rightouter\r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| extend ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName)\r\n| distinct BackupItemUniqueId, ContainerNameWithBackupItemName, BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, \r\nBMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, PolicyName, ResourceId\r\n};\r\nlet StorageMetric = () {LatestBackupItemAssociationAndStorageConsumptionTable\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemProtectionState in (@\"{BackupItemProtectionState}\") or '*' in (@\"{BackupItemProtectionState}\")\r\n| where PolicyName contains (@\"{PolicyName}\") or '*' in (@\"{PolicyName}\")\r\n| extend PolicyLink = strcat(ResourceId, \"/backupPolicies/\", PolicyName)\r\n| summarize sum(BackupItemFrontEndSize), sum(StorageConsumedInMBs), count(BackupItemUniqueId) by PolicyName, ResourceId, PolicyLink\r\n}; \r\nlet TableCount = StorageMetric\r\n| summarize c=count();\r\nlet PageEnd = (toscalar(TableCount)-1)/{StorageMetricRowsPerGrid} + 1;\r\nrange pages from 1 to PageEnd step 1",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "customWidth": "90",
      "name": "parameters - 7",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType, BackupItemProtectionState, PolicyName\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyTableUnderAzureDiagnostics = ()\r\n{\r\n let PolicyTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"Policy\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), ResourceId, TimeGenerated\r\n| extend PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid)\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId, ResourceId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyTableUnderResourceSpecific = ()\r\n{\r\n let PolicyTable = AddonAzureBackupPolicy \r\n| where OperationName == \"Policy\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project PolicyUniqueId, PolicyName, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId, ResourceId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()\r\n| project BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), \r\nBackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\",\"\"), BackupItemUniqueId, TimeGenerated, ResourceId),\r\n(BackupItemUnderResourceSpecific())\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where BackupItemUniqueId != \"\"\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics |  project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupItemUniqueId, BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), \r\n    PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\"), TimeGenerated, ResourceId\r\n    | extend PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid) | project-away PolicyUniqueIdGuid, PolicyUniqueIdStr \r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyTableUnderAzureDiagnostics ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= fullouter (\r\n   StorageAssociationUnderAzureDiagnostics | project StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")), BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyTableUnderResourceSpecific ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= fullouter (\r\n   StorageAssociationUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= rightouter\r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| extend ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName)\r\n| distinct BackupItemUniqueId, ContainerNameWithBackupItemName, BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, \r\nBMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, PolicyName, ResourceId\r\n};\r\nLatestBackupItemAssociationAndStorageConsumptionTable\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemProtectionState in (@\"{BackupItemProtectionState}\") or '*' in (@\"{BackupItemProtectionState}\")\r\n| where PolicyName contains (@\"{PolicyName}\") or '*' in (@\"{PolicyName}\")\r\n| extend PolicyLink = strcat(ResourceId, \"/backupPolicies/\", PolicyName)\r\n| summarize sum(BackupItemFrontEndSize), sum(StorageConsumedInMBs), count(BackupItemUniqueId) by PolicyName, ResourceId, PolicyLink \r\n| extend TempColumn = column_ifexists(tostring('{BillingMetricSortBy}'), \"sum_StorageConsumedInMBs\")\r\n| extend ColumnToBeSorted = iff(tostring('{BillingMetricOrder}') == \"Ascending\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\r\n| sort by ColumnToBeSorted asc nulls last\r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/{StorageMetricRowsPerGrid} + 1))\r\n| where page_num has ('{StorageMetricPageNumber}') or '*' in ('{StorageMetricPageNumber}')",
        "size": 3,
        "exportFieldName": "PolicyLink",
        "exportParameterName": "SelectedPolicyLink",
        "exportDefaultValue": "*",
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "PolicyName",
              "formatter": 16,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "ResourceId",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "PolicyLink",
              "formatter": 5,
              "formatOptions": {
                "linkColumn": "PolicyLink",
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "sum_BackupItemFrontEndSize",
              "formatter": 5,
              "formatOptions": {
                "min": 0,
                "palette": "orange",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "sum_StorageConsumedInMB",
              "formatter": 1,
              "formatOptions": {
                "min": 0,
                "palette": "orange",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "count_BackupItemUniqueId",
              "formatter": 1,
              "formatOptions": {
                "min": 0,
                "palette": "orange",
                "showIcon": true
              }
            },
            {
              "columnMatch": "TempColumn",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ColumnToBeSorted",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "row_num",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "page_num",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "PolicyName",
              "label": "Policy"
            },
            {
              "columnId": "ResourceId",
              "label": "Vault "
            },
            {
              "columnId": "PolicyLink"
            },
            {
              "columnId": "sum_BackupItemFrontEndSize",
              "label": "Front End Storage (MB)"
            },
            {
              "columnId": "sum_StorageConsumedInMBs",
              "label": "Vault Storage (MB)"
            },
            {
              "columnId": "count_BackupItemUniqueId",
              "label": "# BackupItems"
            },
            {
              "columnId": "TempColumn",
              "label": "TempColumn"
            },
            {
              "columnId": "ColumnToBeSorted",
              "label": "ColumnToBeSorted"
            },
            {
              "columnId": "row_num"
            },
            {
              "columnId": "page_num"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "showPin": true,
      "name": "query - 11",
      "styleSettings": {
        "margin": "-30px 0% 0% 0%",
        "showBorder": true
      }
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">Storage by BackupItem</span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "name": "text - 23",
      "styleSettings": {
        "margin": "0% 0% 10px 0%"
      }
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "nav",
        "links": [
          {
            "cellValue": " {\"01) BackupItem Name\":\"Name of the BackupItem\", \"02) BackupItem Type\":\"Type of the BackupItem\", \"03) Vault Storage (MB)\":\"Total backend storage consumed by the BackupItem (as on end of selected period)\" , \"04) Policy\":\"Backup policy associated with the BackupItem\" }",
            "linkTarget": "CellDetails",
            "linkLabel": "ⓘ",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "customWidth": "0",
      "name": "links - 21"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "2520d604-c6eb-48f8-aac4-665294faae82",
            "version": "KqlParameterItem/1.0",
            "name": "ContainerNameWithBackupItemNameInStorage",
            "label": "Search Backup Item Name",
            "type": 1,
            "value": "",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "7bb4a71d-d932-4737-8715-d378be7ffba5",
            "version": "KqlParameterItem/1.0",
            "name": "BillingMetricSortBy2",
            "label": "Sort By:",
            "type": 2,
            "isRequired": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"[\\r\\n{ \\\"value\\\": \\\"StorageConsumedInMBs\\\", \\\"label\\\": \\\"Cloud Storage (MB)\\\", \\\"selected\\\": \\\"true\\\" }]\"}",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 8,
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "595e5629-4f64-4038-bff5-5f3371259caa",
            "version": "KqlParameterItem/1.0",
            "name": "BillingMetricOrder2",
            "label": "Order:",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"Ascending\"},\r\n    { \"value\":\"Descending\", \"selected\":true}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "0e4b3406-91aa-452e-90b2-6b22e71f0b82",
            "version": "KqlParameterItem/1.0",
            "name": "StorageMetricRowsPerGrid2",
            "label": "Rows per Grid:",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "d1b7fe67-8c02-431c-904c-f82238dd112e",
            "version": "KqlParameterItem/1.0",
            "name": "StorageMetricPageNumber2",
            "label": "Page:",
            "type": 2,
            "isRequired": true,
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType, BackupItemProtectionState, PolicyName\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyTableUnderAzureDiagnostics = ()\r\n{\r\n let PolicyTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"Policy\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), ResourceId, TimeGenerated\r\n| extend PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid)\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId, ResourceId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyTableUnderResourceSpecific = ()\r\n{\r\n let PolicyTable = AddonAzureBackupPolicy \r\n| where OperationName == \"Policy\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project PolicyUniqueId, PolicyName, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId, ResourceId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()\r\n| project BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), \r\nBackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\",\"\"), BackupItemUniqueId, TimeGenerated, ResourceId),\r\n(BackupItemUnderResourceSpecific())\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where BackupItemUniqueId != \"\"\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics |  project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupItemUniqueId, BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), \r\n    PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\"), TimeGenerated, ResourceId\r\n    | extend PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid) | project-away PolicyUniqueIdGuid, PolicyUniqueIdStr \r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyTableUnderAzureDiagnostics ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= fullouter (\r\n   StorageAssociationUnderAzureDiagnostics | project StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")), BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyTableUnderResourceSpecific ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= fullouter (\r\n   StorageAssociationUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= rightouter\r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| extend ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName)\r\n| distinct BackupItemUniqueId, ContainerNameWithBackupItemName, BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, \r\nBMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, PolicyName, ResourceId\r\n};\r\nlet StorageMetric = () {LatestBackupItemAssociationAndStorageConsumptionTable\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemProtectionState in (@\"{BackupItemProtectionState}\") or '*' in (@\"{BackupItemProtectionState}\")\r\n| extend PolicyLink = strcat(ResourceId, \"/backupPolicies/\", PolicyName)\r\n| where PolicyLink == (@\"{SelectedPolicyLink}\") or '*' in (@\"{SelectedPolicyLink}\")\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemNameInStorage}\") or '*' in (@\"{ContainerNameWithBackupItemNameInStorage}\")\r\n| summarize by ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, BackupItemFrontEndSize, StorageConsumedInMBs, PolicyName, ResourceId, PolicyLink, ProtectedContainerName, BackupItemUniqueId}; \r\nlet TableCount = StorageMetric\r\n| summarize c=count();\r\nlet PageEnd = (toscalar(TableCount)-1)/{StorageMetricRowsPerGrid2} + 1;\r\nrange pages from 1 to PageEnd step 1",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 8,
        "resourceType": "microsoft.insights/components"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "customWidth": "90",
      "name": "parameters - 12",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType, BackupItemProtectionState, PolicyName\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyTableUnderAzureDiagnostics = ()\r\n{\r\n let PolicyTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"Policy\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), ResourceId, TimeGenerated\r\n| extend PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid)\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId, ResourceId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyTableUnderResourceSpecific = ()\r\n{\r\n let PolicyTable = AddonAzureBackupPolicy \r\n| where OperationName == \"Policy\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project PolicyUniqueId, PolicyName, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId, ResourceId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()\r\n| project BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), \r\nBackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\",\"\"), BackupItemUniqueId, TimeGenerated, ResourceId),\r\n(BackupItemUnderResourceSpecific())\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where BackupItemUniqueId != \"\"\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics |  project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupItemUniqueId, BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), \r\n    PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\"), TimeGenerated, ResourceId\r\n    | extend PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid) | project-away PolicyUniqueIdGuid, PolicyUniqueIdStr \r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyTableUnderAzureDiagnostics ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= fullouter (\r\n   StorageAssociationUnderAzureDiagnostics | project StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")), BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyTableUnderResourceSpecific ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= fullouter (\r\n   StorageAssociationUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= rightouter\r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| extend ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName)\r\n| distinct BackupItemUniqueId, ContainerNameWithBackupItemName, BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, \r\nBMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, PolicyName, ResourceId\r\n};\r\nLatestBackupItemAssociationAndStorageConsumptionTable\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemProtectionState in (@\"{BackupItemProtectionState}\") or '*' in (@\"{BackupItemProtectionState}\")\r\n| extend PolicyLink = strcat(ResourceId, \"/backupPolicies/\", PolicyName)\r\n| where PolicyLink == (@\"{SelectedPolicyLink}\") or '*' in (@\"{SelectedPolicyLink}\")\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemNameInStorage}\") or '*' in (@\"{ContainerNameWithBackupItemNameInStorage}\")\r\n| summarize by ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, BackupItemFrontEndSize, StorageConsumedInMBs, PolicyName, ResourceId, PolicyLink, ProtectedContainerName, BackupItemUniqueId  \r\n| extend TempColumn = column_ifexists(tostring('{BillingMetricSortBy2}'), \"StorageConsumedInMBs\")\r\n| extend ColumnToBeSorted = iff(tostring('{BillingMetricOrder2}') == \"Ascending\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\r\n| sort by ColumnToBeSorted asc nulls last\r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/{StorageMetricRowsPerGrid2} + 1))\r\n| where page_num has ('{StorageMetricPageNumber2}') or '*' in ('{StorageMetricPageNumber2}')\r\n| extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\r\n| extend contianerName = iff((split(ContainerNameWithBackupItemName, \"/\")[0] != \"\" and array_length(split((split(ContainerNameWithBackupItemName, \"/\")[0]),\";\")) == 3), split(ContainerNameWithBackupItemName,\"/\")[0], \"\")\r\n| extend rgName = iff(contianerName != \"\", split(contianerName,\";\")[1], \"\")\r\n| extend entityName = iff(contianerName != \"\", split(contianerName,\";\")[2], \"\")\r\n| extend entityType = iff(contianerName != \"\", split(contianerName,\";\")[0], \"\")\r\n| extend entityTypeForAzureStorageUrl = iff(BMSTypeWithBackupItemType == \"AzureStorage/AzureFileShare\", iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), \"\")\r\n| extend entityTypeForIaaSVMUrl = iff(BMSTypeWithBackupItemType == \"IaaSVM/VM\", iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend entityTypeForAzureWorkloadUrl = iff((BMSTypeWithBackupItemType == \"AzureWorkload/SAPHanaDatabase\" or BMSTypeWithBackupItemType == \"AzureWorkload/SQLDataBase\"), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend finalUrl = iff(contianerName != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId)\r\n| project-away prefix, contianerName, rgName, entityName, entityTypeForAzureStorageUrl, entityTypeForAzureWorkloadUrl, entityTypeForIaaSVMUrl, entityType",
        "size": 3,
        "exportFieldName": "BackupItemUniqueId",
        "exportParameterName": "SelectedBackupItemUniqueId",
        "exportDefaultValue": "*",
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "ContainerNameWithBackupItemName",
              "formatter": 16,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "BMSTypeWithBackupItemType",
              "formatter": 13,
              "formatOptions": {
                "linkColumn": "finalUrl",
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "BackupItemFrontEndSize",
              "formatter": 5,
              "formatOptions": {
                "min": 0,
                "palette": "orange",
                "showIcon": true
              }
            },
            {
              "columnMatch": "StorageConsumedInMB",
              "formatter": 1,
              "formatOptions": {
                "min": 0,
                "palette": "orange",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "PolicyName",
              "formatter": 16,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "ResourceId",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "PolicyLink",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ProtectedContainerName",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "BackupItemUniqueId",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "TempColumn",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ColumnToBeSorted",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "row_num",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "page_num",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "finalUrl",
              "formatter": 5,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "ContainerNameWithBackupItemName",
              "label": "BackupItem Name"
            },
            {
              "columnId": "BMSTypeWithBackupItemType",
              "label": "BackupItem Type"
            },
            {
              "columnId": "BackupItemFrontEndSize",
              "label": "Front End Storage (MB)"
            },
            {
              "columnId": "StorageConsumedInMBs",
              "label": "Vault Storage (MB)"
            },
            {
              "columnId": "PolicyName",
              "label": "Policy"
            },
            {
              "columnId": "ResourceId",
              "label": "ResourceId"
            },
            {
              "columnId": "PolicyLink"
            },
            {
              "columnId": "ProtectedContainerName"
            },
            {
              "columnId": "BackupItemUniqueId"
            },
            {
              "columnId": "TempColumn",
              "label": "TempColumn"
            },
            {
              "columnId": "ColumnToBeSorted",
              "label": "ColumnToBeSorted"
            },
            {
              "columnId": "row_num"
            },
            {
              "columnId": "page_num"
            },
            {
              "columnId": "finalUrl",
              "label": "finalUrl"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "showPin": true,
      "name": "query - 10",
      "styleSettings": {
        "margin": "-30px 0% 0% 0%",
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType, BackupItemProtectionState, BillingEntityName\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend TimeRangeEndDay = startofday(TimeGenerated)\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend TimeRangeEndDay = startofday(TimeGenerated)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend TimeRangeEndDay = startofday(TimeGenerated)\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend TimeRangeEndDay = startofday(TimeGenerated)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend TimeRangeEndDay = startofday(TimeGenerated)\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend TimeRangeEndDay = startofday(TimeGenerated)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\")\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceHistoryUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\r\n{\r\n let ProtectedInstanceTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedInstance\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend TimeRangeEndDay = startofday(TimeGenerated)\r\n| extend BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), ProtectedInstanceCount = toint(columnifexists(\"ProtectedInstanceCount_s\", \"\"))\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceHistoryUnderResourceSpecific = (isProtectedContainerBillingType:bool)\r\n{\r\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \r\n| where OperationName == \"ProtectedInstance\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| extend TimeRangeEndDay = startofday(TimeGenerated)\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet TotalProtectedInstanceHistoryTable = (isProtectedContainerBillingType:bool) \r\n{CombinedTable | union isfuzzy = true \r\n(ProtectedInstanceHistoryUnderAzureDiagnostics(isProtectedContainerBillingType) \r\n| extend BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\")),\r\n(ProtectedInstanceHistoryUnderResourceSpecific(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType, TimeRangeEndDay\r\n};\r\nlet PolicyTableUnderAzureDiagnostics = ()\r\n{\r\n let PolicyTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"Policy\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), ResourceId, TimeGenerated\r\n| extend PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid)\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId, ResourceId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyTableUnderResourceSpecific = ()\r\n{\r\n let PolicyTable = AddonAzureBackupPolicy \r\n| where OperationName == \"Policy\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project PolicyUniqueId, PolicyName, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId, ResourceId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()\r\n| project BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), \r\nBackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\",\"\"), BackupItemUniqueId, TimeGenerated),\r\n(BackupItemUnderResourceSpecific())\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where BackupItemUniqueId != \"\"\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType, BackupItemProtectionState};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerUniqueId | distinct ProtectedContainerName, ProtectedContainerUniqueId\r\n| join kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupItemUniqueId, BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), \r\n    PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\"), TimeGenerated, TimeRangeEndDay, ResourceId\r\n    | extend PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid) | project-away PolicyUniqueIdGuid, PolicyUniqueIdStr \r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyTableUnderAzureDiagnostics ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId \r\n | join kind= fullouter (\r\n   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics | project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId, TimeGenerated, TimeRangeEndDay \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project TimeGenerated = TimeGenerated2, TimeRangeEndDay = TimeRangeEndDay1, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ResourceId, ProtectedContainerName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join kind= fullouter (\r\n   StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")), BackupItemUniqueId, TimeGenerated, TimeRangeEndDay\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated = iff(isempty(TimeGenerated1), TimeGenerated, TimeGenerated1), TimeRangeEndDay = iff(isempty(TimeRangeEndDay1), TimeRangeEndDay, TimeRangeEndDay1), BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ResourceId, ProtectedContainerName, ProtectedContainerUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs\r\n};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerName, ProtectedContainerUniqueId, TimeGenerated, TimeRangeEndDay \r\n| join kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyTableUnderResourceSpecific ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId \r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n | project TimeGenerated = TimeGenerated2, TimeRangeEndDay = TimeRangeEndDay1, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ResourceId, ProtectedContainerName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join kind= fullouter (\r\n   StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated = iff(isempty(TimeGenerated1), TimeGenerated, TimeGenerated1), TimeRangeEndDay = iff(isempty(TimeRangeEndDay1), TimeRangeEndDay, TimeRangeEndDay1), BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ResourceId, ProtectedContainerName, ProtectedContainerUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs\r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= rightouter\r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| extend ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName)\r\n};\r\nlet LatestBackupItemHistoryInfoTable = (){\r\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable | summarize arg_max(TimeGenerated,  ContainerNameWithBackupItemName, BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId, PolicyName, ProtectedContainerUniqueId, ProtectedContainerName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, ResourceId) by BackupItemUniqueId, TimeRangeEndDay\r\n};\r\nlet StorageHistoryMetric = ()\r\n{\r\nLatestBackupItemHistoryInfoTable\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemProtectionState in (@\"{BackupItemProtectionState}\") or '*' in (@\"{BackupItemProtectionState}\")\r\n| extend PolicyLink = strcat(ResourceId, \"/backupPolicies/\", PolicyName)\r\n| where PolicyLink == (@\"{SelectedPolicyLink}\") or '*' in (@\"{SelectedPolicyLink}\")\r\n| where BackupItemUniqueId == (@\"{SelectedBackupItemUniqueId}\") or '*' in (@\"{SelectedBackupItemUniqueId}\")\r\n};\r\nStorageHistoryMetric\r\n| summarize StorageConsumedInMBs = sum(StorageConsumedInMBs) by  TimeRangeEndDay",
        "size": 0,
        "aggregation": 5,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "title": "Vault Storage Trend",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "linechart"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "customWidth": "100",
      "showPin": true,
      "name": "BackupItems - last"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">Protected Instances and Storage by Billing Entity </span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Usage"
      },
      "name": "Protinst - first",
      "styleSettings": {
        "margin": "0% 0% 10px 0%"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "5eda7bfb-4a33-463c-a156-5b1a687cfdb2",
            "version": "KqlParameterItem/1.0",
            "name": "BackupItemProtectionState",
            "type": 1,
            "query": "print '*'",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 15"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "nav",
        "links": [
          {
            "cellValue": "{\"01) Billing Entity Name\": \"Name of the Billing Entity\",  \"02) Billing Entity Type\": \"Whether the Billing Entity is a ProtectedContainer or BackupItem\", \"03) Backup Management Type\": \"Backup Management Type associated with the Billing Entity\", \"04) # Protected Instances\": \"Number of Protected Instances associated with the Billing Entity\", \"05) Cloud Storage (MB)\": \"Total backed storage consumed by the Billing Entity\"}",
            "linkTarget": "CellDetails",
            "linkLabel": "ⓘ",
            "style": "link",
            "linkIsContextBlade": true
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Usage"
      },
      "customWidth": "0",
      "name": "links - 15"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "a29464c3-34f0-4d60-82bb-614b8128b7f9",
            "version": "KqlParameterItem/1.0",
            "name": "BillingEntityName",
            "label": "Search by Billing Entity Name",
            "type": 1,
            "description": "Search by Billing Entity Name",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "5dc2a074-b510-44f2-9530-cfcbd159b59c",
            "version": "KqlParameterItem/1.0",
            "name": "ProtectedInstanceMetricSortBy",
            "label": "Sort By",
            "type": 2,
            "description": "Sort by a certian column",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{ \"value\": \"ProtectedInstanceCount\", \"label\": \"# Protected Instances\" },\r\n{ \"value\": \"sum_StorageConsumedInMBs\", \"label\": \"Vault Storage (MB)\", \"selected\": \"true\" }]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "df3cc03c-53f7-4523-a29b-e50bf1b6d922",
            "version": "KqlParameterItem/1.0",
            "name": "ProtectedInstanceMetricOrder",
            "label": "Order",
            "type": 2,
            "description": "Sort Order",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"Ascending\"},\r\n    { \"value\":\"Descending\", \"selected\":true}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "102bf69d-4952-4a1f-827d-fd726a82d666",
            "version": "KqlParameterItem/1.0",
            "name": "ProtectedInstanceMetricRowsPerGrid",
            "label": "Items per page",
            "type": 2,
            "description": "Number of rows on each page (max 500)",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "f4433681-963d-4204-867c-c54c6c89d3f8",
            "version": "KqlParameterItem/1.0",
            "name": "ProtectedInstanceMetricPageNumber",
            "label": "Page Number",
            "type": 2,
            "description": "Page Number",
            "isRequired": true,
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType, BackupItemProtectionState, BillingEntityName\r\n// Time variable used\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\r\n{\r\n let ProtectedInstanceTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedInstance\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),\r\n ProtectedInstanceCount = toint(columnifexists(\"ProtectedInstanceCount_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderResourceSpecific = (isProtectedContainerBillingType:bool)\r\n{\r\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \r\n| where OperationName == \"ProtectedInstance\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet TotalProtectedInstanceTable = (isProtectedContainerBillingType:bool) \r\n{CombinedTable | union isfuzzy = true \r\n(ProtectedInstanceUnderAzureDiagnostics(isProtectedContainerBillingType)),\r\n(ProtectedInstanceUnderResourceSpecific(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where BackupItemUniqueId != \"\"\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType, BackupItemProtectionState};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics  | distinct ProtectedContainerName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics  |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= fullouter (\r\n   StorageAssociationUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// Take BackupItemUniqueId and TimeGenerated from Storage/FrontEndSize \r\n| project BackupItemUniqueId = iff(isempty(BackupItemUniqueId2), iff(isempty(BackupItemUniqueId1),BackupItemUniqueId,BackupItemUniqueId1), BackupItemUniqueId2),\r\nTimeGenerated  = iff(isempty(TimeGenerated2), iff(isempty(TimeGenerated1),TimeGenerated,TimeGenerated1), TimeGenerated2), ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId \r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific  | distinct ProtectedContainerName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific  |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= fullouter (\r\n   StorageAssociationUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// Take BackupItemUniqueId and TimeGenerated from Storage/FrontEndSize \r\n| project BackupItemUniqueId = iff(isempty(BackupItemUniqueId2), iff(isempty(BackupItemUniqueId1),BackupItemUniqueId,BackupItemUniqueId1), BackupItemUniqueId2),\r\nTimeGenerated  = iff(isempty(TimeGenerated2), iff(isempty(TimeGenerated1),TimeGenerated,TimeGenerated1), TimeGenerated2), ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId   \r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= rightouter\r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| extend ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName)\r\n| distinct BackupItemUniqueId, ContainerNameWithBackupItemName, BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, \r\nBMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemAssociationAndStorageConsumptionTable | distinct BackupItemUniqueId, ContainerNameWithBackupItemName, BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState\r\n};\r\nlet LatestProtectedInstanceTableFromProtectedContainerUniqueId = ()\r\n{ \r\nTotalProtectedInstanceTable(true) \r\n| join kind= leftouter (LatestBackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| extend BillingEntityType = \"ProtectedContainer\", BillingEntityName = ProtectedContainerName, BillingEntityUniqueId = ProtectedContainerUniqueId\r\n};\r\nlet LatestProtectedInstanceTableFromBackupItemUniqueId = ()\r\n{ \r\nTotalProtectedInstanceTable(false) \r\n| join kind= leftouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| extend BillingEntityType = \"BackupItem\", BillingEntityName = ContainerNameWithBackupItemName, BillingEntityUniqueId = BackupItemUniqueId;\r\n};\r\nlet ProtectedInstanceMetric = ( ) \r\n{ union \r\n(LatestProtectedInstanceTableFromProtectedContainerUniqueId()),\r\n(LatestProtectedInstanceTableFromBackupItemUniqueId())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemProtectionState in (@\"{BackupItemProtectionState}\") or '*' in (@\"{BackupItemProtectionState}\")\r\n| where BillingEntityName contains (@\"{BillingEntityName}\") or '*' in ('{BillingEntityName}')\r\n| summarize sum(BackupItemFrontEndSize), sum(StorageConsumedInMBs) by BillingEntityUniqueId, BillingEntityName, BillingEntityType, BackupManagementType, ProtectedInstanceCount\r\n};\r\nlet TableCount = ProtectedInstanceMetric\r\n| summarize c=count();\r\nlet PageEnd = (toscalar(TableCount)-1)/{ProtectedInstanceMetricRowsPerGrid} + 1;\r\nrange pages from 1 to PageEnd step 1",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Usage"
      },
      "customWidth": "90",
      "name": "parameters - 7",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%",
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType, BackupItemProtectionState, BillingEntityName\r\n// Time variable used\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\r\n{\r\n let ProtectedInstanceTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedInstance\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),\r\n ProtectedInstanceCount = toint(columnifexists(\"ProtectedInstanceCount_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderResourceSpecific = (isProtectedContainerBillingType:bool)\r\n{\r\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \r\n| where OperationName == \"ProtectedInstance\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet TotalProtectedInstanceTable = (isProtectedContainerBillingType:bool) \r\n{CombinedTable | union isfuzzy = true \r\n(ProtectedInstanceUnderAzureDiagnostics(isProtectedContainerBillingType)),\r\n(ProtectedInstanceUnderResourceSpecific(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where BackupItemUniqueId != \"\"\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType, BackupItemProtectionState};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics  | distinct ProtectedContainerName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics  |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= fullouter (\r\n   StorageAssociationUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// Take BackupItemUniqueId and TimeGenerated from Storage/FrontEndSize \r\n| project BackupItemUniqueId = iff(isempty(BackupItemUniqueId2), iff(isempty(BackupItemUniqueId1),BackupItemUniqueId,BackupItemUniqueId1), BackupItemUniqueId2),\r\nTimeGenerated  = iff(isempty(TimeGenerated2), iff(isempty(TimeGenerated1),TimeGenerated,TimeGenerated1), TimeGenerated2), ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId \r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific  | distinct ProtectedContainerName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific  |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= fullouter (\r\n   StorageAssociationUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// Take BackupItemUniqueId and TimeGenerated from Storage/FrontEndSize \r\n| project BackupItemUniqueId = iff(isempty(BackupItemUniqueId2), iff(isempty(BackupItemUniqueId1),BackupItemUniqueId,BackupItemUniqueId1), BackupItemUniqueId2),\r\nTimeGenerated  = iff(isempty(TimeGenerated2), iff(isempty(TimeGenerated1),TimeGenerated,TimeGenerated1), TimeGenerated2), ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId   \r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= rightouter\r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| extend ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName)\r\n| distinct BackupItemUniqueId, ContainerNameWithBackupItemName, BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, \r\nBMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemAssociationAndStorageConsumptionTable | distinct BackupItemUniqueId, ContainerNameWithBackupItemName, BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState\r\n};\r\nlet LatestProtectedInstanceTableFromProtectedContainerUniqueId = ()\r\n{ \r\nTotalProtectedInstanceTable(true) \r\n| join kind= leftouter (LatestBackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| extend BillingEntityType = \"ProtectedContainer\", BillingEntityName = ProtectedContainerName, BillingEntityUniqueId = ProtectedContainerUniqueId\r\n};\r\nlet LatestProtectedInstanceTableFromBackupItemUniqueId = ()\r\n{ \r\nTotalProtectedInstanceTable(false) \r\n| join kind= leftouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| extend BillingEntityType = \"BackupItem\", BillingEntityName = ContainerNameWithBackupItemName, BillingEntityUniqueId = BackupItemUniqueId;\r\n};\r\nlet ProtectedInstanceMetric = ( ) \r\n{ union \r\n(LatestProtectedInstanceTableFromProtectedContainerUniqueId()),\r\n(LatestProtectedInstanceTableFromBackupItemUniqueId())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemProtectionState in (@\"{BackupItemProtectionState}\") or '*' in (@\"{BackupItemProtectionState}\")\r\n| where BillingEntityName contains (@\"{BillingEntityName}\") or '*' in ('{BillingEntityName}')\r\n| summarize sum(BackupItemFrontEndSize), sum(StorageConsumedInMBs) by BillingEntityUniqueId, BillingEntityName, BillingEntityType, BackupManagementType, ProtectedInstanceCount\r\n};\r\nProtectedInstanceMetric\r\n| extend TempColumn = column_ifexists(tostring('{ProtectedInstanceMetricSortBy}'), \"sum_StorageConsumedInMBs\")\r\n| extend ColumnToBeSorted = iff(tostring('{ProtectedInstanceMetricOrder}') == \"Ascending\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\r\n| sort by ColumnToBeSorted asc nulls last\r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/{ProtectedInstanceMetricRowsPerGrid} + 1))\r\n| where page_num has ('{ProtectedInstanceMetricPageNumber}') or '*' in ('{ProtectedInstanceMetricPageNumber}')",
        "size": 0,
        "exportFieldName": "BillingEntityUniqueId",
        "exportParameterName": "SelectedBillingEntityUniqueId",
        "exportDefaultValue": "*",
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "BillingEntityUniqueId",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "BillingEntityName",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "BillingEntityType",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "BackupManagementType",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ProtectedInstanceCount",
              "formatter": 1,
              "formatOptions": {
                "palette": "orange",
                "showIcon": true
              }
            },
            {
              "columnMatch": "sum_BackupItemFrontEndSize",
              "formatter": 5,
              "formatOptions": {
                "palette": "orange",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 4
                }
              }
            },
            {
              "columnMatch": "sum_StorageConsumedInMB",
              "formatter": 1,
              "formatOptions": {
                "palette": "orange",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "TempColumn",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ColumnToBeSorted",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "row_num",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "page_num",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "sortBy": [
            {
              "itemKey": "BillingEntityName",
              "sortOrder": 1
            }
          ],
          "labelSettings": [
            {
              "columnId": "BillingEntityUniqueId"
            },
            {
              "columnId": "BillingEntityName",
              "label": "Billing Entity Name"
            },
            {
              "columnId": "BillingEntityType",
              "label": "Billing Entity Type"
            },
            {
              "columnId": "BackupManagementType",
              "label": "Backup Management Type"
            },
            {
              "columnId": "ProtectedInstanceCount",
              "label": "# Protected Instances"
            },
            {
              "columnId": "sum_BackupItemFrontEndSize",
              "label": "Front End Storage (MB)"
            },
            {
              "columnId": "sum_StorageConsumedInMBs",
              "label": "Vault Storage (MB)"
            },
            {
              "columnId": "TempColumn",
              "label": "TempColumn"
            },
            {
              "columnId": "ColumnToBeSorted",
              "label": "ColumnToBeSorted"
            },
            {
              "columnId": "row_num"
            },
            {
              "columnId": "page_num"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Usage"
      },
      "showPin": true,
      "name": "query - 11",
      "styleSettings": {
        "margin": "-30px 0% 0% 0%",
        "padding": "0% 0% 0% 0%",
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType, BackupItemProtectionState, BillingEntityName\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceHistoryUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\r\n{\r\n let ProtectedInstanceTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedInstance\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),\r\n ProtectedInstanceCount = toint(columnifexists(\"ProtectedInstanceCount_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceHistoryUnderResourceSpecific = (isProtectedContainerBillingType:bool)\r\n{\r\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \r\n| where OperationName == \"ProtectedInstance\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet TotalProtectedInstanceHistoryTable = (isProtectedContainerBillingType:bool) \r\n{CombinedTable | union isfuzzy = true \r\n(ProtectedInstanceHistoryUnderAzureDiagnostics(isProtectedContainerBillingType)),\r\n(ProtectedInstanceHistoryUnderResourceSpecific(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType, TimeRangeEndDay\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()\r\n| project BackupItemType, BackupItemName, BackupManagementType, \r\nBackupItemProtectionState, BackupItemUniqueId, TimeGenerated),\r\n(BackupItemUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where BackupItemUniqueId != \"\"\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), BackupItemProtectionState};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId \r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics  | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join kind= fullouter (\r\n   StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId = iff(isempty(BackupItemUniqueId2), iff(isempty(BackupItemUniqueId1),BackupItemUniqueId,BackupItemUniqueId1), BackupItemUniqueId2),\r\nTimeGenerated  = iff(isempty(TimeGenerated2), iff(isempty(TimeGenerated1),TimeGenerated,TimeGenerated1), TimeGenerated2), TimeRangeEndDay  = iff(isempty(TimeRangeEndDay2), iff(isempty(TimeRangeEndDay1),TimeRangeEndDay,TimeRangeEndDay1), TimeRangeEndDay2),\r\nProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId \r\n};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId \r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeHistoryUnderResourceSpecific  | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join kind= fullouter (\r\n   StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId = iff(isempty(BackupItemUniqueId2), iff(isempty(BackupItemUniqueId1),BackupItemUniqueId,BackupItemUniqueId1), BackupItemUniqueId2),\r\nTimeGenerated  = iff(isempty(TimeGenerated2), iff(isempty(TimeGenerated1),TimeGenerated,TimeGenerated1), TimeGenerated2), TimeRangeEndDay  = iff(isempty(TimeRangeEndDay2), iff(isempty(TimeRangeEndDay1),TimeRangeEndDay,TimeRangeEndDay1), TimeRangeEndDay2),\r\nProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId \r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= rightouter\r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| extend ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName)\r\n};\r\nlet LatestBackupItemHistoryInfoTable = (){\r\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable | summarize arg_max(TimeGenerated,  ContainerNameWithBackupItemName, BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState) by BackupItemUniqueId, TimeRangeEndDay\r\n};\r\nlet LatestProtectedInstanceHistoryTableFromProtectedContainerUniqueId = ()\r\n{ \r\nTotalProtectedInstanceHistoryTable(true) \r\n| join kind= fullouter (LatestBackupItemHistoryInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated = iff(isempty(TimeGenerated1), TimeGenerated, TimeGenerated1), TimeRangeEndDay = iff(isempty(TimeRangeEndDay1), TimeRangeEndDay, TimeRangeEndDay1), ProtectedInstanceCount, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, BMSTypeWithBackupItemType, BackupItemProtectionState, BillingEntityType = \"ProtectedContainer\", BillingEntityName = ProtectedContainerName, \r\n BillingEntityUniqueId = iff(isempty(ProtectedContainerUniqueId1), ProtectedContainerUniqueId, ProtectedContainerUniqueId1), BackupItemUniqueId = iff(isempty(BackupItemUniqueId1), BackupItemUniqueId, BackupItemUniqueId1)\r\n};\r\nlet LatestProtectedInstanceHistoryTableFromBackupItemUniqueId = ()\r\n{ \r\nTotalProtectedInstanceHistoryTable(false) \r\n| join kind= fullouter (LatestBackupItemHistoryInfoTable) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated = iff(isempty(TimeGenerated1), TimeGenerated, TimeGenerated1), TimeRangeEndDay = iff(isempty(TimeRangeEndDay1), TimeRangeEndDay, TimeRangeEndDay1), ProtectedInstanceCount, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, BMSTypeWithBackupItemType, BackupItemProtectionState, BillingEntityType = \"BackupItem\", BillingEntityName = ContainerNameWithBackupItemName, \r\n BillingEntityUniqueId = iff(isempty(BackupItemUniqueId1), BackupItemUniqueId, BackupItemUniqueId1), BackupItemUniqueId = iff(isempty(BackupItemUniqueId1), BackupItemUniqueId, BackupItemUniqueId1)\r\n};\r\nlet ProtectedInstanceHistoryMetric = ( ) \r\n{ union \r\n(LatestProtectedInstanceHistoryTableFromProtectedContainerUniqueId()),\r\n(LatestProtectedInstanceHistoryTableFromBackupItemUniqueId())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BillingEntityUniqueId == (@\"{SelectedBillingEntityUniqueId}\") or '*' in ('{SelectedBillingEntityUniqueId}')\r\n// Not filtering By BackupItemUniqueId like in Storage - Multiple BackupItems under same Billing Entity.\r\n| summarize arg_max(TimeGenerated, *) by BillingEntityUniqueId, TimeRangeEndDay \r\n| project-away BillingEntityUniqueId\r\n};\r\nProtectedInstanceHistoryMetric()\r\n| summarize ProtectedInstanceCount = sum(ProtectedInstanceCount) by  TimeRangeEndDay",
        "size": 0,
        "aggregation": 5,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "title": "Protected Instances Trend",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "linechart"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Usage"
      },
      "customWidth": "50",
      "showPin": true,
      "name": "query - 10"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType, BackupItemProtectionState, BillingEntityName\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceHistoryUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\r\n{\r\n let ProtectedInstanceTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedInstance\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),\r\n ProtectedInstanceCount = toint(columnifexists(\"ProtectedInstanceCount_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceHistoryUnderResourceSpecific = (isProtectedContainerBillingType:bool)\r\n{\r\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \r\n| where OperationName == \"ProtectedInstance\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet TotalProtectedInstanceHistoryTable = (isProtectedContainerBillingType:bool) \r\n{CombinedTable | union isfuzzy = true \r\n(ProtectedInstanceHistoryUnderAzureDiagnostics(isProtectedContainerBillingType)),\r\n(ProtectedInstanceHistoryUnderResourceSpecific(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType, TimeRangeEndDay\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()\r\n| project BackupItemType, BackupItemName, BackupManagementType, \r\nBackupItemProtectionState, BackupItemUniqueId, TimeGenerated),\r\n(BackupItemUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where BackupItemUniqueId != \"\"\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), BackupItemProtectionState};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId \r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics  | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join kind= fullouter (\r\n   StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId = iff(isempty(BackupItemUniqueId2), iff(isempty(BackupItemUniqueId1),BackupItemUniqueId,BackupItemUniqueId1), BackupItemUniqueId2),\r\nTimeGenerated  = iff(isempty(TimeGenerated2), iff(isempty(TimeGenerated1),TimeGenerated,TimeGenerated1), TimeGenerated2), TimeRangeEndDay  = iff(isempty(TimeRangeEndDay2), iff(isempty(TimeRangeEndDay1),TimeRangeEndDay,TimeRangeEndDay1), TimeRangeEndDay2),\r\nProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId \r\n};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId \r\n| join kind= fullouter (\r\n   BackupItemFrontEndSizeHistoryUnderResourceSpecific  | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join kind= fullouter (\r\n   StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId = iff(isempty(BackupItemUniqueId2), iff(isempty(BackupItemUniqueId1),BackupItemUniqueId,BackupItemUniqueId1), BackupItemUniqueId2),\r\nTimeGenerated  = iff(isempty(TimeGenerated2), iff(isempty(TimeGenerated1),TimeGenerated,TimeGenerated1), TimeGenerated2), TimeRangeEndDay  = iff(isempty(TimeRangeEndDay2), iff(isempty(TimeRangeEndDay1),TimeRangeEndDay,TimeRangeEndDay1), TimeRangeEndDay2),\r\nProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId \r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= rightouter\r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| extend ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName)\r\n};\r\nlet LatestBackupItemHistoryInfoTable = (){\r\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable | summarize arg_max(TimeGenerated,  ContainerNameWithBackupItemName, BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState) by BackupItemUniqueId, TimeRangeEndDay\r\n};\r\nlet LatestProtectedInstanceHistoryTableFromProtectedContainerUniqueId = ()\r\n{ \r\nTotalProtectedInstanceHistoryTable(true) \r\n| join kind= fullouter (LatestBackupItemHistoryInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated = iff(isempty(TimeGenerated1), TimeGenerated, TimeGenerated1), TimeRangeEndDay = iff(isempty(TimeRangeEndDay1), TimeRangeEndDay, TimeRangeEndDay1), ProtectedInstanceCount, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, BMSTypeWithBackupItemType, BackupItemProtectionState, BillingEntityType = \"ProtectedContainer\", BillingEntityName = ProtectedContainerName, \r\n BillingEntityUniqueId = iff(isempty(ProtectedContainerUniqueId1), ProtectedContainerUniqueId, ProtectedContainerUniqueId1), BackupItemUniqueId = iff(isempty(BackupItemUniqueId1), BackupItemUniqueId, BackupItemUniqueId1)\r\n};\r\nlet LatestProtectedInstanceHistoryTableFromBackupItemUniqueId = ()\r\n{ \r\nTotalProtectedInstanceHistoryTable(false) \r\n| join kind= fullouter (LatestBackupItemHistoryInfoTable) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated = iff(isempty(TimeGenerated1), TimeGenerated, TimeGenerated1), TimeRangeEndDay = iff(isempty(TimeRangeEndDay1), TimeRangeEndDay, TimeRangeEndDay1), ProtectedInstanceCount, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, BMSTypeWithBackupItemType, BackupItemProtectionState, BillingEntityType = \"BackupItem\", BillingEntityName = ContainerNameWithBackupItemName, \r\n BillingEntityUniqueId = iff(isempty(BackupItemUniqueId1), BackupItemUniqueId, BackupItemUniqueId1), BackupItemUniqueId = iff(isempty(BackupItemUniqueId1), BackupItemUniqueId, BackupItemUniqueId1)\r\n};\r\nlet ProtectedInstanceHistoryMetric = ( ) \r\n{ union \r\n(LatestProtectedInstanceHistoryTableFromProtectedContainerUniqueId()),\r\n(LatestProtectedInstanceHistoryTableFromBackupItemUniqueId())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BillingEntityUniqueId == (@\"{SelectedBillingEntityUniqueId}\") or '*' in ('{SelectedBillingEntityUniqueId}')\r\n| summarize arg_max(TimeGenerated, *) by BillingEntityUniqueId, BackupItemUniqueId, TimeRangeEndDay \r\n| project-away BillingEntityUniqueId\r\n};\r\nProtectedInstanceHistoryMetric()\r\n| summarize StorageConsumedInMBs = sum(StorageConsumedInMBs) by  TimeRangeEndDay",
        "size": 0,
        "aggregation": 5,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "title": "Vault Storage Trend",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "linechart"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Usage"
      },
      "customWidth": "50",
      "showPin": true,
      "name": "Protinst - last"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), PolicyUniqueId = columnifexists(\"PolicyUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId \r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId \r\n};\r\nlet LatestJobTable =  materialize(union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where JobUniqueId != \"\"\r\n| distinct JobStatus, JobUniqueId); \r\nlet JobSuccessPercent = LatestJobTable\r\n| extend success=iff((JobStatus == \"Completed\" or JobStatus == \"CompletedWithWarnings\") , 1 , 0)\r\n| extend record = 1 // to be used for total row count\r\n| summarize SuccessfulCount =sum(success), TotalCount=sum(record)\r\n| extend JobSuccessPercentage = (SuccessfulCount*100)/todouble(TotalCount)\r\n| project JobSuccessPercentage \r\n| extend  Key = pack_array(\"Success%\"), Value = pack_array( JobSuccessPercentage), Row = pack_array(1000)\r\n| project Key, Value, Row\r\n| mvexpand  Key, Value, Row; \r\nlet JobStatusTable = LatestJobTable\r\n| summarize dcount(JobUniqueId) by JobStatus\r\n| order by JobStatus asc\r\n| extend row_num = row_number()\r\n| extend  Key = pack_array(JobStatus), Value = pack_array( dcount_JobUniqueId), Row = pack_array(row_num)\r\n| project Key, Value, Row\r\n| mvexpand  Key, Value, Row;\r\nunion  JobStatusTable, JobSuccessPercent \r\n| order by toint(Row) asc",
        "size": 4,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Key",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "subtitleContent": {
            "columnMatch": "SubTitle",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              }
            }
          },
          "showBorder": true,
          "sortCriteriaField": "Key",
          "sortOrderField": 2
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "showPin": true,
      "name": "JobDist - first"
    },
    {
      "type": 1,
      "content": {
        "json": "_____________________________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "name": "text - 15"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "71c5a2f9-67e4-48d4-aec3-4c4116f04acd",
            "version": "KqlParameterItem/1.0",
            "name": "JobOperation",
            "label": "Job Operation",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId \r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId \r\n};\r\nlet LatestJobTable = () {union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where JobUniqueId != \"\"\r\n| distinct JobOperation}; \r\nLatestJobTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "49be13b9-6869-4cb2-94e0-b122508d1efb",
            "version": "KqlParameterItem/1.0",
            "name": "JobStatus",
            "label": "Job Status",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"Completed\", \"label\":\"Completed\" },\r\n    { \"value\":\"Failed\", \"label\":\"Failed\"  },\r\n    { \"value\":\"CompletedWithWarnings\",   \"label\":\"CompletedWithWarnings\"  },\r\n    { \"value\":\"Cancelled\", \"label\":\"Cancelled\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "84fef06a-bc14-40e3-a6c5-68647b3f5474",
            "version": "KqlParameterItem/1.0",
            "name": "JobFailureCode",
            "label": "Job Failure Code",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId \r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId \r\n};\r\nlet LatestJobTable = () { union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where JobUniqueId != \"\"\r\n| distinct JobFailureCode\r\n| where not (JobFailureCode == \"Success\" or JobFailureCode == \"\")}; \r\nLatestJobTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "name": "parameters - 7"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">Distribution of Jobs in period by BackupItem </span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo",
          "value": ""
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "name": "text - 20",
      "styleSettings": {
        "margin": "0% 0% 10px 0%"
      }
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "nav",
        "links": [
          {
            "cellValue": " {\"01) BackupItem Name\":\"Name of the BackupItem\", \"02) BackupItem Type\":\"Type of the BackupItem, in format BackupManagementType/BackupItemType\", \"03) # Jobs Failed\":\"Number of jobs on the BackupItem that failed in the selected period\", \"04) Job Success %\":\"% of jobs on the BackupItem that were successful in the selected period\", \"05) Avg Data Transferred (MB)\":\"Average data transferred by jobs on the BackupItem in the selected period\", \"06) Avg Job Duration (hrs)\":\"Average duration of jobs on the BackupItem in the selected period\" }",
            "linkTarget": "CellDetails",
            "linkLabel": "ⓘ",
            "style": "link"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "customWidth": "0",
      "name": "links - 19"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "a29464c3-34f0-4d60-82bb-614b8128b7f9",
            "version": "KqlParameterItem/1.0",
            "name": "ContainerNameWithBackupItemName",
            "label": "Search BackupItem Name",
            "type": 1,
            "description": "Search By BackupItem Name",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "5dc2a074-b510-44f2-9530-cfcbd159b59c",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricSortBy",
            "label": "Sort By:",
            "type": 2,
            "description": "Sort by a certain column",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{ \"value\": \"FailureCount\", \"label\": \"# Jobs Failed\" },\r\n{ \"value\": \"AvgDataTransferred\", \"label\": \"Avg data transferred (MB)\" }, \r\n{ \"value\": \"AvgJobDuration\", \"label\": \"Avg Job Duration (hrs)\" },\r\n{ \"value\": \"SuccessPercent\", \"label\": \"Job Success %\", \"selected\": \"true\" }]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "df3cc03c-53f7-4523-a29b-e50bf1b6d922",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricOrder",
            "label": "Order:",
            "type": 2,
            "description": "Sort order",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"Ascending\", \"selected\":true},\r\n    { \"value\":\"Descending\"}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "2033073e-5e18-4e0f-a543-a03b98874d8d",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricRowsPerGrid",
            "label": "Rows per Grid:",
            "type": 2,
            "description": "Number of rows per page you want to view (max 500)",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "356e4bfd-7e3d-4e48-89c0-b03efb72b9dc",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricPageNumber",
            "label": "Page:",
            "type": 2,
            "description": "Page number",
            "isRequired": true,
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId \r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId \r\n};\r\nlet LatestJobTable = ()\r\n{ union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n| where JobUniqueId != \"\" or ContainerNameWithBackupItemName != \"\"\r\n}; \r\nlet JobMetric = ()\r\n{\r\n// Calculate percentage\r\nLatestJobTable\r\n| extend failed=iff(JobStatus == \"Failed\" , 1 , 0)\r\n| extend record = iff(JobUniqueId != \"\", 1, 0)  // to be used for total row count\r\n| summarize FailureCount =sum(failed), TotalCount=sum(record), AvgDataTransferred =avg(DataTransferredInMB), AvgJobDuration = avg(JobDurationInSecs)/3600 by ContainerNameWithBackupItemName, BMSTypeWithBackupItemType\r\n| extend SuccessPercent = ((TotalCount - FailureCount) *100)/todouble(TotalCount)\r\n};\r\nlet JobCount = JobMetric\r\n| summarize c=count();\r\nlet PageEnd = (toscalar(JobCount)-1)/{JobMetricRowsPerGrid} + 1;\r\nrange pages from 1 to PageEnd step 1",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "customWidth": "90",
      "name": "parameters - 7",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%",
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "18dffc0f-abf1-4974-96c8-df68b3aa8f39",
            "version": "KqlParameterItem/1.0",
            "name": "P1",
            "type": 1,
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.insights/components"
      },
      "customWidth": "0",
      "name": "parameters - 14",
      "styleSettings": {
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId, ResourceId\r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName, ResourceId \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId, ResourceId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName, ResourceId\r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated, ResourceId\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId, ResourceId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId, ResourceId\r\n};\r\nlet LatestJobTable = ()\r\n{ union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n| where JobUniqueId != \"\" or ContainerNameWithBackupItemName != \"\"\r\n}; \r\nlet JobMetric = ()\r\n{\r\n// Calculate percentage\r\nLatestJobTable\r\n| extend failed=iff(JobStatus == \"Failed\" , 1 , 0)\r\n| extend record = iff(JobUniqueId != \"\", 1, 0)  // to be used for total row count\r\n| summarize FailureCount =sum(failed), TotalCount=sum(record), AvgDataTransferred =avg(DataTransferredInMB), AvgJobDuration = avg(JobDurationInSecs)/3600 by ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, ResourceId\r\n| extend SuccessPercent = ((TotalCount - FailureCount) *100)/todouble(TotalCount)\r\n};\r\nJobMetric\r\n| extend TempColumn = column_ifexists(tostring('{JobMetricSortBy}'), \"SuccessPercent\")\r\n| extend ColumnToBeSorted = iff(tostring('{JobMetricOrder}') == \"Ascending\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\r\n| sort by ColumnToBeSorted asc nulls last\r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/{JobMetricRowsPerGrid} + 1))\r\n| where page_num has ('{JobMetricPageNumber}') or '*' in ('{JobMetricPageNumber}')\r\n| extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\r\n| extend contianerName = iff((split(ContainerNameWithBackupItemName, \"/\")[0] != \"\" and array_length(split((split(ContainerNameWithBackupItemName, \"/\")[0]),\";\")) == 3), split(ContainerNameWithBackupItemName,\"/\")[0], \"\")\r\n| extend rgName = iff(contianerName != \"\", split(contianerName,\";\")[1], \"\")\r\n| extend entityName = iff(contianerName != \"\", split(contianerName,\";\")[2], \"\")\r\n| extend entityType = iff(contianerName != \"\", split(contianerName,\";\")[0], \"\")\r\n| extend entityTypeForAzureStorageUrl = iff(BMSTypeWithBackupItemType == \"AzureStorage/AzureFileShare\", iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), \"\")\r\n| extend entityTypeForIaaSVMUrl = iff(BMSTypeWithBackupItemType == \"IaaSVM/VM\", iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend entityTypeForAzureWorkloadUrl = iff((BMSTypeWithBackupItemType == \"AzureWorkload/SAPHanaDatabase\" or BMSTypeWithBackupItemType == \"AzureWorkload/SQLDataBase\"), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend finalUrl = iff(contianerName != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId)\r\n| project-away prefix, contianerName, rgName, entityName, entityTypeForAzureStorageUrl, entityTypeForAzureWorkloadUrl, entityTypeForIaaSVMUrl, entityType, ResourceId",
        "size": 1,
        "exportFieldName": "ContainerNameWithBackupItemName",
        "exportParameterName": "SelectedContainerNameWithBackupItemName",
        "exportDefaultValue": "*",
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "ContainerNameWithBackupItemName",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "BMSTypeWithBackupItemType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "FailureCount",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "AvgDataTransferred",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 4
                }
              }
            },
            {
              "columnMatch": "AvgJobDuration",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "SuccessPercent",
              "formatter": 18,
              "formatOptions": {
                "linkTarget": "Url",
                "showIcon": true,
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "100",
                    "representation": "green",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "<",
                    "thresholdValue": "50",
                    "representation": "red",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "<",
                    "thresholdValue": "100",
                    "representation": "yellow",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": null,
                    "text": "{0}{1}"
                  }
                ]
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "row_num",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "page_num",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "ContainerNameWithBackupItemName",
              "label": "ContainerNameWithBackupItemName"
            },
            {
              "columnId": "BMSTypeWithBackupItemType",
              "label": "BMSTypeWithBackupItemType"
            },
            {
              "columnId": "FailureCount",
              "label": "FailureCount"
            },
            {
              "columnId": "TotalCount",
              "label": "TotalCount"
            },
            {
              "columnId": "AvgDataTransferred",
              "label": "AvgDataTransferred"
            },
            {
              "columnId": "AvgJobDuration",
              "label": "AvgJobDuration"
            },
            {
              "columnId": "SuccessPercent",
              "label": "SuccessPercent"
            },
            {
              "columnId": "TempColumn",
              "label": "TempColumn"
            },
            {
              "columnId": "ColumnToBeSorted",
              "label": "ColumnToBeSorted"
            },
            {
              "columnId": "row_num",
              "label": "row_num"
            },
            {
              "columnId": "page_num",
              "label": "page_num"
            },
            {
              "columnId": "finalUrl",
              "label": "finalUrl"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "P1",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "query - 11",
      "styleSettings": {
        "padding": "0% 0% 0% 0%",
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"e72012f4-9846-4404-ac3e-31562d1200dc\",\"mergeType\":\"table\",\"leftTable\":\"query - 11\"}],\"projectRename\":[{\"originalName\":\"[query - 11].ContainerNameWithBackupItemName\",\"mergedName\":\"Backup Item Name\",\"fromId\":\"e72012f4-9846-4404-ac3e-31562d1200dc\"},{\"originalName\":\"[query - 11].BMSTypeWithBackupItemType\",\"mergedName\":\"Backup Item Type\",\"fromId\":\"e72012f4-9846-4404-ac3e-31562d1200dc\"},{\"originalName\":\"[query - 11].FailureCount\",\"mergedName\":\"# Jobs Failed\",\"fromId\":\"e72012f4-9846-4404-ac3e-31562d1200dc\"},{\"originalName\":\"[query - 11].SuccessPercent\",\"mergedName\":\"Job Success %\",\"fromId\":\"e72012f4-9846-4404-ac3e-31562d1200dc\"},{\"originalName\":\"[query - 11].AvgDataTransferred\",\"mergedName\":\"Avg data transferred (MB)\",\"fromId\":\"e72012f4-9846-4404-ac3e-31562d1200dc\"},{\"originalName\":\"[query - 11].AvgJobDuration\",\"mergedName\":\"Avg Job Duration (hrs)\",\"fromId\":\"e72012f4-9846-4404-ac3e-31562d1200dc\"},{\"originalName\":\"[query - 11].row_num\",\"mergedName\":\"row_num\",\"fromId\":\"e72012f4-9846-4404-ac3e-31562d1200dc\"},{\"originalName\":\"[query - 11].page_num\",\"mergedName\":\"page_num\",\"fromId\":\"e72012f4-9846-4404-ac3e-31562d1200dc\"},{\"originalName\":\"[query - 11].BackupItemName\",\"mergedName\":\"BackupItemName\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].JobOperation\",\"mergedName\":\"JobOperation\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].JobStatus\",\"mergedName\":\"JobStatus\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].DataTransferredInMB\",\"mergedName\":\"DataTransferredInMB\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].JobDurationInSec\",\"mergedName\":\"JobDurationInSec\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].JobUniqueId\",\"mergedName\":\"JobUniqueId\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].JobFailureCode\",\"mergedName\":\"JobFailureCode\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].BackupItemUniqueId\",\"mergedName\":\"BackupItemUniqueId\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ProtectedContainerUniqueId\",\"mergedName\":\"ProtectedContainerUniqueId\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].BackupManagementServerUniqueId\",\"mergedName\":\"BackupManagementServerUniqueId\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].TotalCount\",\"mergedName\":\"TotalCount\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].TempColumn\",\"mergedName\":\"TempColumn\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ColumnToBeSorted\",\"mergedName\":\"ColumnToBeSorted\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ResourceId\",\"mergedName\":\"ResourceId\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ProtectedContainerName\",\"mergedName\":\"ProtectedContainerName\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].TimeGenerated\",\"mergedName\":\"TimeGenerated\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ProtectedContainerFriendlyName\",\"mergedName\":\"ProtectedContainerFriendlyName\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].AgentVersion\",\"mergedName\":\"AgentVersion\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ProtectedContainerOSType\",\"mergedName\":\"ProtectedContainerOSType\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ProtectedContainerOSVersion\",\"mergedName\":\"ProtectedContainerOSVersion\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ProtectedContainerWorkloadType\",\"mergedName\":\"ProtectedContainerWorkloadType\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ProtectedContainerProtectionState\",\"mergedName\":\"ProtectedContainerProtectionState\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ProtectedContainerLocation\",\"mergedName\":\"ProtectedContainerLocation\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ProtectedContainerType\",\"mergedName\":\"ProtectedContainerType\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].BackupManagementType\",\"mergedName\":\"BackupManagementType\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ResourceId1\",\"mergedName\":\"ResourceId1\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ResourceId2\",\"mergedName\":\"ResourceId2\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].TimeGenerated1\",\"mergedName\":\"TimeGenerated1\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ProtectedContainerUniqueId1\",\"mergedName\":\"ProtectedContainerUniqueId1\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].VaultUniqueId\",\"mergedName\":\"VaultUniqueId\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].PolicyUniqueId\",\"mergedName\":\"PolicyUniqueId\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].BackupManagementType1\",\"mergedName\":\"BackupManagementType1\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].ResourceId11\",\"mergedName\":\"ResourceId11\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].JobDurationInSecs\",\"mergedName\":\"JobDurationInSecs\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].JobOperationSubType\",\"mergedName\":\"JobOperationSubType\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].AdHocOrScheduledJob\",\"mergedName\":\"AdHocOrScheduledJob\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].RecoveryJobDestination\",\"mergedName\":\"RecoveryJobDestination\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].RecoveryJobRPDateTime\",\"mergedName\":\"RecoveryJobRPDateTime\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].RecoveryJobRPLocation\",\"mergedName\":\"RecoveryJobRPLocation\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].RecoveryLocationType\",\"mergedName\":\"RecoveryLocationType\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].JobStartDateTime\",\"mergedName\":\"JobStartDateTime\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].prefix\",\"mergedName\":\"prefix\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].contianerName\",\"mergedName\":\"contianerName\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].rgName\",\"mergedName\":\"rgName\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].entityName\",\"mergedName\":\"entityName\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].entityType\",\"mergedName\":\"entityType\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].entityTypeForAzureStorageUrl\",\"mergedName\":\"entityTypeForAzureStorageUrl\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].entityTypeForIaaSVMUrl\",\"mergedName\":\"entityTypeForIaaSVMUrl\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].entityTypeForAzureWorkloadUrl\",\"mergedName\":\"entityTypeForAzureWorkloadUrl\",\"fromId\":\"unknown\"},{\"originalName\":\"[query - 11].finalUrl\",\"mergedName\":\"finalUrl\",\"fromId\":\"unknown\"}]}",
        "size": 0,
        "exportFieldName": "Backup Item Name",
        "exportParameterName": "SelectedContainerNameWithBackupItemName",
        "exportDefaultValue": "*",
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 7,
        "resourceType": "microsoft.insights/components",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Backup Item Name",
              "formatter": 16,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "Backup Item Type",
              "formatter": 13,
              "formatOptions": {
                "linkColumn": "finalUrl",
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "# Jobs Failed",
              "formatter": 1,
              "formatOptions": {
                "palette": "orange",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "Job Success %",
              "formatter": 1,
              "formatOptions": {
                "linkTarget": "WorkbookTemplate",
                "showIcon": true,
                "workbookContext": {
                  "componentIdSource": "workbook",
                  "resourceIdsSource": "workbook",
                  "templateIdSource": "static",
                  "templateId": "Community-Workbooks/Azure Backup/Job Details",
                  "typeSource": "default",
                  "gallerySource": "static",
                  "gallery": "Azure Monitor"
                }
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "Avg data transferred (MB)",
              "formatter": 1,
              "formatOptions": {
                "palette": "orange",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "Avg Job Duration (hrs)",
              "formatter": 1,
              "formatOptions": {
                "palette": "orange",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "row_num",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "page_num",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "TotalCount",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "TempColumn",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ColumnToBeSorted",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "finalUrl",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "Backup Item Name",
              "label": "Backup Item Name"
            },
            {
              "columnId": "Backup Item Type",
              "label": "Backup Item Type"
            },
            {
              "columnId": "# Jobs Failed",
              "label": "# Jobs Failed"
            },
            {
              "columnId": "Job Success %",
              "label": "Job Success %"
            },
            {
              "columnId": "Avg data transferred (MB)",
              "label": "Avg data transferred (MB)"
            },
            {
              "columnId": "Avg Job Duration (hrs)",
              "label": "Avg Job Duration (hrs)"
            },
            {
              "columnId": "row_num",
              "label": "row_num"
            },
            {
              "columnId": "page_num",
              "label": "page_num"
            },
            {
              "columnId": "TotalCount",
              "label": "TotalCount"
            },
            {
              "columnId": "TempColumn",
              "label": "TempColumn"
            },
            {
              "columnId": "ColumnToBeSorted",
              "label": "ColumnToBeSorted"
            },
            {
              "columnId": "finalUrl",
              "label": "finalUrl"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "name": "query - 13",
      "styleSettings": {
        "margin": "-30px 0% 0% 0%",
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId, TimeGenerated\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId, TimeGenerated \r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId, TimeGenerated \r\n};\r\nlet LatestJobTable =  union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where ContainerNameWithBackupItemName == (@\"{SelectedContainerNameWithBackupItemName}\") or '*' in (@\"{SelectedContainerNameWithBackupItemName}\")\r\n// Only When JobCount is >= 1\r\n| where JobUniqueId != \"\"; \r\nLatestJobTable\r\n| summarize count(JobStatus) by   JobStatus, bin(TimeGenerated, 1d)",
        "size": 0,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "title": "Jobs by Status over Time",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "categoricalbar",
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "Completed",
              "color": "green"
            },
            {
              "seriesName": "Failed",
              "color": "red"
            },
            {
              "seriesName": "CompletedWithWarnings",
              "color": "yellow"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "customWidth": "33",
      "showPin": true,
      "name": "query - 10"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId \r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId \r\n};\r\nlet LatestJobTable =  union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where ContainerNameWithBackupItemName == (@\"{SelectedContainerNameWithBackupItemName}\") or '*' in (@\"{SelectedContainerNameWithBackupItemName}\")\r\n| where JobUniqueId != \"\"; \r\nLatestJobTable\r\n| summarize count(JobStatus) by JobOperation, JobStatus",
        "size": 0,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "title": "Jobs by Job Operation",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "categoricalbar",
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "JobOperation",
              "sortOrder": 1
            }
          ]
        },
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "JobStatus",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "count_JobStatus",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "graphSettings": {
          "type": 0,
          "topContent": {
            "columnMatch": "JobStatus",
            "formatter": 1
          },
          "centerContent": {
            "columnMatch": "count_JobStatus",
            "formatter": 1,
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {}
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "customWidth": "33",
      "showPin": true,
      "name": "query - 8"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId \r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId \r\n};\r\nlet LatestJobTable =  union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where ContainerNameWithBackupItemName == (@\"{SelectedContainerNameWithBackupItemName}\") or '*' in (@\"{SelectedContainerNameWithBackupItemName}\")\r\n| where JobUniqueId != \"\"; \r\nLatestJobTable\r\n| where JobStatus == \"Failed\"\r\n| summarize count(JobOperation) by JobFailureCode",
        "size": 0,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "title": "Failed Jobs by Failure Code",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "piechart",
        "chartSettings": {}
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "customWidth": "33",
      "showPin": true,
      "name": "JobDist - last"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId \r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId \r\n};\r\nlet LatestJobTable =  materialize(union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where JobUniqueId != \"\"\r\n| distinct JobStatus, JobUniqueId); \r\nlet JobSuccessPercent = LatestJobTable\r\n| extend success=iff((JobStatus == \"Completed\" or JobStatus == \"CompletedWithWarnings\") , 1 , 0)\r\n| extend record = 1 // to be used for total row count\r\n| summarize SuccessfulCount =sum(success), TotalCount=sum(record)\r\n| extend JobSuccessPercentage = (SuccessfulCount*100)/todouble(TotalCount)\r\n| project JobSuccessPercentage \r\n| extend  Key = pack_array(\"Success%\"), Value = pack_array( JobSuccessPercentage), Row = pack_array(1000)\r\n| project Key, Value, Row\r\n| mvexpand  Key, Value, Row; \r\nlet JobStatusTable = LatestJobTable\r\n| summarize dcount(JobUniqueId) by JobStatus\r\n| order by JobStatus asc\r\n| extend row_num = row_number()\r\n| extend  Key = pack_array(JobStatus), Value = pack_array( dcount_JobUniqueId), Row = pack_array(row_num)\r\n| project Key, Value, Row\r\n| mvexpand  Key, Value, Row;\r\nunion  JobStatusTable, JobSuccessPercent \r\n| order by toint(Row) asc",
        "size": 4,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Key",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "subtitleContent": {
            "columnMatch": "SubTitle",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              }
            }
          },
          "showBorder": true,
          "sortCriteriaField": "Key",
          "sortOrderField": 2
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDetails"
      },
      "showPin": true,
      "name": "JobDet - first"
    },
    {
      "type": 1,
      "content": {
        "json": "_____________________________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDetails"
      },
      "name": "text - 15"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "71c5a2f9-67e4-48d4-aec3-4c4116f04acd",
            "version": "KqlParameterItem/1.0",
            "name": "JobOperation",
            "label": "Job Operation",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId \r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId \r\n};\r\nlet LatestJobTable = () {union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where JobUniqueId != \"\"\r\n| distinct JobOperation}; \r\nLatestJobTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "49be13b9-6869-4cb2-94e0-b122508d1efb",
            "version": "KqlParameterItem/1.0",
            "name": "JobStatus",
            "label": "Job Status",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "jsonData": "[\r\n    { \"value\":\"Completed\", \"label\":\"Completed\" },\r\n    { \"value\":\"Failed\", \"label\":\"Failed\"  },\r\n    { \"value\":\"CompletedWithWarnings\",   \"label\":\"CompletedWithWarnings\"  },\r\n    { \"value\":\"Cancelled\", \"label\":\"Cancelled\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "84fef06a-bc14-40e3-a6c5-68647b3f5474",
            "version": "KqlParameterItem/1.0",
            "name": "JobFailureCode",
            "label": "Job Failure Code",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId \r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId \r\n};\r\nlet LatestJobTable = () { union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where JobUniqueId != \"\"\r\n| distinct JobFailureCode\r\n| where not (JobFailureCode == \"Success\" or JobFailureCode == \"\")}; \r\nLatestJobTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDetails"
      },
      "name": "parameters - 7",
      "styleSettings": {
        "margin": "0% 0% 30px 0%"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">List of Jobs in Period</span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDetails"
      },
      "name": "text - 17",
      "styleSettings": {
        "margin": "0% 0% 10px 0%"
      }
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "nav",
        "links": [
          {
            "cellValue": "{\"01) BackupItem Name\": \"Name of the BackupItem on which the job was executed\", \"02) Job Unique Id\": \"Unique identifier of the job\", \"03) Job Creation Date\": \"Date on which the job was triggered\", \"04) Job Creation Time (UTC)\": \"Time of day (in UTC) during when the job was triggered\", \"05) Job Failure Code\": \"Error code associated with a failed job\", \"06) Data Transferred (MB)\": \"Amount of data transferred by the job in MB\", \"07) Adhoc / Scheduled ?\": \"Whether the job was an adhoc job or scheduled job\", \"08) Job Operation\": \"Whether the job involved backup operation, restore operation or any other kind of operation\" }",
            "linkTarget": "CellDetails",
            "linkLabel": "ⓘ",
            "style": "link",
            "linkIsContextBlade": true
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDetails"
      },
      "customWidth": "0",
      "name": "links - 15"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "a29464c3-34f0-4d60-82bb-614b8128b7f9",
            "version": "KqlParameterItem/1.0",
            "name": "ContainerNameWithBackupItemName",
            "label": "Search BackupItem Name",
            "type": 1,
            "description": "Search by BackupItem Name",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "value": ""
          },
          {
            "id": "5dc2a074-b510-44f2-9530-cfcbd159b59c",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricSortBy2",
            "label": "Sort By",
            "type": 2,
            "description": "Sort by a certain column",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{ \"value\": \"JobDurationInSecs\", \"label\": \"Job Duration (hrs)\" },\r\n{ \"value\": \"DataTransferredInMB\", \"label\": \"Data Transferred (MB)\", \"selected\": \"true\" }]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "df3cc03c-53f7-4523-a29b-e50bf1b6d922",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricOrder2",
            "label": "Order",
            "type": 2,
            "description": "Sort order",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"Ascending\"},\r\n    { \"value\":\"Descending\", \"selected\":true}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "90453a1f-7fd0-45d4-a2ef-cd36b4a834e0",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricRowsPerGrid2",
            "label": "Items per page",
            "type": 2,
            "description": "Number of rows per page you want to view (max 500)",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "356e4bfd-7e3d-4e48-89c0-b03efb72b9dc",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricPageNumber2",
            "label": "Page Number",
            "type": 2,
            "description": "Page number",
            "isRequired": true,
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId, JobStartDateTime, AdHocOrScheduledJob \r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId, JobStartDateTime, AdHocOrScheduledJob \r\n};\r\nlet LatestJobTable = ()\r\n{ union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n| where JobUniqueId != \"\" or ContainerNameWithBackupItemName != \"\"\r\n}; \r\n//JobUniqueId*, BackupItemName*, TimeGenerated*, Failure Code*, Data Transferred*, Duration*, Adhoc, Operation* \r\nlet JobCount = LatestJobTable\r\n| summarize c=count();\r\nlet PageEnd = (toscalar(JobCount)-1)/{JobMetricRowsPerGrid2} + 1;\r\nrange pages from 1 to PageEnd step 1",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDetails"
      },
      "customWidth": "90",
      "name": "parameters - 7",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%",
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "18dffc0f-abf1-4974-96c8-df68b3aa8f39",
            "version": "KqlParameterItem/1.0",
            "name": "P1",
            "type": 1,
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.insights/components"
      },
      "customWidth": "0",
      "name": "parameters - 14",
      "styleSettings": {
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId \r\n};\r\nlet LatestJobTable = ()\r\n{ union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n| where JobUniqueId != \"\" or ContainerNameWithBackupItemName != \"\"\r\n}; \r\n//JobUniqueId*, BackupItemName*, TimeGenerated*, Failure Code*, Data Transferred*, Duration*, Adhoc, Operation* \r\nLatestJobTable\r\n| extend TempColumn = column_ifexists(tostring('{JobMetricSortBy2}'), \"DataTransferredInMB\")\r\n| extend ColumnToBeSorted = iff(tostring('{JobMetricOrder2}') == \"Ascending\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\r\n| sort by ColumnToBeSorted asc nulls last\r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/{JobMetricRowsPerGrid2} + 1))\r\n| where page_num has ('{JobMetricPageNumber2}') or '*' in ('{JobMetricPageNumber2}')\r\n| extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\r\n| extend contianerName = iff((split(ContainerNameWithBackupItemName, \"/\")[0] != \"\" and array_length(split((split(ContainerNameWithBackupItemName, \"/\")[0]),\";\")) == 3), split(ContainerNameWithBackupItemName,\"/\")[0], \"\")\r\n| extend rgName = iff(contianerName != \"\", split(contianerName,\";\")[1], \"\")\r\n| extend entityName = iff(contianerName != \"\", split(contianerName,\";\")[2], \"\")\r\n| extend entityType = iff(contianerName != \"\", split(contianerName,\";\")[0], \"\")\r\n| extend entityTypeForAzureStorageUrl = iff(BMSTypeWithBackupItemType == \"AzureStorage/AzureFileShare\", iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), \"\")\r\n| extend entityTypeForIaaSVMUrl = iff(BMSTypeWithBackupItemType == \"IaaSVM/VM\", iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend entityTypeForAzureWorkloadUrl = iff((BMSTypeWithBackupItemType == \"AzureWorkload/SAPHanaDatabase\" or BMSTypeWithBackupItemType == \"AzureWorkload/SQLDataBase\"), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend finalUrl = iff(contianerName != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId)\r\n| project ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, JobUniqueId, JobStartDateTime, JobDuration=JobDurationInSecs/3600, JobFailureCode, DataTransferredInMB, JobOperation, TempColumn, ColumnToBeSorted, finalUrl",
        "size": 3,
        "exportFieldName": "ContainerNameWithBackupItemName",
        "exportParameterName": "SelectedContainerNameWithBackupItemName",
        "exportDefaultValue": "*",
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "ContainerNameWithBackupItemName",
              "formatter": 16,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "BMSTypeWithBackupItemType",
              "formatter": 13,
              "formatOptions": {
                "linkColumn": "finalUrl",
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "JobUniqueId",
              "formatter": 16,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "JobStartDateTime",
              "formatter": 6,
              "formatOptions": {
                "showIcon": true
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "fullDateTimePattern"
              }
            },
            {
              "columnMatch": "JobDuration",
              "formatter": 1,
              "formatOptions": {
                "min": 0,
                "palette": "orange",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "JobFailureCode",
              "formatter": 18,
              "formatOptions": {
                "showIcon": true,
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "contains",
                    "thresholdValue": "Success",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "error",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "DataTransferredInMB",
              "formatter": 1,
              "formatOptions": {
                "min": 0,
                "palette": "orange",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "JobOperation",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "TempColumn",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ColumnToBeSorted",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "finalUrl",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "AdHocOrScheduledJob",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Job Start DateTime",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "JobCreationDate",
              "formatter": 6,
              "formatOptions": {
                "showIcon": true
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "fullDateTimePattern"
              }
            },
            {
              "columnMatch": "JobCreationTime",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "FailureCount",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "AvgDataTransferred",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 4
                }
              }
            },
            {
              "columnMatch": "AvgJobDuration",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "SuccessPercent",
              "formatter": 18,
              "formatOptions": {
                "linkTarget": "Url",
                "showIcon": true,
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "100",
                    "representation": "green",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "<",
                    "thresholdValue": "50",
                    "representation": "red",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "<",
                    "thresholdValue": "100",
                    "representation": "yellow",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": null,
                    "text": "{0}{1}"
                  }
                ]
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "row_num",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "page_num",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "ContainerNameWithBackupItemName",
              "label": "BackupItem Name"
            },
            {
              "columnId": "BMSTypeWithBackupItemType",
              "label": "BackupItem Type"
            },
            {
              "columnId": "JobUniqueId",
              "label": "Job Unique Id"
            },
            {
              "columnId": "JobStartDateTime",
              "label": "Job Start DateTime"
            },
            {
              "columnId": "JobDuration",
              "label": "Job Duration (hrs)"
            },
            {
              "columnId": "JobFailureCode",
              "label": "Job Failure Code"
            },
            {
              "columnId": "DataTransferredInMB",
              "label": "Data Transferred (MB)"
            },
            {
              "columnId": "JobOperation",
              "label": "Job Operation"
            },
            {
              "columnId": "TempColumn"
            },
            {
              "columnId": "ColumnToBeSorted"
            },
            {
              "columnId": "finalUrl",
              "label": "finalUrl"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDetails"
      },
      "showPin": true,
      "name": "JobDet - last",
      "styleSettings": {
        "margin": "-30px 0% 0% 0%",
        "padding": "0% 0% -20px 0%",
        "showBorder": true
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "99bfb0c0-2e58-4bfb-be19-e29f94a429c9",
            "version": "KqlParameterItem/1.0",
            "name": "JobOperation",
            "label": "Job Operation",
            "type": 2,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n   { \"value\":\"'Backup'\", \"label\":\"Backup\", \"selected\":true }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "0422bf8a-8025-4c1d-a5d7-abd1836a5366",
            "version": "KqlParameterItem/1.0",
            "name": "JobStatus",
            "label": "Backup Job Status",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "jsonData": "[\r\n    { \"value\":\"Completed\", \"label\":\"Completed\" },\r\n    { \"value\":\"Failed\", \"label\":\"Failed\"  },\r\n    { \"value\":\"CompletedWithWarnings\",   \"label\":\"CompletedWithWarnings\"  },\r\n    { \"value\":\"Cancelled\", \"label\":\"Cancelled\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "4286ad09-38e2-4ec7-9942-806344162875",
            "version": "KqlParameterItem/1.0",
            "name": "JobFailureCode",
            "label": "Backup Job Failure Code",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId \r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId \r\n};\r\nlet LatestJobTable = () { union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where JobUniqueId != \"\"\r\n| distinct JobFailureCode\r\n| where not (JobFailureCode == \"Success\" or JobFailureCode == \"\")}; \r\nLatestJobTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyAdherence"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyAdherence"
      },
      "name": "compliance - start"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">Days with successful Backup</span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyAdherence"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyAdherence"
      },
      "name": "text - 71",
      "styleSettings": {
        "margin": "0% 0% 10px 0%"
      }
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "nav",
        "links": [
          {
            "cellValue": "To be added",
            "linkTarget": "CellDetails",
            "linkLabel": "ⓘ",
            "style": "link",
            "linkIsContextBlade": true
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyAdherence"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyAdherence"
      },
      "customWidth": "0",
      "name": "links - 70"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "a29464c3-34f0-4d60-82bb-614b8128b7f9",
            "version": "KqlParameterItem/1.0",
            "name": "ContainerNameWithBackupItemName",
            "label": "Search BackupItem Name",
            "type": 1,
            "value": "",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "5dc2a074-b510-44f2-9530-cfcbd159b59c",
            "version": "KqlParameterItem/1.0",
            "name": "ComplianceMetricSortBy",
            "label": "Sort By:",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{ \"value\": \"DaysWithBackupSuccess\", \"label\": \"# Days With Successful Backup\", \"selected\":true },\r\n{ \"value\": \"DaysWithNoBackupSuccess\", \"label\": \"# Days with No Successful Backup\"},\r\n{ \"value\": \"DaysWithNoBackup\", \"label\": \"# Days with No Backup\"}]\r\n\r\n\r\n\r\n",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "df3cc03c-53f7-4523-a29b-e50bf1b6d922",
            "version": "KqlParameterItem/1.0",
            "name": "ComplianceMetricOrder",
            "label": "Order:",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{ \"value\": \"asc\", \"label\": \"Ascending\" },{ \"value\": \"desc\", \"label\": \"Descending\", \"selected\":true }]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "b7f834d2-6cb6-4c13-9c75-00af85dc6bb5",
            "version": "KqlParameterItem/1.0",
            "name": "ComplianceMetricRowsPerGrid",
            "label": "Items per page",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "bd8c20d7-10eb-4a04-8519-07fbd2311f18",
            "version": "KqlParameterItem/1.0",
            "name": "ComplianceMetricPageNumber",
            "label": "Page:",
            "type": 2,
            "isRequired": true,
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s, ResourceId\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId\r\n| distinct PolicyUniqueId, PolicyName, ResourceId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" \r\n| distinct PolicyUniqueId, PolicyName, ResourceId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, PolicyUniqueId\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, PolicyUniqueId\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId, PolicyUniqueId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId \r\n};\r\nlet LatestJobTable = ()\r\n{ union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n| where JobUniqueId != \"\" or ContainerNameWithBackupItemName != \"\"\r\n}; \r\n//JobUniqueId*, BackupItemName*, TimeGenerated*, Failure Code*, Data Transferred*, Duration*, Adhoc, Operation* \r\nlet LatestPolicyTable = () {CombinedTable | union isfuzzy = true \r\n(PolicyUnderAzureDiagnostics()),\r\n(PolicyUnderResourceSpecific())\r\n| distinct PolicyUniqueId, PolicyName, ResourceId};\r\nlet ComplianceMetricTable = ()\r\n{\r\n// Fetch Only Job based on BackupItem as considering only BackupJobs\r\nlet BackJobMetric = LatestJobTableBasedOnBackupItem \r\n// Filter only BackupJobs and BackupItems with no jobs\r\n| where JobOperation == \"\" or JobOperation == \"Backup\"\r\n| summarize jobCount =countif(JobUniqueId != \"\"), jobSuccess = countif(JobStatus == \"Completed\" or JobStatus == \"CompletedWithWarnings\" ) by ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId, JobCreationDate = format_datetime(todatetime(JobStartDateTime),\"yyyy-MM-dd\");\r\nBackJobMetric\r\n| summarize by ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId\r\n| extend Day = range(Today-1d, RangeStart, -1d)\r\n| mv-expand Day\r\n| project ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId, Day = format_datetime(todatetime(Day),\"yyyy-MM-dd\")\r\n| join kind = leftouter \r\n( BackJobMetric\r\n) on ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId, $left.Day == $right.JobCreationDate\r\n| project ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId, Day, Compliance =iff(isnull(jobCount),\"⚪️\",iff(jobSuccess>0,\"✔️\",\"❌\"))\r\n| sort by ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId, Day desc\r\n| summarize DaysWithNoBackupSuccess = countif(Compliance==\"❌\"), DaysWithBackupSuccess = countif(Compliance==\"✔️\"), DaysWithNoBackup = countif(Compliance==\"⚪️\"), ComplianceDist = makelist(Compliance)  \r\n  by ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId\r\n| join kind= leftouter (LatestPolicyTable) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n}; \r\nlet ComplianceCount = ComplianceMetricTable\r\n| summarize c=count();\r\nlet PageEnd = (toscalar(ComplianceCount)-1)/{ComplianceMetricRowsPerGrid} + 1;\r\nrange pages from 1 to PageEnd step 1",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyAdherence"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyAdherence"
      },
      "customWidth": "90",
      "name": "parameters - 7",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%",
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end});\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= leftouter (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId, BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| summarize arg_max(TimeGenerated, *)  by JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s, ResourceId\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId\r\n| distinct PolicyUniqueId, PolicyName, ResourceId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" \r\n| distinct PolicyUniqueId, PolicyName, ResourceId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId \r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join kind= rightouter (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| distinct BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, PolicyUniqueId\r\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, PolicyUniqueId\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId, PolicyUniqueId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId \r\n};\r\nlet LatestJobTable = ()\r\n{ union  \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(LatestJobTableBasedOnBackupManagementServer())\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where ContainerNameWithBackupItemName contains (@\"{ContainerNameWithBackupItemName}\") or '*' in (@\"{ContainerNameWithBackupItemName}\")\r\n| where JobUniqueId != \"\" or ContainerNameWithBackupItemName != \"\"\r\n}; \r\n//JobUniqueId*, BackupItemName*, TimeGenerated*, Failure Code*, Data Transferred*, Duration*, Adhoc, Operation* \r\nlet LatestPolicyTable = () {CombinedTable | union isfuzzy = true \r\n(PolicyUnderAzureDiagnostics()),\r\n(PolicyUnderResourceSpecific())\r\n| distinct PolicyUniqueId, PolicyName, ResourceId};\r\nlet ComplianceMetricTable = ()\r\n{\r\n// Fetch Only Job based on BackupItem as considering only BackupJobs\r\nlet BackJobMetric = LatestJobTableBasedOnBackupItem \r\n// Filter only BackupJobs and BackupItems with no jobs\r\n| where JobOperation == \"\" or JobOperation == \"Backup\"\r\n| summarize jobCount =countif(JobUniqueId != \"\"), jobSuccess = countif(JobStatus == \"Completed\" or JobStatus == \"CompletedWithWarnings\" ) by ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId, JobCreationDate = format_datetime(todatetime(JobStartDateTime),\"yyyy-MM-dd\");\r\nBackJobMetric\r\n| summarize by ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId\r\n| extend Day = range(Today-1d, RangeStart, -1d)\r\n| mv-expand Day\r\n| project ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId, Day = format_datetime(todatetime(Day),\"yyyy-MM-dd\")\r\n| join kind = leftouter \r\n( BackJobMetric\r\n) on ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId, $left.Day == $right.JobCreationDate\r\n| project ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId, Day, Compliance =iff(isnull(jobCount),\"⚪️\",iff(jobSuccess>0,\"✔️\",\"❌\"))\r\n| sort by ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId, Day desc\r\n| summarize DaysWithNoBackupSuccess = countif(Compliance==\"❌\"), DaysWithBackupSuccess = countif(Compliance==\"✔️\"), DaysWithNoBackup = countif(Compliance==\"⚪️\"), ComplianceDist = makelist(Compliance)  \r\n  by ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId\r\n| join kind= leftouter (LatestPolicyTable) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| extend PolicyLink = strcat(ResourceId, \"/backupPolicies/\", PolicyName)\r\n| extend TempColumn = column_ifexists(tostring('{ComplianceMetricSortBy:value}'), \"DaysWithNoBackupSuccess\")\r\n| extend ColumnToBeSorted = iff(tostring('{ComplianceMetricOrder:value}') == \"asc\", 90000000 - toint(TempColumn), toint(TempColumn) - 90000000)\r\n| sort by ColumnToBeSorted, ContainerNameWithBackupItemName, PolicyUniqueId, ResourceId asc nulls last\r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/10 + 1))\r\n| where page_num has ('{ComplianceMetricPageNumber}') or '*' in ('{ComplianceMetricPageNumber}')\r\n| project ContainerNameWithBackupItemName, DaysWithBackupSuccess, DaysWithNoBackupSuccess, DaysWithNoBackup, ComplianceDist = replace(\"\\\\]\",\"\",replace(\"\\\\[\",\"\",replace(\",\",\"\",replace(\"\\\"\",\"\",tostring(ComplianceDist))))), PolicyName, PolicyLink\r\n}; \r\nComplianceMetricTable",
        "size": 3,
        "exportToExcelOptions": "visible",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "ContainerNameWithBackupItemName",
              "formatter": 16,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "DaysWithBackupSuccess",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "DaysWithNoBackupSuccess",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "DaysWithNoBackup",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ComplianceDist",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "PolicyName",
              "formatter": 16,
              "formatOptions": {
                "linkColumn": "PolicyLink",
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "PolicyLink",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Compliance Distribution",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "ContainerNameWithBackupItemName",
              "label": "BackupItem Name"
            },
            {
              "columnId": "DaysWithBackupSuccess",
              "label": "# Days With Successful Backup"
            },
            {
              "columnId": "DaysWithNoBackupSuccess",
              "label": "# Days With No Successful Backup"
            },
            {
              "columnId": "DaysWithNoBackup",
              "label": "# Days With No Backup"
            },
            {
              "columnId": "ComplianceDist",
              "label": "Trend of Policy Adherence"
            },
            {
              "columnId": "PolicyName",
              "label": "Policy Name"
            },
            {
              "columnId": "PolicyLink",
              "label": "Policy Link"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyAdherence"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyAdherence"
      },
      "customWidth": "100",
      "name": "compliance - last",
      "styleSettings": {
        "margin": "0% 0% 0% 0%",
        "showBorder": true
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "4aa1a909-c67b-4555-9536-c9ed26731d39",
            "version": "KqlParameterItem/1.0",
            "name": "AlertType",
            "label": "Alert Type",
            "type": 2,
            "description": "Select Alert Type",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "let RecordsUnderAzureDiagnostics = ( ) \r\n{\r\nlet AlertTable = AzureDiagnostics\r\n| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\"\r\n| extend AlertType = AlertType_s\r\n| summarize by AlertType;\r\nAlertTable\r\n};\r\n// Fetch data from ResourceSpecific\r\nlet RecordsUnderResourceSpecific = ( ) \r\n{\r\nlet AlertTable = AddonAzureBackupAlerts\r\n| where OperationName == \"Alert\" and SchemaVersion == \"V2\"\r\n| summarize by AlertType;\r\nAlertTable\r\n};\r\nCombinedTable | union isfuzzy = true \r\n(RecordsUnderAzureDiagnostics()),\r\n(RecordsUnderResourceSpecific())\r\n| project AlertType\r\n\r\n",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ]
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "b0ba5e8b-029d-4708-80af-0b7d0c066359",
            "version": "KqlParameterItem/1.0",
            "name": "AlertSeverity",
            "label": "Alert Severity",
            "type": 2,
            "description": "Select Alert Severity",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ]
            },
            "jsonData": "[\r\n    { \"value\":\"Critical\"},\r\n    { \"value\":\"Information\"},\r\n    { \"value\":\"Warning\"}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDistribution"
      },
      "name": "AlertDist - first"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\n\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\t\r\n\t| where TimeGenerated >= startofday({TimeRange:start})\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= startofday({TimeRange:start}) and AlertOccurrenceDateTime <= startofday({TimeRange:end})+1d;\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct *\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd\r\n);\r\nlet FinalAlert = ()\r\n{\r\n  AlertTableWithAppliedFilter \r\n  | where AlertUniqueId != \"\"\r\n  | summarize count() by AlertSeverity;\r\n};\r\nFinalAlert",
        "size": 4,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "title": "Alerts by Severity",
        "color": "green",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "piechart"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDistribution"
      },
      "customWidth": "50",
      "showPin": true,
      "name": "Severity Destribution"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\t\r\n\t| where TimeGenerated >= startofday({TimeRange:start})\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= startofday({TimeRange:start}) and AlertOccurrenceDateTime <= startofday({TimeRange:end})+1d;\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n\t | where AlertSeverity in ({AlertSeverity})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct *\r\n| where AlertUniqueId != \"\"\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd\r\n);\r\n\r\nlet AlertResolvePercent = AlertTableWithAppliedFilter\r\n| extend resolved=iff((AlertStatus == \"Resolved\") , 1 , 0)\r\n| extend record = 1 // to be used for total row count\r\n| summarize ResolvedCount =sum(resolved), TotalCount=sum(record)\r\n| extend AlertResolvedPercentage = (ResolvedCount*100)/todouble(TotalCount)\r\n| project AlertResolvedPercentage \r\n| extend  Key = pack_array(\"Resolved%\"), Value = pack_array( AlertResolvedPercentage), Row = pack_array(1000)\r\n| project Key, Value, Row\r\n| mvexpand  Key, Value, Row; \r\nlet AlertStatusTable = AlertTableWithAppliedFilter\r\n| summarize dcount(AlertUniqueId) by AlertStatus\r\n| order by AlertStatus asc\r\n| extend row_num = row_number()\r\n| extend  Key = pack_array(AlertStatus), Value = pack_array( dcount_AlertUniqueId), Row = pack_array(row_num)\r\n| project Key, Value, Row\r\n| mvexpand  Key, Value, Row;\r\nunion  AlertStatusTable, AlertResolvePercent \r\n| order by toint(Row) asc",
        "size": 3,
        "exportDefaultValue": "0",
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "tiles",
        "gridSettings": {
          "rowLimit": 10
        },
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Key",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatter": 12,
            "formatOptions": {
              "showIcon": true
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2,
                "maximumSignificantDigits": 3
              }
            }
          },
          "showBorder": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDistribution"
      },
      "customWidth": "50",
      "showPin": true,
      "name": "AlertActivity",
      "styleSettings": {
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">Fired and Resolved Alerts by BackupItem</span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDistribution"
      },
      "name": "text - 18",
      "styleSettings": {
        "margin": "0% 0% 15px 0%"
      }
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "nav",
        "links": [
          {
            "cellValue": "{\"01) BackupItem Name\": \"Name of the BackupItem\", \"02) BackupItem Type\": \"Type of item being backed up, in format BackupManagement Type/BackupItem Type\", \"03) # Alerts Created\": \"Number of Alerts fired for the given BackupItem in period\", \"04) # Alerts Resolved\": \"Number of Alerts resolved for the given BackupItem in the chosen period\", \"05) Avg Alert Resolution time (hrs)\": \"Average resolution time for alerts fired for the given BackupItem in the chosen period\"}",
            "linkTarget": "CellDetails",
            "linkLabel": "ⓘ",
            "style": "link",
            "linkIsContextBlade": true
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDistribution"
      },
      "customWidth": "0",
      "name": "links - 17"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "bfc9862a-9c20-4cb1-b0aa-57ad0276f9d3",
            "version": "KqlParameterItem/1.0",
            "name": "SearchByBackupItemNameWithContainerName",
            "label": "Search BackupItem Name",
            "type": 1,
            "description": "Search by BackupItem Name",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "cf94af25-e5b0-425f-854d-7b29384345b7",
            "version": "KqlParameterItem/1.0",
            "name": "SortBy",
            "label": "Sort By",
            "type": 2,
            "description": "Sort by a certain column",
            "isRequired": true,
            "value": "AlertsCreated",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"AlertsCreated\"},\r\n    { \"value\":\"AlertsResolved\"},\r\n    { \"value\":\"AvgAlertResolutionTimeInHrs\"}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "675c2cea-08bf-4c19-a43e-f4aa7c5b39e6",
            "version": "KqlParameterItem/1.0",
            "name": "Order",
            "type": 2,
            "description": "Sort order",
            "isRequired": true,
            "value": "Ascending",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"Ascending\"},\r\n    { \"value\":\"Descending\"}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "3e0adeb9-cc5d-4968-8ef7-4410f8ddec4a",
            "version": "KqlParameterItem/1.0",
            "name": "AlertDistributionPageSize",
            "label": "Items per page",
            "type": 2,
            "description": "Number of rows per page you want to view (max 500)",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "a777e46d-fec1-4a42-a4a4-1bd30ec8b886",
            "version": "KqlParameterItem/1.0",
            "name": "PageNumber",
            "label": "Page Number",
            "type": 2,
            "description": "Page Number",
            "isRequired": true,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\t\r\n\t| where TimeGenerated >= startofday({TimeRange:start})\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= startofday({TimeRange:start}) and AlertOccurrenceDateTime <= startofday({TimeRange:end})+1d;\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n\t | where AlertSeverity in ({AlertSeverity})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct *\r\n| where AlertUniqueId != \"\"\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd\r\n);\r\n\r\nlet FinalAlertTable = ()\r\n{\r\n\tAlertTableWithAppliedFilter\t\r\n\t| where ContainerNameWithBackupItemName contains (@\"{SearchByBackupItemNameWithContainerName}\") or '*' in (@'{SearchByBackupItemNameWithContainerName}')\r\n\t| extend TimeToResolve = iif(AlertStatus == \"Resolved\", todouble(AlertTimeToResolveInMinutes)/60, 0.0)\r\n\t| extend BackupItemName = ContainerNameWithBackupItemName, BackupItemType = BMSTypeWithBackupItemType\r\n\t| summarize AlertsCreated = countif(AlertStatus == \"Active\"), AlertsResolved = countif( AlertStatus == \"Resolved\"), AvgAlertResolutionTimeInHrs = avgif(TimeToResolve, AlertStatus == \"Resolved\") by BackupItemName , BackupItemType\r\n\t| extend TempColumn = column_ifexists(tostring('{SortBy}'), \"AlertsCreated\")\r\n\t| extend ColumnToBeSorted = iff(tostring('{Order}') == \"Ascending\", 90000000 - TempColumn, TempColumn - 90000000)\r\n\t| sort by ColumnToBeSorted, BackupItemName asc nulls last\r\n\t| extend row_num = row_number()\r\n    | extend pageSize = iff(isempty((@\"{AlertDistributionPageSize}\")), \"10\", (@\"{AlertDistributionPageSize}\"))\r\n\t| extend page_num = tostring(((row_num-1)/toint(pageSize) + 1))\r\n    | distinct page_num\r\n}; \r\nFinalAlertTable\r\n\r\n\r\n",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDistribution"
      },
      "customWidth": "90",
      "name": "parameters - 12",
      "styleSettings": {
        "margin": "-23px 0% 15px 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\t\r\n\t| where TimeGenerated >= startofday({TimeRange:start})\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= startofday({TimeRange:start}) and AlertOccurrenceDateTime <= startofday({TimeRange:end})+1d;\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n\t | where AlertSeverity in ({AlertSeverity})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd, ResourceId;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd, ResourceId;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd, ResourceId;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd, ResourceId;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct *\r\n| where AlertUniqueId != \"\"\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd, ResourceId\r\n);\r\n\r\nlet FinalAlertTable = ()\r\n{\r\n\tAlertTableWithAppliedFilter\t\r\n\t| where ContainerNameWithBackupItemName contains (@\"{SearchByBackupItemNameWithContainerName}\") or '*' in (@'{SearchByBackupItemNameWithContainerName}')\r\n\t| extend TimeToResolve = iif(AlertStatus == \"Resolved\", todouble(AlertTimeToResolveInMinutes)/60, 0.0)\r\n\t| extend BackupItemName = ContainerNameWithBackupItemName, BackupItemType = BMSTypeWithBackupItemType\r\n\t| summarize AlertsCreated = countif(AlertStatus == \"Active\"), AlertsResolved = countif( AlertStatus == \"Resolved\"), AvgAlertResolutionTimeInHrs = avgif(TimeToResolve, AlertStatus == \"Resolved\") by BackupItemName , BackupItemType, ResourceId\r\n\t| extend TempColumn = column_ifexists(tostring('{SortBy}'), \"AlertsCreated\")\r\n\t| extend ColumnToBeSorted = iff(tostring('{Order}') == \"Ascending\", 90000000 - TempColumn, TempColumn - 90000000)\r\n\t| sort by ColumnToBeSorted, BackupItemName asc nulls last\r\n\t| extend row_num = row_number()\r\n\t| extend pageSize = iff(isempty((@\"{AlertDistributionPageSize}\")), \"10\", (@\"{AlertDistributionPageSize}\"))\r\n\t| extend page_num = tostring(((row_num-1)/toint(pageSize) + 1))\r\n\t| where page_num has ('{PageNumber}') or '*' in ('{PageNumber}')\r\n\t| extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\r\n\t| extend contianerName = iff((split(BackupItemName, \"/\")[0] != \"\" and array_length(split((split(BackupItemName, \"/\")[0]),\";\")) == 3), split(BackupItemName,\"/\")[0], \"\")\r\n\t| extend rgName = iff(contianerName != \"\", split(contianerName,\";\")[1], \"\")\r\n\t| extend entityName = iff(contianerName != \"\", split(contianerName,\";\")[2], \"\")\r\n\t| extend entityType = iff(contianerName != \"\", split(contianerName,\";\")[0], \"\")\r\n\t| extend entityTypeForAzureStorageUrl = iff(BackupItemType == \"AzureStorage/AzureFileShare\", iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), \"\")\r\n\t| extend entityTypeForIaaSVMUrl = iff(BackupItemType == \"IaaSVM/VM\", iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n\t| extend entityTypeForAzureWorkloadUrl = iff((BackupItemType == \"AzureWorkload/SAPHanaDatabase\" or BackupItemType == \"AzureWorkload/SQLDataBase\"), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n\t| extend finalUrl = iff(contianerName != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId)\r\n\t| project BackupItemName, BackupItemType, AlertsCreated, AlertsResolved, AvgAlertResolutionTimeInHrs, finalUrl = tolower(finalUrl)\r\n}; \r\nFinalAlertTable\r\n\r\n\r\n",
        "size": 3,
        "exportFieldName": "BackupItemName",
        "exportParameterName": "SelectedContainerNameWithBackupItemName",
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "BackupItemName",
              "formatter": 16,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "BackupItemType",
              "formatter": 13,
              "formatOptions": {
                "linkColumn": "finalUrl",
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "AlertsCreated",
              "formatter": 18,
              "formatOptions": {
                "palette": "orange",
                "linkTarget": "WorkbookTemplate",
                "showIcon": true,
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ],
                "workbookContext": {
                  "componentIdSource": "workbook",
                  "resourceIdsSource": "workbook",
                  "templateIdSource": "static",
                  "templateId": "Community-Workbooks/Azure Backup/Alert Details",
                  "typeSource": "default",
                  "gallerySource": "static",
                  "gallery": "Azure Monitor"
                }
              }
            },
            {
              "columnMatch": "AlertsResolved",
              "formatter": 18,
              "formatOptions": {
                "palette": "orange",
                "showIcon": true,
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "AvgAlertResolutionTimeInHrs",
              "formatter": 18,
              "formatOptions": {
                "min": 0,
                "palette": "orange",
                "showIcon": true,
                "thresholdsOptions": "colors",
                "thresholdsGrid": [
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "text": "{0}{1}"
                  }
                ]
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "finalUrl",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "sortBy": [
            {
              "itemKey": "$gen_thresholds_AlertsCreated_2",
              "sortOrder": 2
            }
          ],
          "labelSettings": [
            {
              "columnId": "BackupItemName",
              "label": "Backup Item Name"
            },
            {
              "columnId": "BackupItemType",
              "label": "Backup Item Type"
            },
            {
              "columnId": "AlertsCreated",
              "label": "# Alerts Created"
            },
            {
              "columnId": "AlertsResolved",
              "label": "# Alerts Resolved"
            },
            {
              "columnId": "AvgAlertResolutionTimeInHrs",
              "label": "Avg Alert Resolution Time (hrs)"
            },
            {
              "columnId": "finalUrl",
              "label": "finalUrl"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDistribution"
      },
      "showPin": true,
      "name": "AlertDistributionFiredResolvedByBackupItem",
      "styleSettings": {
        "margin": "-15px 0% 0% 0%",
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\t\r\n\t| where TimeGenerated >= startofday({TimeRange:start})\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= startofday({TimeRange:start}) and AlertOccurrenceDateTime <= startofday({TimeRange:end})+1d;\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n\t | where AlertSeverity in ({AlertSeverity})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct *\r\n| where AlertUniqueId != \"\"\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd\r\n);\r\n\r\nlet FinalAlertTable = ()\r\n{\r\n\tAlertTableWithAppliedFilter\t\r\n    | where ContainerNameWithBackupItemName == (@\"{SelectedContainerNameWithBackupItemName}\") or '*' in (@\"{SelectedContainerNameWithBackupItemName}\")\r\n    | summarize count(AlertSeverity) by AlertSeverity, bin(TimeRangeEnd, 2d)\r\n}; \r\nFinalAlertTable\r\n",
        "size": 0,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "title": "Alerts by Severity over Time",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "barchart",
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "Critical",
              "color": "red"
            },
            {
              "seriesName": "Warning",
              "color": "orange"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDistribution"
      },
      "customWidth": "50",
      "showPin": true,
      "name": "AlertCreatedVsResolvedWithTime"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\t\r\n\t| where TimeGenerated >= startofday({TimeRange:start})\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= startofday({TimeRange:start}) and AlertOccurrenceDateTime <= startofday({TimeRange:end})+1d;\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n\t | where AlertSeverity in ({AlertSeverity})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct *\r\n| where AlertUniqueId != \"\"\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd\r\n);\r\n\r\nlet FinalAlertTable = ()\r\n{\r\n\tAlertTableWithAppliedFilter\t\r\n    | where ContainerNameWithBackupItemName == (@\"{SelectedContainerNameWithBackupItemName}\") or '*' in (@\"{SelectedContainerNameWithBackupItemName}\")\r\n    | summarize count() by AlertType, AlertSeverity\r\n}; \r\nFinalAlertTable\r\n",
        "size": 0,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "title": "Alerts by Alert Type",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "barchart",
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "AlertType_s",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "count_",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDistribution"
      },
      "customWidth": "50",
      "showPin": true,
      "name": "AlertDist - last"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "4aa1a909-c67b-4555-9536-c9ed26731d39",
            "version": "KqlParameterItem/1.0",
            "name": "AlertType",
            "label": "Alert Type",
            "type": 2,
            "description": "Select Alert Type",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "let RecordsUnderAzureDiagnostics = ( ) \r\n{\r\nlet AlertTable = AzureDiagnostics\r\n| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\"\r\n| extend AlertType = AlertType_s\r\n| summarize by AlertType;\r\nAlertTable\r\n};\r\n// Fetch data from ResourceSpecific\r\nlet RecordsUnderResourceSpecific = ( ) \r\n{\r\nlet AlertTable = AddonAzureBackupAlerts\r\n| where OperationName == \"Alert\" and SchemaVersion == \"V2\"\r\n| summarize by AlertType;\r\nAlertTable\r\n};\r\nCombinedTable | union isfuzzy = true \r\n(RecordsUnderAzureDiagnostics()),\r\n(RecordsUnderResourceSpecific())\r\n| project AlertType\r\n\r\n",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ]
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "ae412de7-f7ec-439c-816d-736270a57c6e",
            "version": "KqlParameterItem/1.0",
            "name": "AlertStatus",
            "label": "Alert Status",
            "type": 2,
            "description": "Select Alert Status",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ]
            },
            "jsonData": "[\r\n    { \"value\":\"Active\"},\r\n    { \"value\":\"Resolved\"}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "b0ba5e8b-029d-4708-80af-0b7d0c066359",
            "version": "KqlParameterItem/1.0",
            "name": "AlertSeverity",
            "label": "Alert Severity",
            "type": 2,
            "description": "Select Alert Severity",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ]
            },
            "jsonData": "[\r\n    { \"value\":\"Critical\"},\r\n    { \"value\":\"Information\"},\r\n    { \"value\":\"Warning\"}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDetails"
      },
      "name": "AlertDet - first"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\t\r\n\t| where TimeGenerated >= startofday({TimeRange:start})\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= startofday({TimeRange:start}) and AlertOccurrenceDateTime <= startofday({TimeRange:end})+1d;\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct *\r\n| where AlertUniqueId != \"\"\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd\r\n);\r\nlet FinalAlert = ()\r\n{\r\n  AlertTableWithAppliedFilter \r\n  | summarize count() by AlertSeverity;\r\n};\r\nFinalAlert",
        "size": 4,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "title": "Alerts by Severity",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "piechart",
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "AlertSeverity",
              "sortOrder": 1
            }
          ],
          "labelSettings": [
            {
              "columnId": "AlertSeverity",
              "label": "AlertSeverity"
            },
            {
              "columnId": "count_",
              "label": "count_"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDetails"
      },
      "customWidth": "50",
      "showPin": true,
      "name": "query - 8"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\t\r\n\t| where TimeGenerated >= startofday({TimeRange:start})\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= startofday({TimeRange:start}) and AlertOccurrenceDateTime <= startofday({TimeRange:end})+1d;\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n\t | where AlertSeverity in ({AlertSeverity})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct *\r\n| where AlertUniqueId != \"\"\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd\r\n);\r\n\r\nlet AlertResolvePercent = AlertTableWithAppliedFilter\r\n| extend resolved=iff((AlertStatus == \"Resolved\") , 1 , 0)\r\n| extend record = 1 // to be used for total row count\r\n| summarize ResolvedCount =sum(resolved), TotalCount=sum(record)\r\n| extend AlertResolvedPercentage = (ResolvedCount*100)/todouble(TotalCount)\r\n| project AlertResolvedPercentage \r\n| extend  Key = pack_array(\"Resolved%\"), Value = pack_array( AlertResolvedPercentage), Row = pack_array(1000)\r\n| project Key, Value, Row\r\n| mvexpand  Key, Value, Row; \r\nlet AlertStatusTable = AlertTableWithAppliedFilter\r\n| summarize dcount(AlertUniqueId) by AlertStatus\r\n| order by AlertStatus asc\r\n| extend row_num = row_number()\r\n| extend  Key = pack_array(AlertStatus), Value = pack_array( dcount_AlertUniqueId), Row = pack_array(row_num)\r\n| project Key, Value, Row\r\n| mvexpand  Key, Value, Row;\r\nunion  AlertStatusTable, AlertResolvePercent \r\n| order by toint(Row) asc",
        "size": 3,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Key",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatter": 12,
            "formatOptions": {
              "showIcon": true
            }
          },
          "showBorder": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDetails"
      },
      "customWidth": "50",
      "showPin": true,
      "name": "query - 9"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">List of Alerts in Period </span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDetails"
      },
      "name": "text - 15",
      "styleSettings": {
        "margin": "0% 0% 20px 0%"
      }
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "nav",
        "links": [
          {
            "cellValue": "{\"01) BackupItem Name\": \"Name of the BackupItem\", \"02) BackupItem Type\": \"Type of the BackupItem, in format BackupManagementType/BackupItemType\", \"03) Alert Type\": \"Type of Alert\", \"04) Alert Severity\":\"Severity of alert\", \"05) Alert Status\": \"Current status of alert (irrespective of time range selected)\", \"06) Alert Created On\": \"Data and time when alert was created\", \"07) Alert Resolution Time (hrs)\": \"Amount of time taken to resolve the alert\"}",
            "linkTarget": "CellDetails",
            "linkLabel": "ⓘ",
            "style": "link",
            "linkIsContextBlade": true
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDetails"
      },
      "customWidth": "0",
      "name": "links - 14"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "bfc9862a-9c20-4cb1-b0aa-57ad0276f9d3",
            "version": "KqlParameterItem/1.0",
            "name": "SearchByBackupItemNameWithContainerName",
            "label": "Search by BackupItem name",
            "type": 1,
            "description": "Search by BackupItem Name",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "cf94af25-e5b0-425f-854d-7b29384345b7",
            "version": "KqlParameterItem/1.0",
            "name": "SortBy",
            "label": "Sort By",
            "type": 2,
            "description": "Sort by a certain column",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"AlertResoultionTimeInHrs\", \"selected\":true}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "675c2cea-08bf-4c19-a43e-f4aa7c5b39e6",
            "version": "KqlParameterItem/1.0",
            "name": "Order",
            "type": 2,
            "description": "Sort Order",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"Ascending\"},\r\n    { \"value\":\"Descending\", \"selected\":true}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "bd499731-5cfe-4845-8d05-30b99deecb9a",
            "version": "KqlParameterItem/1.0",
            "name": "AlertDetailsPageSize",
            "label": "Items per page",
            "type": 2,
            "description": "Number of rows on each page (max 500)",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "c286a355-8534-41c1-8a3e-c5f940701787",
            "version": "KqlParameterItem/1.0",
            "name": "AlertDetailsPageNumber",
            "label": "Page Number",
            "type": 2,
            "description": "Page Number",
            "isRequired": true,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\t\r\n\t| where TimeGenerated >= startofday({TimeRange:start})\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= startofday({TimeRange:start}) and AlertOccurrenceDateTime <= startofday({TimeRange:end})+1d;\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n     | where AlertStatus in ({AlertStatus})\r\n\t | where AlertSeverity in ({AlertSeverity})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct *\r\n| where AlertUniqueId != \"\"\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd\r\n);\r\n\r\nlet FinalAlertTable = ()\r\n{\r\nAlertTableWithAppliedFilter\r\n| where ContainerNameWithBackupItemName contains (@\"{SearchByBackupItemNameWithContainerName}\") or '*' in (@'{SearchByBackupItemNameWithContainerName}')\r\n| extend AlertResoultionTimeInHrs = iif(AlertStatus == \"Resolved\" and AlertTimeToResolveInMinutes != \"\", todouble(AlertTimeToResolveInMinutes)/60, 0.0)\r\n| extend BackupItemName = ContainerNameWithBackupItemName, BackupItemType = BMSTypeWithBackupItemType\r\n| extend AlertCreatedOn = format_datetime(todatetime(AlertOccurrenceDateTime), 'yyyy-MM-dd HH:mm:ss')\r\n| project BackupItemName, BackupItemType, AlertType, AlertSeverity, AlertStatus, AlertCreatedOn, AlertResoultionTimeInHrs, AlertUniqueId\r\n}; \r\n\r\nFinalAlertTable\r\n//| extend TempColumn = column_ifexists(tostring(@'{SortBy}'), \"AlertCreatedOn\")\r\n//| extend ColumnToBeSorted = iff(tostring('{Order}') == \"Ascending\", TempColumn - 90000000, 90000000 - TempColumn)\r\n| sort by AlertCreatedOn desc nulls last\r\n| extend row_num = row_number()\r\n| extend pageSize = iff(isempty((@\"{AlertDetailsPageSize}\")), \"10\", (@\"{AlertDetailsPageSize}\"))\r\n| extend page_num = tostring(((row_num-1)/toint(pageSize) + 1))\r\n| distinct page_num\r\n",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDetails"
      },
      "customWidth": "90",
      "name": "parameters - 12",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\n//Fetch Vault Table\r\nlet VaultTable = ( )\r\n{\r\n\tlet VaultTableFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n\t| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n\t\r\n\tlet VaultTableFromCoreAzureBackup = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Vault\" \r\n\t| where VaultName in ({Vault}) or '*' in ({Vault})\r\n\t| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId\r\n\t| project ResourceId, TimeRangeEnd;\r\n    \r\n\tlet FinalVaultTable = materialize(\r\n\tCombinedTable | union isfuzzy = true \r\n\t(VaultTableFromCoreAzureBackup),\r\n\t(VaultTableFromAzureDiagnostics)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ResourceId);\r\n\t\r\n    FinalVaultTable\r\n    | project ResourceId\r\n};\r\n\r\n\r\n//Fetch Backup Item Info Table\r\nlet BackupItemInfoTable = ( )\r\n{\r\n\tlet BackupItemAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d \r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId_s;\r\n\r\n\tlet BackupItemInfoFromAzureDiagnostics =  BackupItemFromAzureDiagnostics\r\n\t| join BackupItemAssociationFromAzureDiagnostics on BackupItemUniqueId_s\r\n\t| extend BMSTypeWithBackupItemType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \"/\", column_ifexists(\"BackupItemType_s\", \"\")), BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s1\", \"\"), BackupItemName = column_ifexists(\"BackupItemName_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\r\n\tlet BackupItemInfoFromResourceSpecific =  BackupItemFromResourceSpecific\r\n\t| join BackupItemAssociationResourceSpecific on BackupItemUniqueId\r\n\t| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\");\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupItemInfoFromAzureDiagnostics),\r\n\t(BackupItemInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupItemUniqueId;\r\n\t\r\n\t\r\n\t\r\n\tlet BackupItemInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupItemInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t\r\n\t\r\n\tBackupItemInfoInSelectedVault\r\n\t| project ProtectedContainerUniqueId, BackupItemName, BackupItemUniqueId, BMSTypeWithBackupItemType;\r\n};\r\n\r\n\r\n//Fetch Protected Container Info Table\r\nlet ProtectedContainerInfoTable = ()\r\n{\r\n\tlet ProtectedContainerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by column_ifexists(\"ProtectedContainerUniqueId_s\", \"\");\r\n\r\n\tlet ProtectedContainerInfoFromAzureDiagnostics =  ProtectedContainerFromAzureDiagnostics\r\n\t| join kind = inner (ProtectedContainerAssociationFromAzureDiagnostics) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s1\", \"\"), ProtectedContainerName = column_ifexists(\"ProtectedContainerName_s\", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\r\n\tlet ProtectedContainerInfoFromResourceSpecific =  ProtectedContainerFromResourceSpecific\r\n\t| join kind = inner (ProtectedContainerAssociationResourceSpecific) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId1\", \"\"), ProtectedContainerName = ProtectedContainerName;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet ProtectedContainerInfo = CombinedTable | union isfuzzy = true \r\n\t(ProtectedContainerInfoFromAzureDiagnostics),\r\n\t(ProtectedContainerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by ProtectedContainerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let ProtectedContainerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       ProtectedContainerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tProtectedContainerInfoInSelectedVault\r\n \t| project ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupManagementServer Info Table\r\nlet BackupManagementServerInfoTable = ()\r\n{\r\n\tlet BackupManagementServerAssociationFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromAzureDiagnostics = AzureDiagnostics\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| extend NewBackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\")\r\n    | extend OldBackupManagementServerUniqueId = column_ifexists(\"BackupManagmentServerUniqueId_s\", \"\")\r\n    | extend BackupManagementServerUniqueId = strcat(NewBackupManagementServerUniqueId, OldBackupManagementServerUniqueId)\t\r\n\t| extend NewBackupManagementServerName = column_ifexists(\"BackupManagementServerName_s\", \"\")\r\n    | extend OldBackupManagementServerName = column_ifexists(\"BackupManagmentServerName_s\", \"\")\r\n    | extend BackupManagementServerName = strcat(NewBackupManagementServerName, OldBackupManagementServerName)\t\r\n\t| where OperationName == \"BackupManagementServer\" and SchemaVersion_s == \"V2\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromAzureDiagnostics =  BackupManagementServerFromAzureDiagnostics\r\n\t| join kind = inner (BackupManagementServerAssociationFromAzureDiagnostics) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(column_ifexists(\"BackupManagementType_s\", \"\"), \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerAssociationResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServerAssociation\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerFromResourceSpecific = CoreAzureBackup\r\n\t| where TimeGenerated >= startofday({TimeRange:start}) and TimeGenerated <= startofday({TimeRange:end}) + 1d\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\r\n\tlet BackupManagementServerInfoFromResourceSpecific =  BackupManagementServerFromResourceSpecific\r\n\t| join kind = inner (BackupManagementServerAssociationResourceSpecific) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend BackupManagementType = strcat(BackupManagementType, \" / \", \"\");\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tlet BackupManagementServerInfo = CombinedTable | union isfuzzy = true \r\n\t(BackupManagementServerInfoFromAzureDiagnostics),\r\n\t(BackupManagementServerInfoFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by BackupManagementServerUniqueId;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    let BackupManagementServerInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       BackupManagementServerInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\t \r\n\t \r\n\tBackupManagementServerInfoInSelectedVault\r\n\t| project BackupManagementServerUniqueId, BackupManagementServerName, BackupManagementType;\r\n};\r\n\r\n\r\n// Fetch BackupItem With ProtectedContainer Name\r\nlet BackupItemWithProtectedContainer = ( )\r\n{\r\n\tlet BackupItemWithProtectedContainerName = ProtectedContainerInfoTable\r\n\t| join kind = rightouter (BackupItemInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = replace(\" \", \"\", strcat(ProtectedContainerName, @\"/\", BackupItemName));\r\n\r\n    BackupItemWithProtectedContainerName\t\r\n};\r\n\r\n\r\n// Fetch Alert Info Table\r\nlet AlertInfoTable = ( )\r\n{\r\n\tlet AlertFromAzureDiagnostics = AzureDiagnostics\t\r\n\t| where TimeGenerated >= startofday({TimeRange:start})\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" and SchemaVersion_s == \"V2\" \r\n\t| extend AlertUniqueId = strcat(column_ifexists(\"AlertUniqueId_g\", \"\"), column_ifexists(\"AlertUniqueId_s\", \"\"))\r\n\t| extend BackupItemUniqueId = column_ifexists(\"BackupItemUniqueId_s\", \"\"), AlertStatus  = column_ifexists(\"AlertStatus_s\", \"\"), ProtectedContainerUniqueId = column_ifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = column_ifexists(\"BackupManagementServerUniqueId_s\", \"\"), AlertType = column_ifexists(\"AlertType_s\", \"\"), AlertSeverity = column_ifexists(\"AlertSeverity_s\", \"\"), AlertTimeToResolveInMinutes = toreal(column_ifexists(\"AlertTimeToResolveInMinutes_s\", \"\")), AlertOccurrenceDateTime = todatetime(column_ifexists(\"AlertOccurrenceDateTime_s\", \"\"))\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertFromResourceSpecific = AddonAzureBackupAlerts\r\n\t| where TimeGenerated >= {TimeRange:start}\r\n\t// Take records until previous day\r\n\t| extend TimeRangeEnd = TimeGenerated\r\n\t| where TimeRangeEnd < Today\r\n\t| where OperationName == \"Alert\" \r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId;\r\n\r\n\t\r\n\tlet AlertInfo = CombinedTable | union isfuzzy = true \r\n\t(AlertFromAzureDiagnostics),\r\n\t(AlertFromResourceSpecific)\t\r\n\t| summarize arg_max(TimeRangeEnd, *) by AlertUniqueId\r\n\t| where AlertOccurrenceDateTime >= startofday({TimeRange:start}) and AlertOccurrenceDateTime <= startofday({TimeRange:end})+1d;\r\n\t\r\n\t\r\n\tlet AlertInfoInSelectedVault = VaultTable \r\n\t| join kind = inner (\r\n       AlertInfo \r\n     ) on ResourceId == ResourceId;\r\n\t \r\n\t \r\n\tAlertInfoInSelectedVault\t\r\n};\r\n\r\n\r\n//**********************************************************************************************End of High-level Functions**********************************************************************************************\r\n\r\n\r\n//**********************************************************************************************Business Logic************************************************************************************************************\r\nlet AlertWithAlertSpecificFilters = ( )\r\n{\r\n\t AlertInfoTable\r\n\t | summarize arg_max(TimeGenerated, *)  by AlertUniqueId\r\n\t | where AlertType in ({AlertType})\r\n     | where AlertStatus in ({AlertStatus})\r\n\t | where AlertSeverity in ({AlertSeverity})\r\n     | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, AlertOccurrenceDateTime, TimeRangeEnd, ResourceId;\r\n};\r\n\r\nlet AlertUnderBackupItem = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId != \"\"\r\n\t| join kind = inner ( BackupItemWithProtectedContainer) on BackupItemUniqueId == BackupItemUniqueId\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd, ResourceId;\r\n};\r\n\r\nlet AlertUnderProtectedContainer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId != \"\"\r\n\t| join kind = innner ( ProtectedContainerInfoTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = ProtectedContainerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd, ResourceId;\r\n};\r\n\r\nlet AlertUnderBackupManagementServer = ()\r\n{\r\n\tAlertWithAlertSpecificFilters\r\n\t| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n\t| join kind = innner ( BackupManagementServerInfoTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n\t| extend ContainerNameWithBackupItemName = BackupManagementServerName, BMSTypeWithBackupItemType = BackupManagementType\r\n    | project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, BackupManagementServerUniqueId, ProtectedContainerUniqueId, BackupItemUniqueId, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd, ResourceId;\r\n};\r\n\r\n\r\nlet AlertTableWithAppliedFilter = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderBackupItem()),\r\n(AlertUnderProtectedContainer()),\r\n(AlertUnderBackupManagementServer())\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct *\r\n| where AlertUniqueId != \"\"\r\n| project AlertUniqueId, AlertStatus, AlertType, AlertSeverity, AlertTimeToResolveInMinutes, ContainerNameWithBackupItemName, BMSTypeWithBackupItemType, AlertOccurrenceDateTime, TimeRangeEnd, ResourceId\r\n);\r\n\r\nlet FinalAlertTable = ()\r\n{\r\nAlertTableWithAppliedFilter\r\n| where ContainerNameWithBackupItemName contains (@\"{SearchByBackupItemNameWithContainerName}\") or '*' in (@'{SearchByBackupItemNameWithContainerName}')\r\n| extend AlertResoultionTimeInHrs = iif(AlertStatus == \"Resolved\" and AlertTimeToResolveInMinutes != \"\", todouble(AlertTimeToResolveInMinutes)/60, 0.0)\r\n| extend BackupItemName = ContainerNameWithBackupItemName, BackupItemType = BMSTypeWithBackupItemType\r\n| extend AlertCreatedOn = format_datetime(todatetime(AlertOccurrenceDateTime), 'yyyy-MM-dd HH:mm:ss')\r\n| project BackupItemName, BackupItemType, AlertType, AlertSeverity, AlertStatus, AlertCreatedOn, AlertResoultionTimeInHrs, AlertUniqueId, ResourceId\r\n}; \r\n\r\nFinalAlertTable\r\n| extend TempColumn = column_ifexists(tostring('{SortBy}'), \"AlertsCreated\")\r\n| extend ColumnToBeSorted = iff(tostring('{Order}') == \"Ascending\", 90000000 - TempColumn, TempColumn - 90000000)\r\n| sort by ColumnToBeSorted, BackupItemName asc nulls last\r\n| extend row_num = row_number()\r\n| extend pageSize = iff(isempty((@\"{AlertDetailsPageSize}\")), \"10\", (@\"{AlertDetailsPageSize}\"))\r\n| extend page_num = tostring(((row_num-1)/toint(pageSize)+1))\r\n| where page_num has ('{AlertDetailsPageNumber}') or '*' in ('{AlertDetailsPageNumber}')\r\n| extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\r\n| extend contianerName = iff((split(BackupItemName, \"/\")[0] != \"\" and array_length(split((split(BackupItemName, \"/\")[0]),\";\")) == 3), split(BackupItemName,\"/\")[0], \"\")\r\n| extend rgName = iff(contianerName != \"\", split(contianerName,\";\")[1], \"\")\r\n| extend entityName = iff(contianerName != \"\", split(contianerName,\";\")[2], \"\")\r\n| extend entityType = iff(contianerName != \"\", split(contianerName,\";\")[0], \"\")\r\n| extend entityTypeForAzureStorageUrl = iff(BackupItemType == \"AzureStorage/AzureFileShare\", iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), \"\")\r\n| extend entityTypeForIaaSVMUrl = iff(BackupItemType == \"IaaSVM/VM\", iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend entityTypeForAzureWorkloadUrl = iff((BackupItemType == \"AzureWorkload/SAPHanaDatabase\" or BackupItemType == \"AzureWorkload/SQLDataBase\"), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend finalUrl = iff(contianerName != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId)\r\n| project BackupItemName, BackupItemType, AlertType, AlertSeverity, AlertStatus, AlertCreatedOn, AlertResoultionTimeInHrs, AlertUniqueId, finalUrl\r\n",
        "size": 3,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "BackupItemName",
              "formatter": 16,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "BackupItemType",
              "formatter": 13,
              "formatOptions": {
                "linkColumn": "finalUrl",
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "AlertType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "AlertSeverity",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "AlertStatus",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "AlertCreatedOn",
              "formatter": 6,
              "formatOptions": {
                "showIcon": true
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "fullDateTimePattern"
              }
            },
            {
              "columnMatch": "AlertResoultionTimeInHrs",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "AlertUniqueId",
              "formatter": 16,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "finalUrl",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "BackupItem Name",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "BackupItemName",
              "label": "BackupItemName"
            },
            {
              "columnId": "BackupItemType",
              "label": "BackupItemType"
            },
            {
              "columnId": "AlertType",
              "label": "AlertType"
            },
            {
              "columnId": "AlertSeverity",
              "label": "AlertSeverity"
            },
            {
              "columnId": "AlertStatus",
              "label": "AlertStatus"
            },
            {
              "columnId": "AlertCreatedOn",
              "label": "AlertCreatedOn"
            },
            {
              "columnId": "AlertResoultionTimeInHrs",
              "label": "AlertResolutionTimeInHrs"
            },
            {
              "columnId": "AlertUniqueId",
              "label": "AlertUniqueId"
            },
            {
              "columnId": "finalUrl",
              "label": "finalUrl"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "AlertDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "AlertDetails"
      },
      "showPin": true,
      "name": "AlertDet - last"
    }
  ],
  "styleSettings": {},
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}