{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Overview",
            "subTarget": "Overview",
            "style": "link"
          },
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Summary",
            "subTarget": "Summary",
            "style": "primary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "13bf0ff5-c132-4c85-910e-9de00bb3d26e",
              "typeSource": "workbook",
              "gallerySource": "workbook"
            }
          },
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Backup Items",
            "subTarget": "BackupItems",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Storage",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          },
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Usage",
            "subTarget": "Usage",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Protected Instances",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          },
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Jobs",
            "subTarget": "JobDistribution",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Job Distribution",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          },
          {
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Policies",
            "subTarget": "PolicyDetails",
            "style": "link"
          }
        ]
      },
      "name": "Tabs"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left;float:left;\"><span style=\"font-size:16px;font-weight:600\">Select Log Analytics Workspace </span> <br> <span style=\"font-size:12px;\"> <a href=\"https://aka.ms/AzureBackupDiagnosticsDocs\" target=\"_blank\"> How to configure vault diagnostic settings for backup reports </a> </span> </div> <div style=\"text-align:right; float:right\"> <span style=\"font-size:12px;\"> <a href=\"https://aka.ms/AzureBackupReportOld\" target=\"_blank\"> What happened to the Power BI reports? </a> </span> </div>"
      },
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Overview"
      },
      "name": "Overview-InstructionText"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Subscriptions}"
        ],
        "parameters": [
          {
            "id": "d1f42f81-eb8f-4653-a0ff-38564d7487b4",
            "version": "KqlParameterItem/1.0",
            "name": "Subscriptions",
            "type": 6,
            "description": "Subscriptions to filter the list of workspaces",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": false,
              "selectAllValue": ""
            }
          },
          {
            "id": "2373a24f-ad32-4909-a7f6-59b373dcde6c",
            "version": "KqlParameterItem/1.0",
            "name": "Workspaces",
            "type": 5,
            "description": "LA Workspaces configured in vault diagnostic settings",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type =~ 'microsoft.operationalinsights/workspaces' | project id",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "value": [],
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.resources/subscriptions"
      },
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Overview"
      },
      "customWidth": "50",
      "name": "Overview-WorkspaceParameterBlock"
    },
    {
      "type": 1,
      "content": {
        "json": "_____"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Overview"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "Overview-DividingLine1"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left;float:left;\"><span style=\"font-size:16px;font-weight:600\">Report Filters </span> </div> <div style=\"text-align:right; float:right\"> <span style=\"font-size:12px;\"> <a href=\"https://aka.ms/AzureBackupReportDocs\" target=\"_blank\"> How to use backup reports? </a> </span> </div>"
      },
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "Overview-ReportFiltersTitle"
    },
    {
      "type": 1,
      "content": {
        "json": "<p> <span style=\"font-size:12px; font-style:italic\"> Filters are applied left to right and top to bottom on each page. <a href=\"https://aka.ms/AzureBackupReportFilters\" target=\"_blank\">Learn More</a> </span> </p>"
      },
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "Overview-InstructionText2"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "8c4ae44c-fa9a-4498-aedc-736a56e64b43",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "label": "Time Range",
            "type": 4,
            "description": "Time Range",
            "value": {
              "durationMs": 604800000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "bb7c8d78-cf0c-4b47-af95-1c07ac0f6829",
            "version": "KqlParameterItem/1.0",
            "name": "ErrorHandle",
            "label": "Error Handle",
            "type": 1,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Client\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\",\r\n\t  \"AzureBackupServer/SQLDB\", \"Azure Backup Server/SQL Database\",\r\n\t  \"AzureBackupServer/VMwareVM\", \"Azure Backup Server/VMWare VM\",\r\n\t  \"AzureBackupServer/HyperVVM\", \"Azure Backup Server/Hyper-V VM\",\r\n\t  \"AzureBackupServer/FileFolder\", \"Azure Backup Server/Files and Folder\",\r\n\t  \"AzureBackupServer/Client\", \"Azure Backup Server/Client\",\r\n\t  \"AzureBackupServer/SystemState\", \"Azure Backup Server/System State\",\r\n\t  \"AzureBackupServer/Sharepoint\", \"Azure Backup Server/Sharepoint Database\",\r\n\t  \"AzureBackupServer/Exchange\", \"Azure Backup Server/Exchange Mailbox Database\"];\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project  BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\") \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType \r\n};\r\nlet OutputTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| distinct BackupManagementType, BackupItemType\r\n| distinct strcat(BackupManagementType, \"/\", BackupItemType)\r\n| project BMSTypeWithBackupItemType = Column1};\r\nlet CustomOutputTable = () {BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\r\n| project BMSTypeWithBackupItemType1, CustomBMSTypeWithBackupItemType};\r\nCustomOutputTable\r\n| where isnotempty(CustomBMSTypeWithBackupItemType)",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "18",
      "name": "Overview-TimeRangeParameterBlock",
      "styleSettings": {
        "maxWidth": "100%"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "9d94255b-5726-41c5-ab7c-4e13187c5de5",
            "version": "KqlParameterItem/1.0",
            "name": "CustomBackupManagementTypeParam",
            "label": "Backup Management Type",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*/*"
            },
            "jsonData": "\r\n[    \r\n{ \"value\": \"MAB/*\", \t\t\t\t\t\t\"label\": \"Azure Backup Agent\" },\r\n{ \"value\": \"AzureStorage/*\", \t\t\t\t\"label\": \"Azure Storage (Azure Files)\" },\r\n{ \"value\": \"IaaSVM/*\", \t\t\t\t\t\t\"label\": \"Azure Virtual Machine\" },\r\n{ \"value\": \"DPM/*\", \t\t\t\t\t\t\"label\": \"DPM\" },\r\n{ \"value\": \"AzureBackupServer/*\", \t\t\t\"label\": \"Azure Backup Server\" },\r\n{ \"value\": \"AzureWorkload/SAPAseDatabase\",  \"label\": \"SAP ASE in Azure VM\" },\r\n{ \"value\": \"AzureWorkload/SAPHanaDatabase\", \"label\": \"SAP HANA in Azure VM\" },\r\n{ \"value\": \"AzureWorkload/SQLDataBase\",     \"label\": \"SQL in Azure VM\" }\r\n]"
          },
          {
            "id": "678680e5-76b5-4db8-bbef-5f73942caf2e",
            "version": "KqlParameterItem/1.0",
            "name": "VaultSubscription",
            "label": "Subscription Name",
            "type": 6,
            "description": "Subscription(s) under which the vault(s) exist",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// Params\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId \r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType,  ResourceId \r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n};\r\nCombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupManagementType, SubscriptionId, BackupItemType \r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| distinct SubscriptionId",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2a83acc5-2123-476f-8a4c-da2fddf231a1",
            "version": "KqlParameterItem/1.0",
            "name": "Location",
            "label": "Vault Location",
            "type": 2,
            "description": "Location(s) in which the vault(s) were created",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used -  BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// Params\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| project ResourceId, AzureDataCenter, VaultName\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| project ResourceId, AzureDataCenter, VaultName;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics() | project AzureDataCenter),\r\n(BackupItemUnderResourceSpecific() | project AzureDataCenter)\r\n| distinct AzureDataCenter};\r\nLatestBackupItemTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "fefd31fa-2774-43ca-8cc3-44d477c969f0",
            "version": "KqlParameterItem/1.0",
            "name": "Vault",
            "label": "Vault Name",
            "type": 2,
            "description": "Name(s) of the vault(s)",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// Params\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\"));\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| project ResourceId, AzureDataCenter, VaultName\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| project ResourceId, AzureDataCenter, VaultName;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics() | project VaultName),\r\n(BackupItemUnderResourceSpecific() | project VaultName)\r\n| distinct VaultName};\r\nLatestBackupItemTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo",
          "value": ""
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "60",
      "name": "Overview-ReportParameterBlock",
      "styleSettings": {
        "maxWidth": "100%"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "<span style=\"font-size:12px;font-style:italic\"> All datetimes are in UTC. Data for the current partial day is not shown in the reports. <a href=\"https://aka.ms/AzureBackupReportTimezone\" target=\"_blank\">Learn More</a></span></div>"
      },
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "Overview-InstructionText2",
      "styleSettings": {
        "margin": "0% 0% 0% 0%",
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left;\"><span style=\"font-size:12px;font-weight:600;\"> Note - There is no backup data in the selected Log Analytics workspace(s). <a href=\"https://aka.ms/UsingLAWorkspace\" target=\"_blank\">Learn More</a> </span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "ErrorHandle",
          "comparison": "isEqualTo"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "ErrorHandle",
        "comparison": "isEqualTo"
      },
      "name": "Overview-ErrorMessage1"
    },
    {
      "type": 1,
      "content": {
        "json": "__________________________________________________________________________________________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "Overview-DividingLine2",
      "styleSettings": {
        "padding": "0px 0px 10px 0px"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:center;\"><span style=\"font-size:14px;font-weight:600;\"> Welcome to Azure Backup Report! </span> <br> <br> <span style=\"font-size:12px;font-weight:600;\"> Select your Workspace(s) and click the Summary Tab above to get started </span> </div>"
      },
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Overview"
      },
      "name": "Overview-WelcomeText"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"1.0.0\",\"content\":\"[\\r\\n{\\\"feature\\\": \\\"Trend Analysis\\\"},\\r\\n{\\\"feature\\\": \\\"Auditing of Backups\\\"},\\r\\n{\\\"feature\\\": \\\"Usage Allocation\\\"},\\r\\n{\\\"feature\\\": \\\"Multi-Region Support\\\"},\\r\\n{\\\"feature\\\": \\\"Multi-Tenant Support\\\"}\\r\\n]\",\"transformers\":null}",
        "size": 0,
        "queryType": 8,
        "visualization": "graph",
        "graphSettings": {
          "type": 2,
          "topContent": {
            "formatOptions": {
              "showIcon": true
            }
          },
          "centerContent": {
            "columnMatch": "feature",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "nodeIdField": "feature",
          "nodeSize": null,
          "staticNodeSize": 100,
          "colorSettings": {
            "nodeColorField": "feature",
            "type": 1,
            "colorPalette": "pastel"
          },
          "hivesMargin": 5
        }
      },
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Overview"
      },
      "name": "Overview-Image"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet ExtRangeStart = RangeStart - 2d;\r\nlet ExtRangeEnd = RangeEnd + 2d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n // Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId\r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\r\n{\r\n let ProtectedInstanceTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedInstance\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),\r\n ProtectedInstanceCount = toint(columnifexists(\"ProtectedInstanceCount_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderResourceSpecific = (isProtectedContainerBillingType:bool)\r\n{\r\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \r\n| where OperationName == \"ProtectedInstance\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestProtectedInstanceTable = (isProtectedContainerBillingType:bool) \r\n{CombinedTable | union isfuzzy = true \r\n(ProtectedInstanceUnderAzureDiagnostics(isProtectedContainerBillingType)),\r\n(ProtectedInstanceUnderResourceSpecific(isProtectedContainerBillingType))\r\n| where startofday(TimeGenerated) == AsonDay\r\n// ProtectedInstance is at BillingEntity level. CustomBackupManagementType can be the filter used.\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId\r\n| project BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType, ResourceId, TimeGenerated, ProtectedInstanceCount, TimeRangeEndDay = startofday(TimeGenerated), StorageReplicationType\r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet LatestBackupItemAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= leftouter\r\n(CombinedTable | union isfuzzy = true  \r\n(StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated),\r\n(StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| summarize StorageConsumedInGBs = sum(StorageConsumedInMBs)/(1024) by BackupManagementType, BackupItemType};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\nTotalBackupItemDimensionTable\r\n| join  ( \r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupManagementType, BackupItemType, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId, TimeGenerated\r\n};\r\nlet LatestJobTable = ()\r\n{LatestJobTableBasedOnBackupItem()\r\n// Taking only BackupItemBasedJobs\r\n| where JobUniqueId != \"\"\r\n}; \r\nlet LatestProtectedContainerUniqueIdTableBasedOnBackupItemExcludingDPMVMs = (){\r\nLatestBackupItemDimensionTable\r\n| where not((BackupManagementType has \"DPM\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"DPM\" and BackupItemType has \"HyperVVM\") \r\nor (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"HyperVVM\"))\r\n| join \r\n(CombinedTable | union isfuzzy = true \r\n(BackupItemAssociationUnderAzureDiagnostics()),\r\n(BackupItemAssociationUnderResourceSpecific())\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| distinct ProtectedContainerUniqueId, BackupManagementType\r\n};\r\nlet LatestProtectedInstanceTableFromProtectedContainerUniqueId = ()\r\n{ \r\nLatestProtectedInstanceTable(true)\r\n| join kind= rightouter (LatestProtectedContainerUniqueIdTableBasedOnBackupItemExcludingDPMVMs) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project BillingEntityUniqueId = ProtectedContainerUniqueId1, ProtectedInstanceCount, BackupManagementType = BackupManagementType1\r\n};\r\nlet LatestProtectedInstanceTableFromBackupItemUniqueId = ()\r\n{ \r\n(LatestProtectedInstanceTable(false)\r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\"))\r\n| join kind= rightouter (LatestBackupItemDimensionTable |  where ((BackupManagementType has \"DPM\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"DPM\" and BackupItemType has \"HyperVVM\")\r\nor (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"HyperVVM\"))) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BillingEntityUniqueId = BackupItemUniqueId1, ProtectedInstanceCount, BackupManagementType\r\n};\r\n// Special handling for DPM, AzureBackupServer Cluster scenario - Node PS has ProtectedInstance, whereas Cluster PS has storage Consumption\r\nlet LatestProtectedInstanceTableFromDPMNodeProtectedContainerUniqueId = ()\r\n{ \r\n(\r\n(LatestProtectedInstanceTable(true)\r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\")\r\n| where ProtectedInstanceCount > 0)\r\n| join kind= leftanti (LatestProtectedContainerUniqueIdTableBasedOnBackupItemExcludingDPMVMs) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId, BackupManagementType, ResourceId, TimeGenerated, ProtectedInstanceCount, TimeRangeEndDay, StorageReplicationType)\r\n| join (\r\nCombinedTable | union isfuzzy = true  \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\")\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId)\r\n  on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n  // BackupItemFrontEndSize and StorageConsumed will be 0.0 as the same will be calculated at cluster level \r\n  // As it is DPM or AzureBackupServer, no extra handling needed for AzureWorkload\r\n| project BillingEntityUniqueId = ProtectedContainerUniqueId, ProtectedInstanceCount,  BackupManagementType\r\n};\r\nlet ProtectedInstanceMetricTable = ( ) \r\n{ union \r\n(LatestProtectedInstanceTableFromProtectedContainerUniqueId()),\r\n(LatestProtectedInstanceTableFromBackupItemUniqueId()),\r\n(LatestProtectedInstanceTableFromDPMNodeProtectedContainerUniqueId)\r\n| project CustomProtectedInstanceCount = iff(isempty(ProtectedInstanceCount) or BackupManagementType == \"AzureStorage\", 0.0, todouble(ProtectedInstanceCount)/10), BillingEntityUniqueId\r\n};\r\n(LatestBackupItemDimensionTable | count | extend Dummy = 1) \r\n| join (LatestBackupItemAndStorageConsumptionTable | summarize sum(StorageConsumedInGBs) | extend Dummy = 1) on Dummy == Dummy \r\n| join (LatestJobTable | where JobUniqueId != \"\" | summarize dcount(JobUniqueId,4) | extend Dummy = 1) on Dummy == Dummy \r\n| join (ProtectedInstanceMetricTable | summarize sum(CustomProtectedInstanceCount) | extend Dummy = 1) on Dummy == Dummy \r\n| extend  Key = pack_array( \"Backup Items\", \"Protected Instances\",  \"Cloud Storage (GB)\", \"Jobs Created\"), Value = pack_array( Count, sum_CustomProtectedInstanceCount, sum_StorageConsumedInGBs, dcount_JobUniqueId), \r\nSubTitle = pack_array( \"\", \"\", \"\", \"\")\r\n| project Key, Value, SubTitle \r\n| mvexpand Key, Value, SubTitle",
        "size": 4,
        "noDataMessage": "No records found for the selected time range and scope",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Key",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "subtitleContent": {
            "columnMatch": "SubTitle",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatter": 12,
            "formatOptions": {
              "showIcon": true
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "decimal",
                "minimumFractionDigits": 0,
                "maximumFractionDigits": 2
              }
            }
          },
          "showBorder": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Summary"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Summary"
      },
      "name": "Summary-Tiles",
      "styleSettings": {
        "margin": "0% 0% 0% -15px"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">Key Parameters by Backup Item Type </span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Summary"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Summary"
      },
      "customWidth": "100",
      "name": "Summary-GridTitle1",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet ExtRangeStart = RangeStart - 2d;\r\nlet ExtRangeEnd = RangeEnd + 2d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\nlet TrendEndDay = iff((RangeEnd-Today == 1d),RangeEnd-1d, RangeEnd);\r\nlet interval = 1d;\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Client\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\",\r\n\t  \"AzureBackupServer/SQLDB\", \"Azure Backup Server/SQL Database\",\r\n\t  \"AzureBackupServer/VMwareVM\", \"Azure Backup Server/VMWare VM\",\r\n\t  \"AzureBackupServer/HyperVVM\", \"Azure Backup Server/Hyper-V VM\",\r\n\t  \"AzureBackupServer/FileFolder\", \"Azure Backup Server/Files and Folder\",\r\n\t  \"AzureBackupServer/Client\", \"Azure Backup Server/Client\",\r\n\t  \"AzureBackupServer/SystemState\", \"Azure Backup Server/System State\",\r\n\t  \"AzureBackupServer/Sharepoint\", \"Azure Backup Server/Sharepoint Database\",\r\n\t  \"AzureBackupServer/Exchange\", \"Azure Backup Server/Exchange Mailbox Database\"];\r\n// Params\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\n\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId\r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\n\r\n\r\nlet LatestBackupItemAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= leftouter\r\n(CombinedTable | union isfuzzy = true  \r\n(StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated),\r\n(StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| summarize StorageConsumedInGBs = sum(StorageConsumedInMBs)/(1024) by BackupManagementType, BackupItemType};\r\n\r\n\r\nlet LatestJobTableBasedOnBackupItem = (){\r\nTotalBackupItemDimensionTable\r\n| join  ( \r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupManagementType, BackupItemType, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId, TimeGenerated\r\n};\r\nlet LatestJobTable = ()\r\n{LatestJobTableBasedOnBackupItem()\r\n// Taking only BackupItemBasedJobs\r\n| where JobUniqueId != \"\"\r\n}; \r\nlet JobSuccessPercentageTable = (){\r\nLatestJobTable\r\n// Calculate percentage\r\n| extend success=iff((JobStatus == \"Completed\" or JobStatus == \"CompletedWithWarnings\") , 1 , 0)\r\n| extend record = iff(JobUniqueId != \"\", 1, 0)  // to be used for total row count\r\n| summarize SuccessfulCount =sum(success), TotalCount=sum(record) by BackupManagementType, BackupItemType\r\n| extend JobSuccessPercentage = (SuccessfulCount*100)/todouble(TotalCount)\r\n};\r\nlet SummaryTable = (){\r\n// Total BackupItem Types in the period\r\nTotalBackupItemDimensionTable | summarize by BackupManagementType, BackupItemType\r\n// Active BackupItem count \r\n| join kind=leftouter (LatestBackupItemDimensionTable | summarize count(BackupItemUniqueId) by BackupManagementType, BackupItemType) on BackupManagementType == BackupManagementType,  BackupItemType == BackupItemType\r\n| join kind=leftouter JobSuccessPercentageTable on BackupManagementType == BackupManagementType,  BackupItemType == BackupItemType \r\n| join kind=leftouter LatestBackupItemAndStorageConsumptionTable on BackupManagementType == BackupManagementType,  BackupItemType == BackupItemType \r\n| project BMSTypeWithBackupItemType = strcat(BackupManagementType,\"/\", BackupItemType), count_BackupItemUniqueId, JobSuccessPercentage, StorageConsumedInGBs};\r\nlet CustomSummaryTable = BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (SummaryTable) \r\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\r\n| project BMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1 ,CustomBMSTypeWithBackupItemType ), count_BackupItemUniqueId, JobSuccessPercentage = iff( (isnan(JobSuccessPercentage) or isinf(JobSuccessPercentage) or isempty(JobSuccessPercentage)), \"-\", tostring(strcat(round(JobSuccessPercentage,2), \" %\"))),  StorageConsumedInGBs\r\n| parse BMSTypeWithBackupItemType with ExtractedBMSType:string \"/\" ExtractedBackupItemType:string\r\n| project ExtractedBMSType, ExtractedBackupItemType, count_BackupItemUniqueId, JobSuccessPercentage, StorageConsumedInGBs\r\n| order by ExtractedBMSType asc;\r\nCustomSummaryTable",
        "size": 3,
        "noDataMessage": "No records found for the selected time range and scope",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "ExtractedBMSType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Backup Management Type"
              }
            },
            {
              "columnMatch": "ExtractedBackupItemType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Backup Item Type"
              }
            },
            {
              "columnMatch": "count_BackupItemUniqueId",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Number of Backup Items of the given type, as of the end of the selected time range"
              }
            },
            {
              "columnMatch": "JobSuccessPercentage",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "% of Jobs (that were triggered in the selected time range) that were successful for Backup Items of the given type"
              }
            },
            {
              "columnMatch": "StorageConsumedInGBs",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "Total Cloud Storage consumed by Backup Items of the given type, as of the end of the selected time range"
              }
            },
            {
              "columnMatch": "BMSTypeWithBackupItemType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "ExtractedBMSType",
              "label": "Backup Management Type"
            },
            {
              "columnId": "ExtractedBackupItemType",
              "label": "Backup Item Type"
            },
            {
              "columnId": "count_BackupItemUniqueId",
              "label": "# Backup Items"
            },
            {
              "columnId": "JobSuccessPercentage",
              "label": "Job Success %"
            },
            {
              "columnId": "StorageConsumedInGBs",
              "label": "Cloud Storage (GB)"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Summary"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Summary"
      },
      "showPin": true,
      "name": "Summary-Grid",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%",
        "showBorder": true
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "2520d604-c6eb-48f8-aac4-665294faae82",
            "version": "KqlParameterItem/1.0",
            "name": "ContainerNameWithBackupItemNameInStorage",
            "label": "Search Item or Container",
            "type": 1,
            "description": "Use to search for a Backup Item by name. <br/> To search for a specific item in a container, use the syntax [container name];[item name] <br/> To search for all items in a container, use the syntax [container name];",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "value": ""
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "customWidth": "90",
      "name": "BackupItems-SearchParameterBlock",
      "styleSettings": {
        "margin": "0% 0% 0% 0%"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "______________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "text - 74"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType, BackupItemProtectionState, PolicyName\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet Item_search =  @\"{ContainerNameWithBackupItemNameInStorage}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");  \r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nLatestBackupItemDimensionTable\r\n| join (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| project ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, ResourceId, BackupItemProtectionState\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, ResourceId, BackupItemProtectionState\r\n| summarize count(BackupItemUniqueId) by CustomBackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState)))};\r\nlet ProtectionStatusEnum = datatable (CustomBackupItemProtectionState:string, statusOrder:int)\r\n    [ \"Protected\", 1,\r\n      \"ProtectionStopped\", 2,\r\n      \"InitialBackupPending\", 3];\r\nlet ProtectionStatusTable = ProtectionStatusEnum\r\n| join kind= leftouter (LatestBackupItemWithProtectedContainerTable) \r\non CustomBackupItemProtectionState == CustomBackupItemProtectionState\r\n| project CustomBackupItemProtectionState, count_BackupItemUniqueId = (iff(isempty(count_BackupItemUniqueId), 0, count_BackupItemUniqueId)), statusOrder\r\n| order by statusOrder asc;\t \r\nProtectionStatusTable\r\n",
        "size": 3,
        "noDataMessage": "No records found for the selected time range and scope",
        "exportFieldName": "CustomBackupItemProtectionState",
        "exportParameterName": "BackupItemProtectionState",
        "exportDefaultValue": "*",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "CustomBackupItemProtectionState",
            "formatOptions": {
              "showIcon": true
            }
          },
          "subtitleContent": {
            "columnMatch": "SubTitle",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "count_BackupItemUniqueId",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto",
              "showIcon": true
            }
          },
          "showBorder": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "name": "BackupItems-Tiles",
      "styleSettings": {
        "margin": "-30px 0% 0% -15px"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "_________________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "text - 73"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType, BackupItemProtectionState, BillingEntityName\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet BackupItemProtectionStateParam = @\"{BackupItemProtectionState}\";\r\nlet Item_search =  @\"{ContainerNameWithBackupItemNameInStorage}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\"); \r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join hint.strategy = broadcast kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n// To-do: Figure out why ResourceId is needed for policy join\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId , TimeRangeEndDay\r\n | join hint.strategy = partitioned kind= leftouter (\r\n   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join hint.strategy = partitioned kind= leftouter (\r\n  StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \r\n};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join hint.strategy = broadcast kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n// To-do: Figure out why ResourceId is needed for policy join\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay \r\n | join hint.strategy = partitioned kind= leftouter (\r\n   BackupItemFrontEndSizeHistoryUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join hint.strategy = partitioned kind= leftouter (\r\n  StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\r\n{\r\nTotalBackupItemDimensionTable | join hint.strategy = broadcast \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| project TimeGenerated,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, PolicyUniqueId, PolicyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, ResourceId, BackupItemUniqueId, TimeRangeEndDay\r\n};\r\nlet StorageHistoryMetric = ()\r\n{\r\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable\r\n// To-do : 1 invalidDate record\r\n//| where isnotempty(TimeRangeEndDay)\r\n| project CustomBackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState))),  ProtectedContainerFriendlyName, BackupItemFriendlyName, TimeRangeEndDay, BackupItemUniqueId\r\n| where CustomBackupItemProtectionState in (BackupItemProtectionStateParam) or '*' in (BackupItemProtectionStateParam)\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n};\r\nStorageHistoryMetric\r\n| summarize BackupItemCount = count(BackupItemUniqueId) by TimeRangeEndDay",
        "size": 0,
        "aggregation": 5,
        "title": "Backup Items Trend",
        "noDataMessage": "No records found for the selected time range and scope",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "linechart",
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "TimeRangeEndDay",
              "sortOrder": 2
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "TimeRangeEndDay",
            "sortOrder": 2
          }
        ],
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "BackupItemCount",
              "label": "# Backup Items"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "customWidth": "50",
      "showPin": true,
      "name": "BackupItems-BackupItemsTrendGraph"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType, BackupItemProtectionState, BillingEntityName\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet BackupItemProtectionStateParam = @\"{BackupItemProtectionState}\";\r\nlet Item_search =  @\"{ContainerNameWithBackupItemNameInStorage}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\"); \r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join hint.strategy = broadcast kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n// To-do: Figure out why ResourceId is needed for policy join\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId , TimeRangeEndDay\r\n | join hint.strategy = partitioned kind= leftouter (\r\n   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join hint.strategy = partitioned kind= leftouter (\r\n  StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \r\n};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join hint.strategy = broadcast kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n// To-do: Figure out why ResourceId is needed for policy join\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay \r\n | join hint.strategy = partitioned kind= leftouter (\r\n   BackupItemFrontEndSizeHistoryUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join hint.strategy = partitioned kind= leftouter (\r\n  StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\r\n{\r\nTotalBackupItemDimensionTable | join hint.strategy = broadcast \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| project TimeGenerated,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, PolicyUniqueId, PolicyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, ResourceId, BackupItemUniqueId, TimeRangeEndDay\r\n};\r\nlet StorageHistoryMetric = ()\r\n{\r\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable\r\n// To-do : 1 invalidDate record\r\n//| where isnotempty(TimeRangeEndDay)\r\n| project CustomBackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState))),  ProtectedContainerFriendlyName, BackupItemFriendlyName, TimeRangeEndDay, StorageConsumedInMBs\r\n| where CustomBackupItemProtectionState in (BackupItemProtectionStateParam) or '*' in (BackupItemProtectionStateParam)\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n};\r\nStorageHistoryMetric\r\n| summarize StorageConsumedInGBs = sum(StorageConsumedInMBs)/(1024) by  TimeRangeEndDay",
        "size": 0,
        "aggregation": 5,
        "title": "Cloud Storage Trend",
        "noDataMessage": "No records found for the selected time range and scope",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "linechart",
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "TimeRangeEndDay",
              "sortOrder": 2
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "TimeRangeEndDay",
            "sortOrder": 2
          }
        ],
        "chartSettings": {
          "xAxis": "TimeRangeEndDay",
          "seriesLabelSettings": [
            {
              "seriesName": "StorageConsumedInMBs",
              "label": "Cloud Storage (MB)"
            },
            {
              "seriesName": "StorageConsumedInGBs",
              "label": "Cloud Storage (GB)"
            }
          ],
          "ySettings": {
            "unit": 17,
            "min": null,
            "max": null
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "customWidth": "50",
      "showPin": true,
      "name": "BackupItems-CloudStorageTrendGraph"
    },
    {
      "type": 1,
      "content": {
        "json": "____________________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "BackupItems-DividingLine"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "a29464c3-34f0-4d60-82bb-614b8128b7f9",
            "version": "KqlParameterItem/1.0",
            "name": "PolicyName",
            "label": "Search Policy Name",
            "type": 1,
            "description": "Use to search by Policy Name",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "value": ""
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyDetails"
      },
      "customWidth": "90",
      "name": "PolicyDetails-SearchParameterBlock",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "______________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyDetails"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "PolicyDetails-DividingLine1"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet PolicyNameParam =  @\"{PolicyName}\";\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\r\n| join kind= leftouter (\r\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\r\n| join kind= leftouter (\r\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n)on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId, BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n};\r\nlet PolicyTable = () {LatestBackupItemAssociationAndStorageConsumptionTable\r\n| where PolicyName contains (PolicyNameParam) or '*' in (PolicyNameParam)\r\n};\r\nlet ActivePolicyCount = () \r\n{PolicyTable \r\n| summarize count(BackupItemUniqueId) by PolicyUniqueId, ResourceId\r\n| extend active = iff(PolicyUniqueId != \"\", 1, 0)\r\n| summarize ActivePolicy = sum(active)\r\n| extend  Key = pack_array(\"Active Policies\"), Value = pack_array( ActivePolicy), SubText = pack_array(\"Count\"), Row = pack_array(-2)\r\n| project Key, Value, SubText, Row\r\n| mvexpand  Key, Value, SubText, Row};\r\nlet StorageByStorageReplication = ()\r\n{PolicyTable\r\n| summarize sum(StorageConsumedInMBs) by StorageReplicationType \r\n| order by StorageReplicationType \r\n// The below two values are temporary StorageReplicationType during vault creation\r\n| where StorageReplicationType !in (\"Invalid\", \"\")\r\n| extend rn = row_number()\r\n| extend  Key = pack_array(StorageReplicationType), Value = pack_array( sum_StorageConsumedInMBs/1024), SubText = pack_array(\"Cloud Storage (GB)\"), Row = pack_array(rn)\r\n| project Key, Value, SubText, Row\r\n| mvexpand  Key, Value, SubText, Row\r\n};\r\nunion  ActivePolicyCount, StorageByStorageReplication \r\n| order by toint(Row) asc\r\n| order by toint(Row) asc",
        "size": 3,
        "noDataMessage": "No records found for the selected time range and scope",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Key",
            "formatOptions": {
              "showIcon": true
            }
          },
          "subtitleContent": {
            "columnMatch": "SubText",
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatter": 12,
            "formatOptions": {
              "showIcon": true
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "decimal",
                "useGrouping": false,
                "maximumFractionDigits": 2
              }
            }
          },
          "showBorder": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyDetails"
      },
      "name": "PolicyDetails-Tiles"
    },
    {
      "type": 1,
      "content": {
        "json": "______________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyDetails"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "PolicyDetails-DividingLine2"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet PolicyNameParam =  @\"{PolicyName}\";\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join hint.strategy = broadcast kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n// To-do: Figure out why ResourceId is needed for policy join\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId , TimeRangeEndDay\r\n | join hint.strategy = partitioned kind= leftouter (\r\n   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join hint.strategy = partitioned kind= leftouter (\r\n  StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \r\n};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join hint.strategy = broadcast kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n// To-do: Figure out why ResourceId is needed for policy join\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay \r\n | join hint.strategy = partitioned kind= leftouter (\r\n   BackupItemFrontEndSizeHistoryUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join hint.strategy = partitioned kind= leftouter (\r\n  StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\r\n{\r\nTotalBackupItemDimensionTable | join hint.strategy = broadcast \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| project TimeGenerated,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, PolicyUniqueId, PolicyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, ResourceId, BackupItemUniqueId, TimeRangeEndDay\r\n};\r\nlet StorageHistoryMetric = ()\r\n{\r\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable\r\n// To-do : 1 invalidDate record\r\n//| where isnotempty(TimeRangeEndDay)\r\n| where PolicyName contains (PolicyNameParam) or '*' in (PolicyNameParam)\r\n};\r\nStorageHistoryMetric\r\n| where PolicyUniqueId != \"\"\r\n| summarize ActivePolicyCount = dcount(strcat(ResourceId, PolicyUniqueId), 4) by  TimeRangeEndDay",
        "size": 0,
        "aggregation": 5,
        "title": "Active Policy Trend",
        "noDataMessage": "No records found for the selected time range and scope",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "linechart",
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "TimeRangeEndDay",
              "sortOrder": 2
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "TimeRangeEndDay",
            "sortOrder": 2
          }
        ],
        "chartSettings": {
          "xAxis": "TimeRangeEndDay",
          "seriesLabelSettings": [
            {
              "seriesName": "ActivePolicyCount",
              "label": "# Active Policies"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyDetails"
      },
      "customWidth": "50",
      "showPin": true,
      "name": "PolicyDetails-ActivePoliciesTrendGraph"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet PolicyNameParam =  @\"{PolicyName}\";\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join hint.strategy = broadcast kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n// To-do: Figure out why ResourceId is needed for policy join\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId , TimeRangeEndDay\r\n | join hint.strategy = partitioned kind= leftouter (\r\n   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join hint.strategy = partitioned kind= leftouter (\r\n  StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \r\n};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join hint.strategy = broadcast kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n// To-do: Figure out why ResourceId is needed for policy join\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay \r\n | join hint.strategy = partitioned kind= leftouter (\r\n   BackupItemFrontEndSizeHistoryUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join hint.strategy = partitioned kind= leftouter (\r\n  StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\r\n{\r\nTotalBackupItemDimensionTable | join hint.strategy = broadcast \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| project TimeGenerated,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, PolicyUniqueId, PolicyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, ResourceId, BackupItemUniqueId, TimeRangeEndDay\r\n};\r\nlet StorageHistoryMetric = ()\r\n{\r\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable\r\n// To-do : 1 invalidDate record\r\n//| where isnotempty(TimeRangeEndDay)\r\n| where PolicyName contains (PolicyNameParam) or '*' in (PolicyNameParam)\r\n};\r\nStorageHistoryMetric\r\n| summarize StorageConsumedInGBs = sum(StorageConsumedInMBs)/(1024) by  TimeRangeEndDay",
        "size": 0,
        "aggregation": 5,
        "title": "Cloud Storage Trend",
        "noDataMessage": "No records found for the selected time range and scope",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "linechart",
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "TimeRangeEndDay",
              "sortOrder": 2
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "TimeRangeEndDay",
            "sortOrder": 2
          }
        ],
        "chartSettings": {
          "xAxis": "TimeRangeEndDay",
          "seriesLabelSettings": [
            {
              "seriesName": "StorageConsumedInMBs",
              "label": "Cloud Storage (MB)"
            },
            {
              "seriesName": "StorageConsumedInGBs",
              "label": "Cloud Storage (GB)"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyDetails"
      },
      "customWidth": "50",
      "showPin": true,
      "name": "PolicyDetails-CloudStorageTrendGraph"
    },
    {
      "type": 1,
      "content": {
        "json": "_________________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyDetails"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "PolicyDetails-DividingLine3"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">Backup Items and Storage by Policy</span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyDetails"
      },
      "name": "PolicyDetails-GridTitle1",
      "styleSettings": {
        "margin": "0% 0% 10px 0%"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "5dc2a074-b510-44f2-9530-cfcbd159b59c",
            "version": "KqlParameterItem/1.0",
            "name": "BillingMetricSortBy",
            "label": "Sort By",
            "type": 2,
            "description": "Use to sort by a certain column",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{ \"value\": \"count_BackupItemUniqueId\", \"label\": \"# BackupItems\" },\r\n{ \"value\": \"sum_StorageConsumedInMBs\", \"label\": \"Vault Storage (MB)\", \"selected\": \"true\" }]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "df3cc03c-53f7-4523-a29b-e50bf1b6d922",
            "version": "KqlParameterItem/1.0",
            "name": "BillingMetricOrder",
            "label": "Order",
            "type": 2,
            "description": "Use to specify the sort order: Ascending/Descending",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"Ascending\"},\r\n    { \"value\":\"Descending\", \"selected\":true}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "44b4c590-ecc4-4d3d-840e-16c4638000d4",
            "version": "KqlParameterItem/1.0",
            "name": "StorageMetricRowsPerGrid",
            "label": "Rows Per Page",
            "type": 2,
            "description": "Number of rows to display in grid view",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "90478836-8cb6-4235-98a0-7724ac01d29a",
            "version": "KqlParameterItem/1.0",
            "name": "StorageMetricPageNumber",
            "label": "Page",
            "type": 2,
            "description": "Select Page Number",
            "isRequired": true,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet PolicyNameParam =  @\"{PolicyName}\";\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\r\n| join kind= leftouter (\r\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\r\n| join kind= leftouter (\r\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n)on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, \r\nBackupManagementType, BackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n};\r\nlet StorageMetric = ()\r\n{LatestBackupItemAssociationAndStorageConsumptionTable\r\n// Filter out Active Policies\r\n| where PolicyUniqueId != \"\"\r\n| where PolicyName contains (PolicyNameParam) or '*' in (PolicyNameParam)\r\n| summarize sum(BackupItemFrontEndSize), sum(StorageConsumedInMBs), count(BackupItemUniqueId), StorageReplicationType = any(StorageReplicationType), PolicyName = any(PolicyName), ResourceId = any(ResourceId), PolicyUniqueId = any(PolicyUniqueId) by PolicyLink = strcat(ResourceId, PolicyUniqueId)\r\n};\r\nStorageMetric\r\n| summarize c=count()\r\n| project num = (c-1)/{StorageMetricRowsPerGrid} + 1\r\n| project nums = range(1,num,1), num\r\n| mvexpand nums\r\n| project nums = tostring(nums), num = strcat(tostring(nums),\" of \",tostring(num))",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyDetails"
      },
      "customWidth": "90",
      "name": "PolicyDetails-Grid1ParameterBlock",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet PolicyNameParam =  @\"{PolicyName}\";\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\r\n| join kind= leftouter (\r\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\r\n| join kind= leftouter (\r\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n)on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, \r\nBackupManagementType, BackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n};\r\nLatestBackupItemAssociationAndStorageConsumptionTable\r\n// Filter out Active Policies\r\n| where PolicyUniqueId != \"\"\r\n| where PolicyName contains (PolicyNameParam) or '*' in (PolicyNameParam)\r\n| summarize sum(BackupItemFrontEndSize), sum(StorageConsumedInMBs), count(BackupItemUniqueId), StorageReplicationType = any(StorageReplicationType), PolicyName = any(PolicyName), ResourceId = any(ResourceId), PolicyUniqueId = any(PolicyUniqueId) by PolicyLink = strcat(ResourceId, PolicyUniqueId)\r\n| extend TempColumn = column_ifexists(tostring('{BillingMetricSortBy}'), \"sum_StorageConsumedInMBs\")\r\n| extend ColumnToBeSorted = iff(tostring('{BillingMetricOrder}') == \"Ascending\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\r\n| sort by ColumnToBeSorted asc nulls last, PolicyLink asc\r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/{StorageMetricRowsPerGrid} + 1))\r\n| where page_num has ('{StorageMetricPageNumber}') or '*' in ('{StorageMetricPageNumber}') \r\n| project PolicyName, count_BackupItemUniqueId, StorageConsumedInGBs = sum_StorageConsumedInMBs/1024, ResourceId, StorageReplicationType, PolicyLink, PolicyUniqueId",
        "size": 3,
        "noDataMessage": "No records found for the selected time range and scope",
        "exportFieldName": "PolicyLink",
        "exportParameterName": "SelectedPolicyLink",
        "exportDefaultValue": "*",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "PolicyName",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Name of the Policy"
              }
            },
            {
              "columnMatch": "count_BackupItemUniqueId",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Number of Backup Items associated with the Policy, as of the end of the selected time range"
              }
            },
            {
              "columnMatch": "StorageConsumedInGBs",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "Total Cloud Storage consumed by Backup Items backed up as per the given Policy, as of the end of the selected time range"
              }
            },
            {
              "columnMatch": "ResourceId",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Vault that the Policy belongs to"
              }
            },
            {
              "columnMatch": "StorageReplicationType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Storage Replication Type associated with the Policy"
              }
            },
            {
              "columnMatch": "PolicyLink",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "PolicyUniqueId",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "PolicyName",
              "label": "Policy Name"
            },
            {
              "columnId": "count_BackupItemUniqueId",
              "label": "# Backup Items"
            },
            {
              "columnId": "StorageConsumedInGBs",
              "label": "Cloud Storage (GB)"
            },
            {
              "columnId": "ResourceId",
              "label": "Vault"
            },
            {
              "columnId": "StorageReplicationType",
              "label": "Storage Replication Type"
            },
            {
              "columnId": "PolicyLink"
            },
            {
              "columnId": "PolicyUniqueId"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyDetails"
      },
      "showPin": true,
      "name": "PolicyDetails-Grid1",
      "styleSettings": {
        "margin": "-30px 0% 0% 0%",
        "showBorder": true
      }
    },
    {
      "type": 1,
      "content": {
        "json": "<span style=\"font-size:12px;font-style:italic\"> Click on any row above to see all backup items associated with that policy.</span>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyDetails"
      },
      "name": "text - 65"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">List of Backup Items associated with the selected Policy</span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "SelectedPolicyLink",
          "comparison": "isNotEqualTo",
          "value": "*"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyDetails"
      },
      "name": "PolicyDetails-Grid2Title",
      "styleSettings": {
        "margin": "0% 0% 10px 0%"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "7bb4a71d-d932-4737-8715-d378be7ffba5",
            "version": "KqlParameterItem/1.0",
            "name": "BillingMetricSortBy3",
            "label": "Sort By",
            "type": 2,
            "description": "Use to sort by a certain column",
            "isRequired": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"[\\r\\n{ \\\"value\\\": \\\"StorageConsumedInMBs\\\", \\\"label\\\": \\\"Cloud Storage (MB)\\\", \\\"selected\\\": \\\"true\\\" }]\"}",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 8,
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "595e5629-4f64-4038-bff5-5f3371259caa",
            "version": "KqlParameterItem/1.0",
            "name": "BillingMetricOrder3",
            "label": "Order",
            "type": 2,
            "description": "Use to specify the sort order: Ascending/Descending",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"Ascending\"},\r\n    { \"value\":\"Descending\", \"selected\":true}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "0e4b3406-91aa-452e-90b2-6b22e71f0b82",
            "version": "KqlParameterItem/1.0",
            "name": "StorageMetricRowsPerGrid3",
            "label": "Rows Per Page",
            "type": 2,
            "description": "Number of rows to display in grid view",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "d1b7fe67-8c02-431c-904c-f82238dd112e",
            "version": "KqlParameterItem/1.0",
            "name": "StorageMetricPageNumber3",
            "label": "Page",
            "type": 2,
            "description": "Select Page Number",
            "isRequired": true,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Client\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\",\r\n\t  \"AzureBackupServer/SQLDB\", \"Azure Backup Server/SQL Database\",\r\n\t  \"AzureBackupServer/VMwareVM\", \"Azure Backup Server/VMWare VM\",\r\n\t  \"AzureBackupServer/HyperVVM\", \"Azure Backup Server/Hyper-V VM\",\r\n\t  \"AzureBackupServer/FileFolder\", \"Azure Backup Server/Files and Folder\",\r\n\t  \"AzureBackupServer/Client\", \"Azure Backup Server/Client\",\r\n\t  \"AzureBackupServer/SystemState\", \"Azure Backup Server/System State\",\r\n\t  \"AzureBackupServer/Sharepoint\", \"Azure Backup Server/Sharepoint Database\",\r\n\t  \"AzureBackupServer/Exchange\", \"Azure Backup Server/Exchange Mailbox Database\"];\r\n// Params\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet PolicyNameParam =  @\"{PolicyName}\";\r\nlet PolicyLinkParam =  @\"{SelectedPolicyLink}\";\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\r\n| join kind= leftouter (\r\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\r\n| join kind= leftouter (\r\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n)on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, \r\nBackupManagementType, BackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n};\r\nlet OutputTable = () {LatestBackupItemAssociationAndStorageConsumptionTable\r\n// PolicyLink Parameter\r\n| where strcat(ResourceId, PolicyUniqueId) == (PolicyLinkParam) or '*' in (PolicyLinkParam)\r\n| project BackupItemUniqueId\r\n};\r\nOutputTable\r\n| summarize c=count()\r\n| project num = (c-1)/{StorageMetricRowsPerGrid3} + 1\r\n| project nums = range(1,num,1), num\r\n| mvexpand nums\r\n| project nums = tostring(nums), num = strcat(tostring(nums),\" of \",tostring(num))",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "SelectedPolicyLink",
          "comparison": "isNotEqualTo",
          "value": "*"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyDetails"
      },
      "customWidth": "90",
      "name": "PolicyDetails-Grid2ParameterBlock",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Client\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\",\r\n\t  \"AzureBackupServer/SQLDB\", \"Azure Backup Server/SQL Database\",\r\n\t  \"AzureBackupServer/VMwareVM\", \"Azure Backup Server/VMWare VM\",\r\n\t  \"AzureBackupServer/HyperVVM\", \"Azure Backup Server/Hyper-V VM\",\r\n\t  \"AzureBackupServer/FileFolder\", \"Azure Backup Server/Files and Folder\",\r\n\t  \"AzureBackupServer/Client\", \"Azure Backup Server/Client\",\r\n\t  \"AzureBackupServer/SystemState\", \"Azure Backup Server/System State\",\r\n\t  \"AzureBackupServer/Sharepoint\", \"Azure Backup Server/Sharepoint Database\",\r\n\t  \"AzureBackupServer/Exchange\", \"Azure Backup Server/Exchange Mailbox Database\"];\r\n// Params\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet PolicyNameParam =  @\"{PolicyName}\";\r\nlet PolicyLinkParam =  @\"{SelectedPolicyLink}\";\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\r\n| join kind= leftouter (\r\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\r\n| join kind= leftouter (\r\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n)on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, \r\nBackupManagementType, BackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n};\r\nlet OutputTable = () {LatestBackupItemAssociationAndStorageConsumptionTable\r\n// PolicyLink Parameter\r\n| where strcat(ResourceId, PolicyUniqueId) == (PolicyLinkParam) or '*' in (PolicyLinkParam)\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, BackupItemFrontEndSize, StorageConsumedInMBs, PolicyName, ResourceId,  StorageReplicationType\r\n| extend TempColumn = column_ifexists(tostring('{BillingMetricSortBy3}'), \"StorageConsumedInMBs\")\r\n| extend ColumnToBeSorted = iff(tostring('{BillingMetricOrder3}') == \"Ascending\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\r\n| sort by ColumnToBeSorted asc nulls last, BackupItemUniqueId asc\r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/{StorageMetricRowsPerGrid3} + 1))\r\n| where page_num has ('{StorageMetricPageNumber3}') or '*' in ('{StorageMetricPageNumber3}')\r\n| extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\r\n| extend containerNameString = iff(array_length(split(ProtectedContainerName,\";\")) == 3, ProtectedContainerName, \"\")\r\n| parse containerNameString with entityType:string \";\" rgName:string \";\" entityName:string\r\n| extend entityTypeForAzureStorageUrl = iff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), \"\")\r\n| extend entityTypeForIaaSVMUrl = iff((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend entityTypeForAzureWorkloadUrl = iff(((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\") or (BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\")), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend AzureResource = iff(BackupManagementType in (\"DPM\",\"MAB\",\"AzureBackupServer\"), \"\" , iff(containerNameString != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId))\r\n| extend BackupItemLink =  iff ((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/IaasVMContainer;\", ProtectedContainerName, \"/protectedItems/VM;\", ProtectedContainerName),\r\niff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/StorageContainer;\", ProtectedContainerName, \"/protectedItems/AzureFileShare;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SQLDataBase;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SAPHanaDatabase;\", BackupItemName), \"\"))))\r\n|  extend container_array = split(ProtectedContainerName,\";\")\r\n|  extend container_arraylen = array_length(container_array)\r\n| project  BackupItemName = BackupItemFriendlyName, ProtectedContainerName = ProtectedContainerFriendlyName, ContainerResourceGroup = iff(container_arraylen == 3, container_array[(container_arraylen-2)], \"(none)\"), PolicyName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), StorageConsumedInMBs, ResourceId, StorageReplicationType, AzureResource, BackupItemLink};\r\nlet CustomOutputTable = BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\r\n| project BackupItemName, ProtectedContainerName, ContainerResourceGroup, PolicyName, BMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1 ,CustomBMSTypeWithBackupItemType ), StorageConsumedInMBs, ResourceId, StorageReplicationType, AzureResource, BackupItemLink\r\n| parse BMSTypeWithBackupItemType with ExtractedBMSType:string \"/\" ExtractedBackupItemType:string\r\n| project BackupItemName, ProtectedContainerName, ContainerResourceGroup, PolicyName, StorageConsumedInGBs = StorageConsumedInMBs/1024, ResourceId, StorageReplicationType, AzureResource, BackupItemLink, ExtractedBMSType, ExtractedBackupItemType\r\n;\r\nCustomOutputTable",
        "size": 3,
        "noDataMessage": "No records found for the selected time range and scope",
        "exportFieldName": "BackupItemUniqueId",
        "exportParameterName": "SelectedBackupItemUniqueId",
        "exportDefaultValue": "*",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "BackupItemName",
              "formatter": 16,
              "formatOptions": {
                "linkColumn": "BackupItemLink",
                "linkTarget": "Resource",
                "linkIsContextBlade": false,
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Name of the Backup Item"
              }
            },
            {
              "columnMatch": "ProtectedContainerName",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Name of the Protected Container associated with the Backup Item"
              }
            },
            {
              "columnMatch": "ContainerResourceGroup",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Resource Group of the Backup Item"
              }
            },
            {
              "columnMatch": "PolicyName",
              "formatter": 16,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Policy associated with the Backup Item"
              }
            },
            {
              "columnMatch": "StorageConsumedInGBs",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": false,
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "Cloud storage consumed by the Backup Item, as of the end of the selected time range"
              }
            },
            {
              "columnMatch": "ResourceId",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Vault associated with the Backup Item"
              }
            },
            {
              "columnMatch": "StorageReplicationType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Storage Replication Type associated with the Backup Item"
              }
            },
            {
              "columnMatch": "AzureResource",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Azure Resource associated with the Backup Item. For Azure VM Backup, SQL in Azure VM backup and SAP database in Azure VM backup, the Azure Resource is the Azure VM. For Azure Files Share backup, the Azure Resource is the Azure Storage account. For on-premises Backup Items, this field is blank."
              }
            },
            {
              "columnMatch": "BackupItemLink",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ExtractedBMSType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Backup Management Type"
              }
            },
            {
              "columnMatch": "ExtractedBackupItemType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Backup Item Type"
              }
            },
            {
              "columnMatch": "ExtractedBackupItemName",
              "formatter": 16,
              "formatOptions": {
                "linkColumn": "BackupItemLink",
                "linkTarget": "Resource",
                "subTarget": "backupProtectedItems",
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Name of the Backup Item"
              }
            },
            {
              "columnMatch": "ExtractedContainerName",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "StorageConsumedInMB",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "Total Cloud Storage consumed by the Backup Item, as of the end of the selected period"
              }
            },
            {
              "columnMatch": "BMSTypeWithBackupItemType",
              "formatter": 13,
              "formatOptions": {
                "linkColumn": "finalUrl",
                "linkTarget": "Resource",
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Type of Backup Item, in format Backup Management Type/Backup Item Type"
              }
            },
            {
              "columnMatch": "ContainerNameWithBackupItemName",
              "formatter": 5,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "BackupItemFrontEndSize",
              "formatter": 5,
              "formatOptions": {
                "min": 0,
                "palette": "orange",
                "showIcon": true
              }
            },
            {
              "columnMatch": "PolicyLink",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "BackupItemUniqueId",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "TempColumn",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ColumnToBeSorted",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "row_num",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "page_num",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "finalUrl",
              "formatter": 5,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "BackupItemFriendlyName",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "BackupItemName",
              "label": "Backup Item"
            },
            {
              "columnId": "ProtectedContainerName",
              "label": "Container"
            },
            {
              "columnId": "ContainerResourceGroup",
              "label": "Resource Group"
            },
            {
              "columnId": "PolicyName",
              "label": "Policy"
            },
            {
              "columnId": "StorageConsumedInGBs",
              "label": "Cloud Storage (GB)"
            },
            {
              "columnId": "ResourceId",
              "label": "Vault"
            },
            {
              "columnId": "StorageReplicationType",
              "label": "Storage Replication Type"
            },
            {
              "columnId": "AzureResource",
              "label": "Azure Resource"
            },
            {
              "columnId": "BackupItemLink"
            },
            {
              "columnId": "ExtractedBMSType",
              "label": "Backup Management Type"
            },
            {
              "columnId": "ExtractedBackupItemType",
              "label": "Backup Item Type"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "PolicyDetails"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "SelectedPolicyLink",
          "comparison": "isNotEqualTo",
          "value": "*"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "PolicyDetails"
      },
      "showPin": true,
      "name": "PolicyDetails-Grid2",
      "styleSettings": {
        "margin": "-30px 0% 0% 0%",
        "showBorder": true
      }
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">Storage by BackupItem</span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "name": "BackupItems-Grid1Title",
      "styleSettings": {
        "margin": "0% 0% 10px 0%"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "f40045ea-499d-46af-bc77-3df8c3b691a6",
            "version": "KqlParameterItem/1.0",
            "name": "PolicyNameInStorage",
            "label": "Search Policy Name",
            "type": 1,
            "description": "Use to search by Policy Name",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "value": ""
          },
          {
            "id": "7bb4a71d-d932-4737-8715-d378be7ffba5",
            "version": "KqlParameterItem/1.0",
            "name": "BillingMetricSortBy2",
            "label": "Sort By",
            "type": 2,
            "description": "Use to sort by a certain column",
            "isRequired": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"[\\r\\n{ \\\"value\\\": \\\"StorageConsumedInMBs\\\", \\\"label\\\": \\\"Cloud Storage (MB)\\\", \\\"selected\\\": \\\"true\\\" }]\"}",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 8,
            "resourceType": "microsoft.insights/components"
          },
          {
            "id": "595e5629-4f64-4038-bff5-5f3371259caa",
            "version": "KqlParameterItem/1.0",
            "name": "BillingMetricOrder2",
            "label": "Order",
            "type": 2,
            "description": "Use to specify sort order: Ascending/Descending",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"Ascending\"},\r\n    { \"value\":\"Descending\", \"selected\":true}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "0e4b3406-91aa-452e-90b2-6b22e71f0b82",
            "version": "KqlParameterItem/1.0",
            "name": "StorageMetricRowsPerGrid2",
            "label": "Rows Per Page",
            "type": 2,
            "description": "Number of rows to display in grid view",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "d1b7fe67-8c02-431c-904c-f82238dd112e",
            "version": "KqlParameterItem/1.0",
            "name": "StorageMetricPageNumber2",
            "label": "Page",
            "type": 2,
            "description": "Select Page Number",
            "isRequired": true,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Client\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\",\r\n\t  \"AzureBackupServer/SQLDB\", \"Azure Backup Server/SQL Database\",\r\n\t  \"AzureBackupServer/VMwareVM\", \"Azure Backup Server/VMWare VM\",\r\n\t  \"AzureBackupServer/HyperVVM\", \"Azure Backup Server/Hyper-V VM\",\r\n\t  \"AzureBackupServer/FileFolder\", \"Azure Backup Server/Files and Folder\",\r\n\t  \"AzureBackupServer/Client\", \"Azure Backup Server/Client\",\r\n\t  \"AzureBackupServer/SystemState\", \"Azure Backup Server/System State\",\r\n\t  \"AzureBackupServer/Sharepoint\", \"Azure Backup Server/Sharepoint Database\",\r\n\t  \"AzureBackupServer/Exchange\", \"Azure Backup Server/Exchange Mailbox Database\"];\r\n// Params\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet BackupItemProtectionStateParam = @\"{BackupItemProtectionState}\";\r\nlet PolicyNameInStorageParam = @\"{PolicyNameInStorage}\";\r\nlet Item_search =  @\"{ContainerNameWithBackupItemNameInStorage}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\r\n| join kind= leftouter (\r\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\r\n| join kind= leftouter (\r\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n)on BackupItemUniqueId == BackupItemUniqueId\r\n| project ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId,  BackupManagementType, BackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n};\r\nlet OutputTable = (){LatestBackupItemAssociationAndStorageConsumptionTable\r\n| project CustomBackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState))),\r\n  BackupManagementType, BackupItemType, BackupItemFrontEndSize, StorageConsumedInMBs = todouble(StorageConsumedInMBs / 1), ResourceId, PolicyName, ProtectedContainerName, BackupItemName, BackupItemFriendlyName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType\r\n| where CustomBackupItemProtectionState in (BackupItemProtectionStateParam) or '*' in (BackupItemProtectionStateParam)\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemName, BackupItemFriendlyName, PolicyName = iff(CustomBackupItemProtectionState == \"ProtectionStopped\", \"(none)\", PolicyName), BackupManagementType, BackupItemType, BackupItemFrontEndSize,  StorageConsumedInMBs = iff(isempty(StorageConsumedInMBs), todouble(0), StorageConsumedInMBs), ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType\r\n| where PolicyName contains (PolicyNameInStorageParam) or '*' in (PolicyNameInStorageParam)\r\n| project BackupItemUniqueId\r\n};\r\nOutputTable\r\n| summarize c=count()\r\n| project num = (c-1)/{StorageMetricRowsPerGrid2} + 1\r\n| project nums = range(1,num,1), num\r\n| mvexpand nums\r\n| project nums = tostring(nums), num = strcat(tostring(nums),\" of \",tostring(num))",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "name": "BackupItems-Grid1ParameterBlock",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Client\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\",\r\n\t  \"AzureBackupServer/SQLDB\", \"Azure Backup Server/SQL Database\",\r\n\t  \"AzureBackupServer/VMwareVM\", \"Azure Backup Server/VMWare VM\",\r\n\t  \"AzureBackupServer/HyperVVM\", \"Azure Backup Server/Hyper-V VM\",\r\n\t  \"AzureBackupServer/FileFolder\", \"Azure Backup Server/Files and Folder\",\r\n\t  \"AzureBackupServer/Client\", \"Azure Backup Server/Client\",\r\n\t  \"AzureBackupServer/SystemState\", \"Azure Backup Server/System State\",\r\n\t  \"AzureBackupServer/Sharepoint\", \"Azure Backup Server/Sharepoint Database\",\r\n\t  \"AzureBackupServer/Exchange\", \"Azure Backup Server/Exchange Mailbox Database\"];\r\n// Params\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet BackupItemProtectionStateParam = @\"{BackupItemProtectionState}\";\r\nlet PolicyNameInStorageParam = @\"{PolicyNameInStorage}\";\r\nlet Item_search =  @\"{ContainerNameWithBackupItemNameInStorage}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nVaultUnderResourceSpecific | join  (\r\n   PolicyTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\r\n| join kind= leftouter (\r\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\r\n| join kind= leftouter (\r\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n)on BackupItemUniqueId == BackupItemUniqueId\r\n| project ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId,  BackupManagementType, BackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\r\n};\r\nlet OutputTable = (){LatestBackupItemAssociationAndStorageConsumptionTable\r\n| project CustomBackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState))),\r\n  BackupManagementType, BackupItemType, BackupItemFrontEndSize, StorageConsumedInMBs = todouble(StorageConsumedInMBs / 1), ResourceId, PolicyName, ProtectedContainerName, BackupItemName, BackupItemFriendlyName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType\r\n| where CustomBackupItemProtectionState in (BackupItemProtectionStateParam) or '*' in (BackupItemProtectionStateParam)\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemName, BackupItemFriendlyName, PolicyName = iff(CustomBackupItemProtectionState == \"ProtectionStopped\", \"(none)\", PolicyName), BackupManagementType, BackupItemType, BackupItemFrontEndSize,  StorageConsumedInMBs = iff(isempty(StorageConsumedInMBs), todouble(0), StorageConsumedInMBs), ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType\r\n| where PolicyName contains (PolicyNameInStorageParam) or '*' in (PolicyNameInStorageParam)\r\n| extend PolicyLink = strcat(ResourceId, \"/backupPolicies/\", PolicyName)\r\n| project BackupItemName, BackupItemFriendlyName, PolicyName, BackupManagementType, BackupItemType, BackupItemFrontEndSize,  StorageConsumedInMBs = iff(isempty(StorageConsumedInMBs), todouble(0), StorageConsumedInMBs), ResourceId, PolicyLink, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemUniqueId, StorageReplicationType  \r\n| extend TempColumn = column_ifexists(tostring('{BillingMetricSortBy2}'), \"StorageConsumedInMBs\")\r\n| extend ColumnToBeSorted = iff(tostring('{BillingMetricOrder2}') == \"Ascending\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\r\n| sort by ColumnToBeSorted asc nulls last,  BackupItemUniqueId asc \r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/{StorageMetricRowsPerGrid2} + 1))\r\n| where page_num has ('{StorageMetricPageNumber2}') or '*' in ('{StorageMetricPageNumber2}')\r\n| extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\r\n| extend containerNameString = iff(array_length(split(ProtectedContainerName,\";\")) == 3, ProtectedContainerName, \"\")\r\n| parse containerNameString with entityType:string \";\" rgName:string \";\" entityName:string\r\n| extend entityTypeForAzureStorageUrl = iff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), \"\")\r\n| extend entityTypeForIaaSVMUrl = iff((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend entityTypeForAzureWorkloadUrl = iff(((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\") or (BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\")), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend AzureResource = iff(BackupManagementType in (\"DPM\", \"AzureBackupServer\", \"MAB\"), \"\" , iff(containerNameString != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId))\r\n| extend BackupItemLink =  iff ((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/IaasVMContainer;\", ProtectedContainerName, \"/protectedItems/VM;\", ProtectedContainerName),\r\niff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/StorageContainer;\", ProtectedContainerName, \"/protectedItems/AzureFileShare;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SQLDataBase;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SAPHanaDatabase;\", BackupItemName), \"\"))))\r\n|  extend container_array = split(ProtectedContainerName,\";\")\r\n|  extend container_arraylen = array_length(container_array)\r\n| project BackupItemName = BackupItemFriendlyName, ProtectedContainerName = ProtectedContainerFriendlyName, ContainerResourceGroup = iff(container_arraylen == 3, container_array[(container_arraylen-2)], \"(none)\"), PolicyName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), StorageConsumedInMBs, ResourceId, StorageReplicationType, AzureResource, PolicyLink, BackupItemLink}; \r\n// To change BMSTypeWithBackupItemType to standard names\r\nlet CustomOutputTable = BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\r\n| project BackupItemName, ProtectedContainerName, ContainerResourceGroup, PolicyName, BMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1 ,CustomBMSTypeWithBackupItemType ), StorageConsumedInMBs, ResourceId, StorageReplicationType, AzureResource, PolicyLink, BackupItemLink\r\n| parse BMSTypeWithBackupItemType with ExtractedBMSType:string \"/\" ExtractedBackupItemType:string\r\n| project BackupItemName, ProtectedContainerName, ContainerResourceGroup, PolicyName, StorageConsumedInGBs = StorageConsumedInMBs/1024, ResourceId, StorageReplicationType, AzureResource, PolicyLink, BackupItemLink, ExtractedBMSType, ExtractedBackupItemType \r\n;\r\nCustomOutputTable",
        "size": 3,
        "noDataMessage": "No records found for the selected time range and scope",
        "exportFieldName": "BackupItemUniqueId",
        "exportParameterName": "SelectedBackupItemUniqueId",
        "exportDefaultValue": "*",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "BackupItemName",
              "formatter": 16,
              "formatOptions": {
                "linkColumn": "BackupItemLink",
                "linkTarget": "Resource",
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Name of the Backup Item"
              }
            },
            {
              "columnMatch": "ProtectedContainerName",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Name of the Protected Container associated with the Backup Item"
              }
            },
            {
              "columnMatch": "ContainerResourceGroup",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Resource Group of the Backup Item"
              }
            },
            {
              "columnMatch": "PolicyName",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Policy associated with the Backup Item"
              }
            },
            {
              "columnMatch": "StorageConsumedInGBs",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": false,
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "Total Cloud Storage consumed by the Backup Item, as of the end of the selected time range"
              }
            },
            {
              "columnMatch": "ResourceId",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Vault associated with the Backup Item"
              }
            },
            {
              "columnMatch": "StorageReplicationType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Storage Replication Type associated with the Backup Item"
              }
            },
            {
              "columnMatch": "AzureResource",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Azure Resource associated with the Backup Item. For Azure VM Backup, SQL in Azure VM backup and SAP database in Azure VM backup, the Azure Resource is the Azure VM. For Azure Files Share backup, the Azure Resource is the Azure Storage account. For on-premises Backup Items, this field is blank."
              }
            },
            {
              "columnMatch": "PolicyLink",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "BackupItemLink",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ExtractedBMSType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Backup Management Type"
              }
            },
            {
              "columnMatch": "ExtractedBackupItemType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Backup Item Type"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "BackupItemName",
              "label": "Backup Item"
            },
            {
              "columnId": "ProtectedContainerName",
              "label": "Container"
            },
            {
              "columnId": "ContainerResourceGroup",
              "label": "Resource Group"
            },
            {
              "columnId": "PolicyName",
              "label": "Policy"
            },
            {
              "columnId": "StorageConsumedInGBs",
              "label": "Cloud Storage (GB)"
            },
            {
              "columnId": "ResourceId",
              "label": "Vault"
            },
            {
              "columnId": "StorageReplicationType",
              "label": "Storage Replication Type"
            },
            {
              "columnId": "AzureResource",
              "label": "Azure Resource"
            },
            {
              "columnId": "PolicyLink"
            },
            {
              "columnId": "BackupItemLink"
            },
            {
              "columnId": "ExtractedBMSType",
              "label": "Backup Management Type"
            },
            {
              "columnId": "ExtractedBackupItemType",
              "label": "Backup Item Type"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "BackupItems"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "BackupItems"
      },
      "showPin": true,
      "name": "BackupItems-Grid1",
      "styleSettings": {
        "margin": "-30px 0% 0% 0%",
        "showBorder": true
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "5eda7bfb-4a33-463c-a156-5b1a687cfdb2",
            "version": "KqlParameterItem/1.0",
            "name": "BackupItemProtectionState",
            "type": 1,
            "query": "print '*'",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 15"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "a29464c3-34f0-4d60-82bb-614b8128b7f9",
            "version": "KqlParameterItem/1.0",
            "name": "BillingEntityName",
            "label": "Search Billed Entity",
            "type": 1,
            "description": "Search by Billed Entity Name",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "value": ""
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Usage"
      },
      "customWidth": "90",
      "name": "Usage-SearchParameterBlock",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%",
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "_____________________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "Usage-DividingLine1"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet NumberOfDaysInRange = datetime_diff('day',RangeEnd, RangeStart);\r\n// AsonDay is needed to project consumption data only as per the last complete day.\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\nlet BMSTypeMappingTable = datatable (CustomBackupManagementType:string, CustomBMSType:string)\r\n    [ \"IaaSVM\", \"Azure Virtual Machine\",\r\n\t  \"AzureStorage\", \"Azure Storage (Azure Files)\",\r\n\t  \"MAB\", \"Azure Backup Agent\",\r\n\t  \"DPM\", \"DPM\",\r\n\t  \"AzureBackupServer\", \"Azure Backup Server\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM\",\r\n\t  \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM\",\r\n\t  \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM\"\r\n\t];\r\n // Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet BillingEntityNameParam =  @\"{BillingEntityName}\";\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\r\n{\r\n let ProtectedInstanceTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedInstance\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),\r\n ProtectedInstanceCount = toint(columnifexists(\"ProtectedInstanceCount_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderResourceSpecific = (isProtectedContainerBillingType:bool)\r\n{\r\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \r\n| where OperationName == \"ProtectedInstance\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics  | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\t\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= leftouter (\r\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId, TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId,  ResourceId, StorageReplicationType \r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific  | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \t\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= leftouter (\r\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId, TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId,  ResourceId, StorageReplicationType  \r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, \r\nBackupManagementType, BackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, TimeGenerated, ResourceId, StorageReplicationType\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\n// projecting TimeRangeDay to distill the report for RangeEndDay\r\nLatestBackupItemAssociationAndStorageConsumptionTable | project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, PolicyUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, TimeRangeEndDay = startofday(TimeGenerated), CustomBackupManagementType = BackupManagementType, ResourceId, StorageReplicationType\r\n};\r\nlet LatestProtectedContainerInfoTableExcludingDPMVMs = (){\r\n// projecting TimeRangeDay to distill the report for RangeEndDay\r\nLatestBackupItemAssociationAndStorageConsumptionTable\r\n| where not((BackupManagementType has \"DPM\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"DPM\" and BackupItemType has \"HyperVVM\") \r\nor (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"HyperVVM\"))\r\n// CustomBackupManagementType needed to distinguish 'AzureWorkload' \r\n| summarize StorageConsumedInMBs = sum(StorageConsumedInMBs), StorageAllocatedInMBs= sum(StorageAllocatedInMBs), BackupItemFrontEndSize = sum(BackupItemFrontEndSize), ProtectedContainerName = any(ProtectedContainerName), ProtectedContainerFriendlyName= any(ProtectedContainerFriendlyName), TimeRangeEndDay = startofday(any(TimeGenerated)), \r\nBackupManagementType = any(BackupManagementType), CustomBackupManagementType = iff((any(BackupManagementType) has \"AzureWorkload\"), any(strcat(BackupManagementType, \"/\", BackupItemType)), any(BackupManagementType)), StorageReplicationType = any(StorageReplicationType), ResourceId = any(ResourceId) by  ProtectedContainerUniqueId\r\n};\r\nlet LatestProtectedInstanceTable = (isProtectedContainerBillingType:bool) \r\n{CombinedTable | union isfuzzy = true \r\n(ProtectedInstanceUnderAzureDiagnostics(isProtectedContainerBillingType)),\r\n(ProtectedInstanceUnderResourceSpecific(isProtectedContainerBillingType))\r\n| where startofday(TimeGenerated) == AsonDay\r\n// ProtectedInstance is at BillingEntity level. CustomBackupManagementType can be the filter used.\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId\r\n| project BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType, ResourceId, TimeGenerated, ProtectedInstanceCount, TimeRangeEndDay = startofday(TimeGenerated), StorageReplicationType\r\n};\r\nlet LatestProtectedInstanceTableFromProtectedContainerUniqueId = ()\r\n{ \r\nLatestProtectedInstanceTable(true)\r\n| join kind= rightouter (LatestProtectedContainerInfoTableExcludingDPMVMs ) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project TimeRangeEndDay = TimeRangeEndDay1, ProtectedInstanceCount, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, BackupManagementType = BackupManagementType1, CustomBackupManagementType, BillingEntityType = \"ProtectedContainer\", BillingEntityName = ProtectedContainerFriendlyName, \r\n BillingEntityUniqueId = ProtectedContainerUniqueId1, ResourceId = ResourceId1, StorageReplicationType = StorageReplicationType1, ProtectedContainerName\r\n};\r\nlet LatestProtectedInstanceTableFromBackupItemUniqueId = ()\r\n{ \r\n(LatestProtectedInstanceTable(false)\r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\"))\r\n| join kind= rightouter \r\n// applicable only for DPM VM Scenarios\r\n(LatestBackupItemInfoTable | where ((BackupManagementType has \"DPM\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"DPM\" and BackupItemType has \"HyperVVM\") \r\nor (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"HyperVVM\")))\r\non BackupItemUniqueId == BackupItemUniqueId\r\n| project TimeRangeEndDay = TimeRangeEndDay1, ProtectedInstanceCount, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, BackupManagementType, CustomBackupManagementType, BillingEntityType = \"BackupItem\", BillingEntityName = BackupItemFriendlyName, \r\n BillingEntityUniqueId = BackupItemUniqueId1, ResourceId = ResourceId1, StorageReplicationType = StorageReplicationType1\r\n};\r\n// Special handling for DPM, AzureBackupServer Cluster scenario - Node PS has ProtectedInstance, whereas Cluster PS has storage Consumption\r\nlet LatestProtectedInstanceTableFromDPMNodeProtectedContainerUniqueId = ()\r\n{ \r\n(\r\n(LatestProtectedInstanceTable(true)\r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\")\r\n| where ProtectedInstanceCount > 0)\r\n| join kind= leftanti (LatestProtectedContainerInfoTableExcludingDPMVMs ) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId, BackupManagementType, ResourceId, TimeGenerated, ProtectedInstanceCount, TimeRangeEndDay, StorageReplicationType)\r\n| join (\r\nCombinedTable | union isfuzzy = true  \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\")\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId)\r\n  on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n  // BackupItemFrontEndSize and StorageConsumed will be 0.0 as the same will be calculated at cluster level \r\n  // As it is DPM or AzureBackupServer, no extra handling needed for AzureWorkload\r\n| project TimeRangeEndDay, ProtectedInstanceCount, BackupItemFrontEndSize = 0.0,\r\n StorageConsumedInMBs = 0.0, BackupManagementType, CustomBackupManagementType = BackupManagementType,\r\n  BillingEntityType = \"ProtectedContainer\", BillingEntityName = ProtectedContainerFriendlyName, \r\n BillingEntityUniqueId = ProtectedContainerUniqueId, ResourceId, StorageReplicationType, ProtectedContainerName\r\n};\r\nlet ProtectedInstanceMetric = ( ) \r\n{ union \r\n(LatestProtectedInstanceTableFromBackupItemUniqueId() ),\r\n(LatestProtectedInstanceTableFromProtectedContainerUniqueId()),\r\n(LatestProtectedInstanceTableFromDPMNodeProtectedContainerUniqueId)\r\n| where BillingEntityName contains (BillingEntityNameParam) or '*' in (BillingEntityNameParam)\r\n| summarize arg_max(TimeRangeEndDay, *) by BillingEntityUniqueId \r\n};\r\nlet ProtectedInstanceCount = ()\r\n{\r\nBMSTypeMappingTable\r\n| join kind = rightouter (\r\nProtectedInstanceMetric\r\n| project ProtectedInstanceCount = iff(isempty(ProtectedInstanceCount) or CustomBackupManagementType == \"AzureStorage\", 0.0 ,todouble(ProtectedInstanceCount)/10), CustomBackupManagementType\r\n| summarize TotalProtectedInstanceCount = sum(ProtectedInstanceCount) by CustomBackupManagementType\r\n) on CustomBackupManagementType == CustomBackupManagementType\r\n| project CustomBackupManagementType = iff(CustomBMSType == \"\",CustomBackupManagementType1,CustomBMSType), TotalProtectedInstanceCount\r\n| order by CustomBackupManagementType asc\r\n| extend rn = row_number()\r\n| extend  Key = pack_array(CustomBackupManagementType), Value = pack_array(TotalProtectedInstanceCount), SubText = pack_array(\"Protected Instance Count\"), Row = pack_array(rn)\r\n| project Key, Value, SubText, Row\r\n| mvexpand  Key, Value, SubText, Row\r\n};\r\nlet StorageByStorageReplication = ()\r\n{ProtectedInstanceMetric\r\n| summarize sum(StorageConsumedInMBs) by StorageReplicationType \r\n| order by StorageReplicationType\r\n// The below two values are temporary StorageReplicationType during vault creation\r\n| where StorageReplicationType !in (\"Invalid\", \"\")\r\n| extend rn = row_number(100)\r\n| extend  Key = pack_array(StorageReplicationType), Value = pack_array( sum_StorageConsumedInMBs/1024),  SubText = pack_array(\"Cloud Storage (GB)\"), Row = pack_array(rn)\r\n| project Key, Value, SubText, Row\r\n| mvexpand  Key, Value, SubText, Row\r\n};\r\nunion  ProtectedInstanceCount, StorageByStorageReplication \r\n| order by toint(Row) asc",
        "size": 3,
        "noDataMessage": "No records found for the selected time range and scope",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Key",
            "formatOptions": {
              "showIcon": true
            }
          },
          "subtitleContent": {
            "columnMatch": "SubText",
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatter": 12,
            "formatOptions": {
              "showIcon": true
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              }
            }
          },
          "showBorder": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Usage"
      },
      "name": "Usage-Tiles"
    },
    {
      "type": 1,
      "content": {
        "json": "_____________________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "Usage-DividingLine2"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet BillingEntityNameParam =  @\"{BillingEntityName}\";\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerHistoryUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerHistoryUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceHistoryUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\r\n{\r\n let ProtectedInstanceTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedInstance\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),\r\n ProtectedInstanceCount = toint(columnifexists(\"ProtectedInstanceCount_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceHistoryUnderResourceSpecific = (isProtectedContainerBillingType:bool)\r\n{\r\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedInstance\" and State != \"Deleted\"\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerUniqueId, ProtectedContainerFriendlyName \r\n| join hint.strategy = broadcast kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId , TimeRangeEndDay\r\n | join hint.strategy = partitioned kind= leftouter (\r\n   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join hint.strategy = partitioned kind= leftouter (\r\n  StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \r\n};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join hint.strategy = broadcast kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay \r\n | join hint.strategy = partitioned kind= leftouter (\r\n   BackupItemFrontEndSizeHistoryUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join hint.strategy = partitioned kind= leftouter (\r\n  StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\r\n{\r\nTotalBackupItemDimensionTable | join hint.strategy = broadcast \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet LatestBackupItemHistoryInfoTable = (){\r\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable \r\n| project BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, PolicyUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, CustomBackupManagementType = BackupManagementType, ProtectedContainerUniqueId, BackupItemUniqueId, TimeRangeEndDay\r\n};\r\nlet LatestProtectedContainerHistoryInfoTableExcludingDPMVMs = (){\r\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable \r\n| where not((BackupManagementType has \"DPM\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"DPM\" and BackupItemType has \"HyperVVM\") \r\nor (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"HyperVVM\"))\r\n| summarize StorageConsumedInMBs = sum(StorageConsumedInMBs), StorageAllocatedInMBs= sum(StorageAllocatedInMBs), BackupItemFrontEndSize = sum(BackupItemFrontEndSize), ProtectedContainerName = any(ProtectedContainerName), ProtectedContainerFriendlyName = any(ProtectedContainerFriendlyName), CustomBackupManagementType = iff((any(BackupManagementType) has \"AzureWorkload\"), any(strcat(BackupManagementType, \"/\", BackupItemType)), any(BackupManagementType)), BackupManagementType = any(BackupManagementType) by  ProtectedContainerUniqueId,  TimeRangeEndDay\r\n};\r\nlet TotalProtectedInstanceHistoryTable = (isProtectedContainerBillingType:bool) \r\n{CombinedTable | union isfuzzy = true \r\n(ProtectedInstanceHistoryUnderAzureDiagnostics(isProtectedContainerBillingType)),\r\n(ProtectedInstanceHistoryUnderResourceSpecific(isProtectedContainerBillingType))\r\n// ProtectedInstance is at BillingEntity level. CustomBackupManagementType can be the filter used.\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay\r\n};\r\nlet LatestProtectedInstanceHistoryTableFromProtectedContainerUniqueId = ()\r\n{ \r\nTotalProtectedInstanceHistoryTable(true) \r\n| join hint.strategy = partitioned kind= rightouter (LatestProtectedContainerHistoryInfoTableExcludingDPMVMs) on ProtectedContainerUniqueId == ProtectedContainerUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeRangeEndDay = iff(isempty(TimeRangeEndDay1), TimeRangeEndDay, TimeRangeEndDay1), ProtectedInstanceCount, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, BackupManagementType = BackupManagementType1, CustomBackupManagementType, BillingEntityType = \"ProtectedContainer\", BillingEntityName = ProtectedContainerFriendlyName, BillingEntityUniqueId = ProtectedContainerUniqueId1\r\n};\r\nlet LatestProtectedInstanceHistoryTableFromBackupItemUniqueId = ()\r\n{ \r\n(TotalProtectedInstanceHistoryTable(false) \r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\"))\r\n| join hint.strategy = partitioned kind= rightouter (LatestBackupItemHistoryInfoTable | where ((BackupManagementType has \"DPM\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"DPM\" and BackupItemType has \"HyperVVM\") \r\n or (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"HyperVVM\"))) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeRangeEndDay = TimeRangeEndDay1, ProtectedInstanceCount, BackupItemFrontEndSize, StorageConsumedInMBs, CustomBackupManagementType, BackupManagementType, BillingEntityType = \"BackupItem\", BillingEntityName = BackupItemFriendlyName, BillingEntityUniqueId = BackupItemUniqueId1\r\n};\r\n// Special handling for DPM, AzureBackupServer Cluster scenario - Node PS has ProtectedInstance, whereas Cluster PS has storage Consumption\r\nlet LatestProtectedInstanceHistoryTableFromDPMNodeProtectedContainerUniqueId = ()\r\n{ \r\n(\r\n(TotalProtectedInstanceHistoryTable(true) \r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\")\r\n| where ProtectedInstanceCount > 0)\r\n| join kind= leftanti (LatestProtectedContainerHistoryInfoTableExcludingDPMVMs ) on ProtectedContainerUniqueId == ProtectedContainerUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project ProtectedContainerUniqueId, BackupManagementType, ResourceId, TimeGenerated, ProtectedInstanceCount, TimeRangeEndDay, StorageReplicationType)\r\n| join (\r\nCombinedTable | union isfuzzy = true  \r\n(ProtectedContainerHistoryUnderAzureDiagnostics()),\r\n(ProtectedContainerHistoryUnderResourceSpecific())\r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\")\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId, TimeRangeEndDay)\r\n  on ProtectedContainerUniqueId == ProtectedContainerUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n  // BackupItemFrontEndSize and StorageConsumed will be 0.0 as the same will be calculated at cluster level \r\n  // As it is DPM or AzureBackupServer, no extra handling needed for AzureWorkload\r\n| project TimeRangeEndDay, ProtectedInstanceCount, BackupItemFrontEndSize = 0.0,\r\n StorageConsumedInMBs = 0.0, BackupManagementType, CustomBackupManagementType = BackupManagementType,\r\n  BillingEntityType = \"ProtectedContainer\", BillingEntityName = ProtectedContainerFriendlyName, \r\n BillingEntityUniqueId = ProtectedContainerUniqueId, ResourceId, StorageReplicationType, ProtectedContainerName\r\n};\r\nlet ProtectedInstanceHistoryMetric = ( ) \r\n{ union \r\n(LatestProtectedInstanceHistoryTableFromProtectedContainerUniqueId()),\r\n(LatestProtectedInstanceHistoryTableFromBackupItemUniqueId()),\r\n(LatestProtectedInstanceHistoryTableFromDPMNodeProtectedContainerUniqueId)\r\n| project  CustomBackupManagementType, BackupItemFrontEndSize, StorageConsumedInMBs, BillingEntityUniqueId, BillingEntityName, ProtectedInstanceCount, BillingEntityType, TimeRangeEndDay, BackupManagementType\r\n| where BillingEntityName contains (BillingEntityNameParam) or '*' in (BillingEntityNameParam)\r\n};\r\nProtectedInstanceHistoryMetric()\r\n// Display Tweaks for AFS and null ProtectedInstanceCount\r\n// Billing Entity is at BackupManagementType level and not at DS level. Hence BMSTypeWithBackupItemType can't be used.\r\n| project ProtectedInstanceCount = iff(isempty(ProtectedInstanceCount) or CustomBackupManagementType == \"AzureStorage\", 0.0 ,(todouble(ProtectedInstanceCount)/10)), TimeRangeEndDay\r\n| summarize ProtectedInstanceCount = sum(ProtectedInstanceCount) by  TimeRangeEndDay",
        "size": 0,
        "aggregation": 5,
        "title": "Protected Instances Trend",
        "noDataMessage": "No records found for the selected time range and scope",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "linechart",
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "TimeRangeEndDay",
              "sortOrder": 2
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "TimeRangeEndDay",
            "sortOrder": 2
          }
        ],
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "ProtectedInstanceCount",
              "label": "# Protected Instances"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Usage"
      },
      "customWidth": "50",
      "showPin": true,
      "name": "Usage-ProtectedInstancesTrendGraph"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\")); \r\nlet BillingEntityNameParam =  @\"{BillingEntityName}\";\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerHistoryUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerHistoryUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceHistoryUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\r\n{\r\n let ProtectedInstanceTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedInstance\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),\r\n ProtectedInstanceCount = toint(columnifexists(\"ProtectedInstanceCount_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join hint.strategy = broadcast (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceHistoryUnderResourceSpecific = (isProtectedContainerBillingType:bool)\r\n{\r\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedInstance\" and State != \"Deleted\"\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join hint.strategy = broadcast (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerUniqueId, ProtectedContainerFriendlyName \r\n| join hint.strategy = broadcast kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId , TimeRangeEndDay\r\n | join hint.strategy = partitioned kind= leftouter (\r\n   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join hint.strategy = partitioned kind= leftouter (\r\n  StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \r\n};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join hint.strategy = broadcast kind= rightouter  (\r\n    BackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay \r\n | join hint.strategy = partitioned kind= leftouter (\r\n   BackupItemFrontEndSizeHistoryUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\r\n| join hint.strategy = partitioned kind= leftouter (\r\n  StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\r\n{\r\nTotalBackupItemDimensionTable | join hint.strategy = broadcast \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet LatestBackupItemHistoryInfoTable = (){\r\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable \r\n| project BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, PolicyUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, CustomBackupManagementType = BackupManagementType, ProtectedContainerUniqueId, BackupItemUniqueId, TimeRangeEndDay\r\n};\r\nlet LatestProtectedContainerHistoryInfoTableExcludingDPMVMs = (){\r\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable \r\n| where not((BackupManagementType has \"DPM\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"DPM\" and BackupItemType has \"HyperVVM\") \r\nor (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"HyperVVM\"))\r\n| summarize StorageConsumedInMBs = sum(StorageConsumedInMBs), StorageAllocatedInMBs= sum(StorageAllocatedInMBs), BackupItemFrontEndSize = sum(BackupItemFrontEndSize), ProtectedContainerName = any(ProtectedContainerName), ProtectedContainerFriendlyName = any(ProtectedContainerFriendlyName), CustomBackupManagementType = iff((any(BackupManagementType) has \"AzureWorkload\"), any(strcat(BackupManagementType, \"/\", BackupItemType)), any(BackupManagementType)), BackupManagementType = any(BackupManagementType) by  ProtectedContainerUniqueId,  TimeRangeEndDay\r\n};\r\nlet TotalProtectedInstanceHistoryTable = (isProtectedContainerBillingType:bool) \r\n{CombinedTable | union isfuzzy = true \r\n(ProtectedInstanceHistoryUnderAzureDiagnostics(isProtectedContainerBillingType)),\r\n(ProtectedInstanceHistoryUnderResourceSpecific(isProtectedContainerBillingType))\r\n// ProtectedInstance is at BillingEntity level. CustomBackupManagementType can be the filter used.\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay\r\n};\r\nlet LatestProtectedInstanceHistoryTableFromProtectedContainerUniqueId = ()\r\n{ \r\nTotalProtectedInstanceHistoryTable(true) \r\n| join hint.strategy = partitioned kind= rightouter (LatestProtectedContainerHistoryInfoTableExcludingDPMVMs) on ProtectedContainerUniqueId == ProtectedContainerUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeRangeEndDay = iff(isempty(TimeRangeEndDay1), TimeRangeEndDay, TimeRangeEndDay1), ProtectedInstanceCount, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, BackupManagementType = BackupManagementType1, CustomBackupManagementType, BillingEntityType = \"ProtectedContainer\", BillingEntityName = ProtectedContainerFriendlyName, BillingEntityUniqueId = ProtectedContainerUniqueId1\r\n};\r\nlet LatestProtectedInstanceHistoryTableFromBackupItemUniqueId = ()\r\n{ \r\n(TotalProtectedInstanceHistoryTable(false) \r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\"))\r\n| join hint.strategy = partitioned kind= rightouter (LatestBackupItemHistoryInfoTable | where ((BackupManagementType has \"DPM\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"DPM\" and BackupItemType has \"HyperVVM\") \r\n or (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"HyperVVM\"))) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project TimeRangeEndDay = TimeRangeEndDay1, ProtectedInstanceCount, BackupItemFrontEndSize, StorageConsumedInMBs, CustomBackupManagementType, BackupManagementType, BillingEntityType = \"BackupItem\", BillingEntityName = BackupItemFriendlyName, BillingEntityUniqueId = BackupItemUniqueId1\r\n};\r\n// Special handling for DPM, AzureBackupServer Cluster scenario - Node PS has ProtectedInstance, whereas Cluster PS has storage Consumption\r\nlet LatestProtectedInstanceHistoryTableFromDPMNodeProtectedContainerUniqueId = ()\r\n{ \r\n(\r\n(TotalProtectedInstanceHistoryTable(true) \r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\")\r\n| where ProtectedInstanceCount > 0)\r\n| join kind= leftanti (LatestProtectedContainerHistoryInfoTableExcludingDPMVMs ) on ProtectedContainerUniqueId == ProtectedContainerUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project ProtectedContainerUniqueId, BackupManagementType, ResourceId, TimeGenerated, ProtectedInstanceCount, TimeRangeEndDay, StorageReplicationType)\r\n| join (\r\nCombinedTable | union isfuzzy = true  \r\n(ProtectedContainerHistoryUnderAzureDiagnostics()),\r\n(ProtectedContainerHistoryUnderResourceSpecific())\r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\")\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId, TimeRangeEndDay)\r\n  on ProtectedContainerUniqueId == ProtectedContainerUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n  // BackupItemFrontEndSize and StorageConsumed will be 0.0 as the same will be calculated at cluster level \r\n  // As it is DPM or AzureBackupServer, no extra handling needed for AzureWorkload\r\n| project TimeRangeEndDay, ProtectedInstanceCount, BackupItemFrontEndSize = 0.0,\r\n StorageConsumedInMBs = 0.0, BackupManagementType, CustomBackupManagementType = BackupManagementType,\r\n  BillingEntityType = \"ProtectedContainer\", BillingEntityName = ProtectedContainerFriendlyName, \r\n BillingEntityUniqueId = ProtectedContainerUniqueId, ResourceId, StorageReplicationType, ProtectedContainerName\r\n};\r\nlet ProtectedInstanceHistoryMetric = ( ) \r\n{ union \r\n(LatestProtectedInstanceHistoryTableFromProtectedContainerUniqueId()),\r\n(LatestProtectedInstanceHistoryTableFromBackupItemUniqueId()),\r\n(LatestProtectedInstanceHistoryTableFromDPMNodeProtectedContainerUniqueId)\r\n| project  CustomBackupManagementType, BackupItemFrontEndSize, StorageConsumedInMBs, BillingEntityUniqueId, BillingEntityName, ProtectedInstanceCount, BillingEntityType, TimeRangeEndDay, BackupManagementType\r\n| where BillingEntityName contains (BillingEntityNameParam) or '*' in (BillingEntityNameParam)\r\n};\r\nProtectedInstanceHistoryMetric()\r\n// Display Tweaks for AFS and null ProtectedInstanceCount\r\n// Billing Entity is at BackupManagementType level and not at DS level. Hence BMSTypeWithBackupItemType can't be used.\r\n| project TimeRangeEndDay, StorageConsumedInMBs = iff(isempty(StorageConsumedInMBs), todouble(0), StorageConsumedInMBs)\r\n| summarize StorageConsumedInGBs = sum(StorageConsumedInMBs)/(1024) by  TimeRangeEndDay",
        "size": 0,
        "aggregation": 5,
        "title": "Cloud Storage Trend",
        "noDataMessage": "No records found for the selected time range and scope",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "linechart",
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "TimeRangeEndDay",
              "sortOrder": 2
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "TimeRangeEndDay",
            "sortOrder": 2
          }
        ],
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "StorageConsumedInMBs",
              "label": "Cloud Storage (MB)"
            },
            {
              "seriesName": "StorageConsumedInGBs",
              "label": "Cloud Storage (GB)"
            }
          ],
          "xSettings": {
            "unit": 17,
            "min": null,
            "max": null
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Usage"
      },
      "customWidth": "50",
      "showPin": true,
      "name": "Usage-CloudStorageTrendGraph"
    },
    {
      "type": 1,
      "content": {
        "json": "___________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "Usage-DividingLine2"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">Protected Instances and Storage by Billed Entity </span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Usage"
      },
      "name": "Usage-Grid1Title",
      "styleSettings": {
        "margin": "0% 0% 10px 0%"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "5dc2a074-b510-44f2-9530-cfcbd159b59c",
            "version": "KqlParameterItem/1.0",
            "name": "ProtectedInstanceMetricSortBy",
            "label": "Sort By",
            "type": 2,
            "description": "Use to sort by a certain column",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{ \"value\": \"ProtectedInstanceCount\", \"label\": \"# Protected Instances\" },\r\n{ \"value\": \"StorageConsumedInMBs\", \"label\": \"Vault Storage (MB)\", \"selected\": \"true\" }]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "df3cc03c-53f7-4523-a29b-e50bf1b6d922",
            "version": "KqlParameterItem/1.0",
            "name": "ProtectedInstanceMetricOrder",
            "label": "Order",
            "type": 2,
            "description": "Use to specify the sort order: Ascending/Descending",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"Ascending\"},\r\n    { \"value\":\"Descending\", \"selected\":true}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "102bf69d-4952-4a1f-827d-fd726a82d666",
            "version": "KqlParameterItem/1.0",
            "name": "ProtectedInstanceMetricRowsPerGrid",
            "label": "Rows per page",
            "type": 2,
            "description": "Number of rows to display in grid view",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "f4433681-963d-4204-867c-c54c6c89d3f8",
            "version": "KqlParameterItem/1.0",
            "name": "ProtectedInstanceMetricPageNumber",
            "label": "Page",
            "type": 2,
            "description": "Select Page Number",
            "isRequired": true,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet NumberOfDaysInRange = datetime_diff('day',RangeEnd, RangeStart);\r\n// AsonDay is needed to project consumption data only as per the last complete day.\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\nlet BMSTypeMappingTable = datatable (CustomBackupManagementType:string, CustomBMSType:string)\r\n    [ \"IaaSVM\", \"Azure Virtual Machine\",\r\n\t  \"AzureStorage\", \"Azure Storage (Azure Files)\",\r\n\t  \"MAB\", \"Azure Backup Agent\",\r\n\t  \"DPM\", \"DPM\",\r\n\t  \"AzureBackupServer\", \"Azure Backup Server\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM\",\r\n\t  \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM\",\r\n\t  \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM\"\r\n\t];\r\n // Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet BillingEntityNameParam =  @\"{BillingEntityName}\";\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\r\n{\r\n let ProtectedInstanceTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedInstance\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),\r\n ProtectedInstanceCount = toint(columnifexists(\"ProtectedInstanceCount_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderResourceSpecific = (isProtectedContainerBillingType:bool)\r\n{\r\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \r\n| where OperationName == \"ProtectedInstance\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics  | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\t\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= leftouter (\r\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId, TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId,  ResourceId, StorageReplicationType \r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific  | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \t\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= leftouter (\r\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId, TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId,  ResourceId, StorageReplicationType  \r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, \r\nBackupManagementType, BackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, TimeGenerated, ResourceId, StorageReplicationType\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\n// projecting TimeRangeDay to distill the report for RangeEndDay\r\nLatestBackupItemAssociationAndStorageConsumptionTable | project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, PolicyUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, TimeRangeEndDay = startofday(TimeGenerated), CustomBackupManagementType = BackupManagementType, ResourceId, StorageReplicationType\r\n};\r\nlet LatestProtectedContainerInfoTableExcludingDPMVMs = (){\r\n// projecting TimeRangeDay to distill the report for RangeEndDay\r\nLatestBackupItemAssociationAndStorageConsumptionTable\r\n| where not((BackupManagementType has \"DPM\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"DPM\" and BackupItemType has \"HyperVVM\") \r\nor (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"HyperVVM\"))\r\n// CustomBackupManagementType needed to distinguish 'AzureWorkload' \r\n| summarize StorageConsumedInMBs = sum(StorageConsumedInMBs), StorageAllocatedInMBs= sum(StorageAllocatedInMBs), BackupItemFrontEndSize = sum(BackupItemFrontEndSize), ProtectedContainerName = any(ProtectedContainerName), ProtectedContainerFriendlyName= any(ProtectedContainerFriendlyName), TimeRangeEndDay = startofday(any(TimeGenerated)), \r\nBackupManagementType = any(BackupManagementType), CustomBackupManagementType = iff((any(BackupManagementType) has \"AzureWorkload\"), any(strcat(BackupManagementType, \"/\", BackupItemType)), any(BackupManagementType)), StorageReplicationType = any(StorageReplicationType), ResourceId = any(ResourceId) by  ProtectedContainerUniqueId\r\n};\r\nlet LatestProtectedInstanceTable = (isProtectedContainerBillingType:bool) \r\n{CombinedTable | union isfuzzy = true \r\n(ProtectedInstanceUnderAzureDiagnostics(isProtectedContainerBillingType)),\r\n(ProtectedInstanceUnderResourceSpecific(isProtectedContainerBillingType))\r\n| where startofday(TimeGenerated) == AsonDay\r\n// ProtectedInstance is at BillingEntity level. CustomBackupManagementType can be the filter used.\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId\r\n| project BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType, ResourceId, TimeGenerated, ProtectedInstanceCount, TimeRangeEndDay = startofday(TimeGenerated), StorageReplicationType\r\n};\r\nlet LatestProtectedInstanceTableFromProtectedContainerUniqueId = ()\r\n{ \r\nLatestProtectedInstanceTable(true)\r\n| join kind= rightouter (LatestProtectedContainerInfoTableExcludingDPMVMs ) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project TimeRangeEndDay = TimeRangeEndDay1, ProtectedInstanceCount, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, BackupManagementType = BackupManagementType1, CustomBackupManagementType, BillingEntityType = \"ProtectedContainer\", BillingEntityName = ProtectedContainerFriendlyName, \r\n BillingEntityUniqueId = ProtectedContainerUniqueId1, ResourceId = ResourceId1, StorageReplicationType = StorageReplicationType1, ProtectedContainerName\r\n};\r\nlet LatestProtectedInstanceTableFromBackupItemUniqueId = ()\r\n{ \r\n(LatestProtectedInstanceTable(false)\r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\"))\r\n| join kind= rightouter \r\n// applicable only for DPM VM Scenarios\r\n(LatestBackupItemInfoTable | where ((BackupManagementType has \"DPM\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"DPM\" and BackupItemType has \"HyperVVM\") \r\nor (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"HyperVVM\")))\r\non BackupItemUniqueId == BackupItemUniqueId\r\n| project TimeRangeEndDay = TimeRangeEndDay1, ProtectedInstanceCount, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, BackupManagementType, CustomBackupManagementType, BillingEntityType = \"BackupItem\", BillingEntityName = BackupItemFriendlyName, \r\n BillingEntityUniqueId = BackupItemUniqueId1, ResourceId = ResourceId1, StorageReplicationType = StorageReplicationType1\r\n};\r\n// Special handling for DPM, AzureBackupServer Cluster scenario - Node PS has ProtectedInstance, whereas Cluster PS has storage Consumption\r\nlet LatestProtectedInstanceTableFromDPMNodeProtectedContainerUniqueId = ()\r\n{ \r\n(\r\n(LatestProtectedInstanceTable(true)\r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\")\r\n| where ProtectedInstanceCount > 0)\r\n| join kind= leftanti (LatestProtectedContainerInfoTableExcludingDPMVMs ) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId, BackupManagementType, ResourceId, TimeGenerated, ProtectedInstanceCount, TimeRangeEndDay, StorageReplicationType)\r\n| join (\r\nCombinedTable | union isfuzzy = true  \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\")\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId)\r\n  on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n  // BackupItemFrontEndSize and StorageConsumed will be 0.0 as the same will be calculated at cluster level \r\n  // As it is DPM or AzureBackupServer, no extra handling needed for AzureWorkload\r\n| project TimeRangeEndDay, ProtectedInstanceCount, BackupItemFrontEndSize = 0.0,\r\n StorageConsumedInMBs = 0.0, BackupManagementType, CustomBackupManagementType = BackupManagementType,\r\n  BillingEntityType = \"ProtectedContainer\", BillingEntityName = ProtectedContainerFriendlyName, \r\n BillingEntityUniqueId = ProtectedContainerUniqueId, ResourceId, StorageReplicationType, ProtectedContainerName\r\n};\r\nlet ProtectedInstanceMetric = ( ) \r\n{ union \r\n(LatestProtectedInstanceTableFromBackupItemUniqueId() ),\r\n(LatestProtectedInstanceTableFromProtectedContainerUniqueId()),\r\n(LatestProtectedInstanceTableFromDPMNodeProtectedContainerUniqueId)\r\n| where BillingEntityName contains (BillingEntityNameParam) or '*' in (BillingEntityNameParam)\r\n| summarize arg_max(TimeRangeEndDay, *) by BillingEntityUniqueId \r\n};\r\nProtectedInstanceMetric\r\n| summarize c=count()\r\n| project num = (c-1)/{ProtectedInstanceMetricRowsPerGrid} + 1\r\n| project nums = range(1,num,1), num\r\n| mvexpand nums\r\n| project nums = tostring(nums), num = strcat(tostring(nums),\" of \",tostring(num))",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Usage"
      },
      "customWidth": "90",
      "name": "Usage-Grid1ParameterBlock",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%",
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet NumberOfDaysInRange = datetime_diff('day',RangeEnd, RangeStart);\r\n// AsonDay is needed to project consumption data only as per the last complete day.\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\nlet BMSTypeMappingTable = datatable (CustomBackupManagementType:string, CustomBMSType:string)\r\n    [ \"IaaSVM\", \"Azure Virtual Machine\",\r\n\t  \"AzureStorage\", \"Azure Storage (Azure Files)\",\r\n\t  \"MAB\", \"Azure Backup Agent\",\r\n\t  \"DPM\", \"DPM\",\r\n\t  \"AzureBackupServer\", \"Azure Backup Server\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM\",\r\n\t  \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM\",\r\n\t  \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM\"\r\n\t];\r\n // Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet BillingEntityNameParam =  @\"{BillingEntityName}\";\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Not Projecting ProtectedContainerUniqueId - DPM/AzureBackupServer ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\r\n{\r\n let ProtectedInstanceTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedInstance\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),\r\n ProtectedInstanceCount = toint(columnifexists(\"ProtectedInstanceCount_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderResourceSpecific = (isProtectedContainerBillingType:bool)\r\n{\r\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \r\n| where OperationName == \"ProtectedInstance\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics  | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\t\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= leftouter (\r\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId, TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId,  ResourceId, StorageReplicationType \r\n};\r\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific  | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \t\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| join kind= leftouter (\r\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType \r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| join kind= leftouter (\r\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId, TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId,  ResourceId, StorageReplicationType  \r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join \r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, \r\nBackupManagementType, BackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, TimeGenerated, ResourceId, StorageReplicationType\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\n// projecting TimeRangeDay to distill the report for RangeEndDay\r\nLatestBackupItemAssociationAndStorageConsumptionTable | project BackupItemUniqueId, BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, PolicyUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, TimeRangeEndDay = startofday(TimeGenerated), CustomBackupManagementType = BackupManagementType, ResourceId, StorageReplicationType\r\n};\r\nlet LatestProtectedContainerInfoTableExcludingDPMVMs = (){\r\n// projecting TimeRangeDay to distill the report for RangeEndDay\r\nLatestBackupItemAssociationAndStorageConsumptionTable\r\n| where not((BackupManagementType has \"DPM\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"DPM\" and BackupItemType has \"HyperVVM\") \r\nor (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"HyperVVM\"))\r\n// CustomBackupManagementType needed to distinguish 'AzureWorkload' \r\n| summarize StorageConsumedInMBs = sum(StorageConsumedInMBs), StorageAllocatedInMBs= sum(StorageAllocatedInMBs), BackupItemFrontEndSize = sum(BackupItemFrontEndSize), ProtectedContainerName = any(ProtectedContainerName), ProtectedContainerFriendlyName= any(ProtectedContainerFriendlyName), TimeRangeEndDay = startofday(any(TimeGenerated)), \r\nBackupManagementType = any(BackupManagementType), CustomBackupManagementType = iff((any(BackupManagementType) has \"AzureWorkload\"), any(strcat(BackupManagementType, \"/\", BackupItemType)), any(BackupManagementType)), StorageReplicationType = any(StorageReplicationType), ResourceId = any(ResourceId) by  ProtectedContainerUniqueId\r\n};\r\nlet LatestProtectedInstanceTable = (isProtectedContainerBillingType:bool) \r\n{CombinedTable | union isfuzzy = true \r\n(ProtectedInstanceUnderAzureDiagnostics(isProtectedContainerBillingType)),\r\n(ProtectedInstanceUnderResourceSpecific(isProtectedContainerBillingType))\r\n| where startofday(TimeGenerated) == AsonDay\r\n// ProtectedInstance is at BillingEntity level. CustomBackupManagementType can be the filter used.\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId\r\n| project BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType, ResourceId, TimeGenerated, ProtectedInstanceCount, TimeRangeEndDay = startofday(TimeGenerated), StorageReplicationType\r\n};\r\nlet LatestProtectedInstanceTableFromProtectedContainerUniqueId = ()\r\n{ \r\nLatestProtectedInstanceTable(true)\r\n| join kind= rightouter (LatestProtectedContainerInfoTableExcludingDPMVMs ) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project TimeRangeEndDay = TimeRangeEndDay1, ProtectedInstanceCount, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, BackupManagementType = BackupManagementType1, CustomBackupManagementType, BillingEntityType = \"ProtectedContainer\", BillingEntityName = ProtectedContainerFriendlyName, \r\n BillingEntityUniqueId = ProtectedContainerUniqueId1, ResourceId = ResourceId1, StorageReplicationType = StorageReplicationType1, ProtectedContainerName\r\n};\r\nlet LatestProtectedInstanceTableFromBackupItemUniqueId = ()\r\n{ \r\n(LatestProtectedInstanceTable(false)\r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\"))\r\n| join kind= rightouter \r\n// applicable only for DPM VM Scenarios\r\n(LatestBackupItemInfoTable | where ((BackupManagementType has \"DPM\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"DPM\" and BackupItemType has \"HyperVVM\") \r\nor (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"VMwareVM\") or (BackupManagementType has \"AzureBackupServer\" and BackupItemType has \"HyperVVM\")))\r\non BackupItemUniqueId == BackupItemUniqueId\r\n| project TimeRangeEndDay = TimeRangeEndDay1, ProtectedInstanceCount, BackupItemFrontEndSize,\r\n StorageConsumedInMBs, BackupManagementType, CustomBackupManagementType, BillingEntityType = \"BackupItem\", BillingEntityName = BackupItemFriendlyName, \r\n BillingEntityUniqueId = BackupItemUniqueId1, ResourceId = ResourceId1, StorageReplicationType = StorageReplicationType1\r\n};\r\n// Special handling for DPM, AzureBackupServer Cluster scenario - Node PS has ProtectedInstance, whereas Cluster PS has storage Consumption\r\nlet LatestProtectedInstanceTableFromDPMNodeProtectedContainerUniqueId = ()\r\n{ \r\n(\r\n(LatestProtectedInstanceTable(true)\r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\")\r\n| where ProtectedInstanceCount > 0)\r\n| join kind= leftanti (LatestProtectedContainerInfoTableExcludingDPMVMs ) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId, BackupManagementType, ResourceId, TimeGenerated, ProtectedInstanceCount, TimeRangeEndDay, StorageReplicationType)\r\n| join (\r\nCombinedTable | union isfuzzy = true  \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where BackupManagementType in (\"DPM\",\"AzureBackupServer\")\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId)\r\n  on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n  // BackupItemFrontEndSize and StorageConsumed will be 0.0 as the same will be calculated at cluster level \r\n  // As it is DPM or AzureBackupServer, no extra handling needed for AzureWorkload\r\n| project TimeRangeEndDay, ProtectedInstanceCount, BackupItemFrontEndSize = 0.0,\r\n StorageConsumedInMBs = 0.0, BackupManagementType, CustomBackupManagementType = BackupManagementType,\r\n  BillingEntityType = \"ProtectedContainer\", BillingEntityName = ProtectedContainerFriendlyName, \r\n BillingEntityUniqueId = ProtectedContainerUniqueId, ResourceId, StorageReplicationType, ProtectedContainerName\r\n};\r\nlet ProtectedInstanceMetric = ( ) \r\n{ union \r\n(LatestProtectedInstanceTableFromBackupItemUniqueId() ),\r\n(LatestProtectedInstanceTableFromProtectedContainerUniqueId()),\r\n(LatestProtectedInstanceTableFromDPMNodeProtectedContainerUniqueId)\r\n| where BillingEntityName contains (BillingEntityNameParam) or '*' in (BillingEntityNameParam)\r\n| summarize arg_max(TimeRangeEndDay, *) by BillingEntityUniqueId \r\n};\r\n// Display Tweaks for AFS and null ProtectedInstanceCount\r\n// Billing Entity is at BackupManagementType level and not at DS level. \r\nlet OutputTable = () {ProtectedInstanceMetric\r\n| project  CustomBackupManagementType, BackupItemFrontEndSize = todouble(BackupItemFrontEndSize / 1), StorageConsumedInMBs = todouble(StorageConsumedInMBs / 1), BillingEntityUniqueId, BillingEntityName, ProtectedInstanceCount = todouble(ProtectedInstanceCount)/10, ResourceId, BillingEntityType, StorageReplicationType, ProtectedContainerName\r\n| project BillingEntityUniqueId, BillingEntityType, BillingEntityName, CustomBackupManagementType, ProtectedInstanceCount = iff(isempty(ProtectedInstanceCount) or CustomBackupManagementType == \"AzureStorage\", 0.0 ,ProtectedInstanceCount), \r\n StorageConsumedInMBs = iff(isempty(StorageConsumedInMBs), todouble(0), StorageConsumedInMBs), BackupItemFrontEndSize = iff(isempty(BackupItemFrontEndSize), todouble(0), BackupItemFrontEndSize), ResourceId, StorageReplicationType, ProtectedContainerName\r\n| extend TempColumn = column_ifexists(tostring('{ProtectedInstanceMetricSortBy}'), \"sum_StorageConsumedInMBs\")\r\n| extend ColumnToBeSorted = iff(tostring('{ProtectedInstanceMetricOrder}') == \"Ascending\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\r\n| sort by ColumnToBeSorted asc nulls last, BillingEntityUniqueId asc\r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/{ProtectedInstanceMetricRowsPerGrid} + 1))\r\n| where page_num has ('{ProtectedInstanceMetricPageNumber}') or '*' in ('{ProtectedInstanceMetricPageNumber}')\r\n|  extend container_array = split(ProtectedContainerName,\";\")\r\n|  extend container_arraylen = array_length(container_array)\r\n| project ContainerFriendlyName = BillingEntityName, ContainerResourceGroup = iff(container_arraylen == 3, container_array[(container_arraylen-2)], \"(none)\"), BillingEntityType, CustomBackupManagementType, ProtectedInstanceCount, StorageConsumedInMBs, StorageReplicationType, BackupItemFrontEndSize, ResourceId, BillingEntityName \r\n| parse ResourceId with * \"/SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS/\" VaultResourceGroup:string \"/PROVIDERS/\" *};\r\nlet CustomOutputTable = () {BMSTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non CustomBackupManagementType == CustomBackupManagementType\r\n| project BillingEntityName, ContainerFriendlyName, ContainerResourceGroup, BillingEntityType, CustomBackupManagementType = iff(CustomBMSType == \"\",CustomBackupManagementType1,CustomBMSType), ProtectedInstanceCount, StorageConsumedInGBs = StorageConsumedInMBs/1024, StorageReplicationType, BackupItemFrontEndSize, ResourceId, VaultResourceGroup, SubscriptionId};\r\nCustomOutputTable ",
        "size": 3,
        "noDataMessage": "No records found for the selected time range and scope",
        "exportFieldName": "BillingEntityUniqueId",
        "exportParameterName": "SelectedBillingEntityUniqueId",
        "exportDefaultValue": "*",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "BillingEntityName",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Name of the Billed Entity"
              }
            },
            {
              "columnMatch": "ContainerFriendlyName",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ContainerResourceGroup",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Resouce Group of the Billed Entity"
              }
            },
            {
              "columnMatch": "BillingEntityType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Type of the Billed Entity, whether it is a Protected Container or Backup Item"
              }
            },
            {
              "columnMatch": "CustomBackupManagementType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Backup Management Type"
              }
            },
            {
              "columnMatch": "ProtectedInstanceCount",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": false,
                  "maximumFractionDigits": 1
                }
              },
              "tooltipFormat": {
                "tooltip": "Number of Protected Instances associated with the Billed Entity, as of the end of the selected time range. A Billed Entity with frontend size under 50GB is said to have 0.5 Protected Instances"
              }
            },
            {
              "columnMatch": "StorageConsumedInGBs",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "Total Cloud Storage consumed by the Billed Entity, as of the end of the selected time range."
              }
            },
            {
              "columnMatch": "StorageReplicationType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Storage Replication Type associated with the Billed Entity"
              }
            },
            {
              "columnMatch": "BackupItemFrontEndSize",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ResourceId",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Vault associated with the Backup Item"
              }
            },
            {
              "columnMatch": "VaultResourceGroup",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Resource Group of the Vault"
              }
            },
            {
              "columnMatch": "SubscriptionId",
              "formatter": 13,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Subscription in which the Vault exists"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "BillingEntityName",
              "label": "Billed Entity"
            },
            {
              "columnId": "ContainerFriendlyName"
            },
            {
              "columnId": "ContainerResourceGroup",
              "label": "Billed Entity Resource Group"
            },
            {
              "columnId": "BillingEntityType",
              "label": "Billed Entity Type"
            },
            {
              "columnId": "CustomBackupManagementType",
              "label": "Backup Management Type"
            },
            {
              "columnId": "ProtectedInstanceCount",
              "label": "# Protected Instances"
            },
            {
              "columnId": "StorageConsumedInGBs",
              "label": "Cloud Storage (GB)"
            },
            {
              "columnId": "StorageReplicationType",
              "label": "Storage Replication Type"
            },
            {
              "columnId": "BackupItemFrontEndSize"
            },
            {
              "columnId": "ResourceId",
              "label": "Vault"
            },
            {
              "columnId": "VaultResourceGroup",
              "label": "Vault Resource Group"
            },
            {
              "columnId": "SubscriptionId",
              "label": "Subscription"
            }
          ]
        },
        "sortBy": [],
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Key",
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatOptions": {
              "showIcon": true
            }
          },
          "showBorder": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "Usage"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Usage"
      },
      "showPin": true,
      "name": "Usage-Grid1",
      "styleSettings": {
        "margin": "-30px 0% 0% 0%",
        "padding": "0% 0% 0% 0%",
        "showBorder": true
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "24608a3f-634b-4f4f-87cc-998a00636eeb",
            "version": "KqlParameterItem/1.0",
            "name": "ContainerNameWithBackupItemName",
            "label": "Search Item or Container",
            "type": 1,
            "description": "Use to search for a Backup Item by name. <br/> To search for a specific item in a container, use the syntax [container name];[item name] <br/> To search for all items in a container, use the syntax [container name];",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "value": ""
          },
          {
            "id": "71c5a2f9-67e4-48d4-aec3-4c4116f04acd",
            "version": "KqlParameterItem/1.0",
            "name": "JobOperation",
            "label": "Job Operation",
            "type": 2,
            "description": "Use to filter by Job Operation",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Time variable used ******************** Using ExtRange For artifacts ******************************\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet ExtRangeStart = RangeStart - 2d;\r\nlet ExtRangeEnd = RangeEnd + 2d;\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\n\r\n//search\r\nlet Item_search =  @\"{ContainerNameWithBackupItemName}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\"); \r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nTotalBackupItemDimensionTable\r\n| join  (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId = BackupItemUniqueId1, ResourceId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n};\r\nlet LatestJobTable = () { \r\nLatestJobTableBasedOnBackupItem()\r\n| where JobUniqueId != \"\"\r\n| distinct JobOperation}; \r\nLatestJobTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "49be13b9-6869-4cb2-94e0-b122508d1efb",
            "version": "KqlParameterItem/1.0",
            "name": "JobStatus",
            "label": "Job Status",
            "type": 2,
            "description": "Use to filter by Job Status",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"Completed\", \"label\":\"Succeeded\" },\r\n    { \"value\":\"Failed\", \"label\":\"Failed\"  },\r\n    { \"value\":\"CompletedWithWarnings\",   \"label\":\"SucceededWithWarnings\"  },\r\n    { \"value\":\"Cancelled\", \"label\":\"Cancelled\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "84fef06a-bc14-40e3-a6c5-68647b3f5474",
            "version": "KqlParameterItem/1.0",
            "name": "JobFailureCode",
            "label": "Job Failure Code",
            "type": 2,
            "description": "Use to filter by Job Failure Code",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Time variable used ******************** Using ExtRange For artifacts ******************************\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet ExtRangeStart = RangeStart - 2d;\r\nlet ExtRangeEnd = RangeEnd + 2d;\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\n\r\n//search\r\nlet Item_search =  @\"{ContainerNameWithBackupItemName}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\"); \r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nTotalBackupItemDimensionTable\r\n| join  (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId = BackupItemUniqueId1, ResourceId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n};\r\nlet LatestJobTable = () { \r\nLatestJobTableBasedOnBackupItem()\r\n| where JobUniqueId != \"\"\r\n| distinct JobFailureCode\r\n| where not (JobFailureCode == \"Success\" or JobFailureCode == \"\")}; \r\nLatestJobTable ",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "name": "JobDistribution-TopParameterBlock"
    },
    {
      "type": 1,
      "content": {
        "json": "________________________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "JobDistribution-DividingLine1"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used ******************** Using ExtRange For artifacts ******************************\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet ExtRangeStart = RangeStart - 2d;\r\nlet ExtRangeEnd = RangeEnd + 2d;\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet JobOperationParam = todynamic(strcat( \"[\", @\"{JobOperation}\", \"]\")); \r\nlet JobStatusParam = todynamic(strcat( \"[\", @\"{JobStatus}\", \"]\"));\r\nlet JobFailureCodeParam = todynamic(strcat( \"[\", @\"{JobFailureCode}\", \"]\"));\r\n//search\r\nlet Item_search =  @\"{ContainerNameWithBackupItemName}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");  \r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nTotalBackupItemDimensionTable\r\n| join  (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in (JobOperationParam) or '*' in (JobOperationParam)\r\n| where JobStatus in (JobStatusParam) or '*' in (JobStatusParam)\r\n| where JobFailureCode in (JobFailureCodeParam) or '*' in (JobFailureCodeParam)\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId = BackupItemUniqueId1, ResourceId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n};\r\nlet LatestJobTable =  materialize(\r\nLatestJobTableBasedOnBackupItem()\r\n| where JobUniqueId != \"\"\r\n| distinct JobStatus, JobUniqueId); \r\nlet JobSuccessPercent = LatestJobTable\r\n| extend success=iff((JobStatus == \"Completed\" or JobStatus == \"CompletedWithWarnings\") , 1 , 0)\r\n| extend record = 1 // to be used for total row count\r\n| summarize SuccessfulCount =sum(success), TotalCount=sum(record)\r\n| extend JobSuccessPercentage = (SuccessfulCount*100)/todouble(TotalCount)\r\n| project JobSuccessPercentage = iff( (isnan(JobSuccessPercentage) or isinf(JobSuccessPercentage) or isempty(JobSuccessPercentage)), \"-\", tostring(JobSuccessPercentage)) \r\n| extend  Key = pack_array(\"Success %\"), Value = pack_array( JobSuccessPercentage), Row = pack_array(0)\r\n| project Key, Value, Row\r\n| mvexpand  Key, Value, Row; \r\nlet JobStatusEnum = datatable (JobStatus:string, statusOrder:int, CustomJobStatus:string)\r\n    [ \"Completed\", 1, \"Succeeded\",\r\n      \"CompletedWithWarnings\", 2, \"SucceededWithWarnings\",\r\n      \"Failed\", 3, \"Failed\",\r\n      \"Cancelled\", 4, \"Cancelled\"];\r\nlet JobStatusTable = JobStatusEnum\r\n| join kind= leftouter (LatestJobTable | summarize dcount(JobUniqueId, 4) by JobStatus) \r\non JobStatus == JobStatus\r\n| project CustomJobStatus, JobStatus, JobCount = (iff(isempty(dcount_JobUniqueId), 0, dcount_JobUniqueId)), statusOrder\r\n| project-away JobStatus\r\n| order by statusOrder asc\r\n| extend  Key = pack_array(CustomJobStatus), Value = pack_array( JobCount), Row = pack_array(statusOrder)\r\n| project Key, Value, Row\r\n| mvexpand  Key, Value, Row;\r\nunion  JobStatusTable, JobSuccessPercent \r\n| order by toint(Row) asc",
        "size": 3,
        "noDataMessage": "No records found for the selected time range and scope",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Key",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "subtitleContent": {
            "columnMatch": "SubTitle",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              }
            }
          },
          "showBorder": true,
          "sortCriteriaField": "Key",
          "sortOrderField": 2
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "name": "JobDistribution-Tiles",
      "styleSettings": {
        "margin": "-10px 0% 0% -15px"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "_____________________________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "name": "JobDistribution-DividingLine2"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used ******************** Using ExtRange For artifacts ******************************\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet ExtRangeStart = RangeStart - 2d;\r\nlet ExtRangeEnd = RangeEnd + 2d;\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet JobOperationParam = todynamic(strcat( \"[\", @\"{JobOperation}\", \"]\")); \r\nlet JobStatusParam = todynamic(strcat( \"[\", @\"{JobStatus}\", \"]\"));\r\nlet JobFailureCodeParam = todynamic(strcat( \"[\", @\"{JobFailureCode}\", \"]\"));\r\n//search\r\nlet Item_search =  @\"{ContainerNameWithBackupItemName}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");  \r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nTotalBackupItemDimensionTable\r\n| join  (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in (JobOperationParam) or '*' in (JobOperationParam)\r\n| where JobStatus in (JobStatusParam) or '*' in (JobStatusParam)\r\n| where JobFailureCode in (JobFailureCodeParam) or '*' in (JobFailureCodeParam)\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId = BackupItemUniqueId1, ResourceId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n};\r\nlet LatestJobTable =   \r\nLatestJobTableBasedOnBackupItem()\r\n// Only When JobCount is >= 1\r\n| where JobUniqueId != \"\"; \r\nLatestJobTable\r\n| summarize arg_max(TimeGenerated, JobStatus) by JobUniqueId\r\n| summarize count(JobStatus) by  JobStatus, bin(TimeGenerated, 1d)\r\n| project TimeGenerated, count_JobStatus, JobStatus = ( iff(JobStatus == \"Completed\", \"Succeeded\", iff(JobStatus == \"CompletedWithWarnings\", \"SucceededWithWarnings\", JobStatus)))\r\n| sort by count_JobStatus",
        "size": 0,
        "title": "Jobs by Status over Time",
        "noDataMessage": "No records found for the selected time range and scope",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "barchart",
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "Failed",
              "color": "red"
            },
            {
              "seriesName": "SucceededWithWarnings",
              "color": "yellow"
            },
            {
              "seriesName": "Succeeded",
              "color": "green"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "customWidth": "33",
      "showPin": true,
      "name": "JobDistribution-JobByStatusGraph"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used ******************** Using ExtRange For artifacts ******************************\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet ExtRangeStart = RangeStart - 2d;\r\nlet ExtRangeEnd = RangeEnd + 2d;\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet JobOperationParam = todynamic(strcat( \"[\", @\"{JobOperation}\", \"]\")); \r\nlet JobStatusParam = todynamic(strcat( \"[\", @\"{JobStatus}\", \"]\"));\r\nlet JobFailureCodeParam = todynamic(strcat( \"[\", @\"{JobFailureCode}\", \"]\"));\r\n//search\r\nlet Item_search =  @\"{ContainerNameWithBackupItemName}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");  \r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nTotalBackupItemDimensionTable\r\n| join  (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in (JobOperationParam) or '*' in (JobOperationParam)\r\n| where JobStatus in (JobStatusParam) or '*' in (JobStatusParam)\r\n| where JobFailureCode in (JobFailureCodeParam) or '*' in (JobFailureCodeParam)\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId = BackupItemUniqueId1, ResourceId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n};\r\nlet LatestJobTable =   \r\nLatestJobTableBasedOnBackupItem()\r\n// Only When JobCount is >= 1\r\n| where JobUniqueId != \"\"; \r\nLatestJobTable\r\n| summarize JobStatus = any(JobStatus), JobOperation = any(JobOperation) by JobUniqueId\r\n| summarize count(JobStatus) by JobOperation, JobStatus\r\n| sort by count_JobStatus",
        "size": 0,
        "title": "Jobs by Job Operation",
        "noDataMessage": "No records found for the selected time range and scope",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "categoricalbar",
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "JobOperation",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "JobOperation",
            "sortOrder": 1
          }
        ],
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "JobStatus",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "count_JobStatus",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "graphSettings": {
          "type": 0,
          "topContent": {
            "columnMatch": "JobStatus",
            "formatter": 1
          },
          "centerContent": {
            "columnMatch": "count_JobStatus",
            "formatter": 1,
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "Backup",
              "color": "grayBlue"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "customWidth": "33",
      "showPin": true,
      "name": "JobDistribution-JobsByOperationGraph"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used ******************** Using ExtRange For artifacts ******************************\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet ExtRangeStart = RangeStart - 2d;\r\nlet ExtRangeEnd = RangeEnd + 2d;\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet JobOperationParam = todynamic(strcat( \"[\", @\"{JobOperation}\", \"]\")); \r\nlet JobStatusParam = todynamic(strcat( \"[\", @\"{JobStatus}\", \"]\"));\r\nlet JobFailureCodeParam = todynamic(strcat( \"[\", @\"{JobFailureCode}\", \"]\"));\r\n//search\r\nlet Item_search =  @\"{ContainerNameWithBackupItemName}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");  \r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nTotalBackupItemDimensionTable\r\n| join  (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in (JobOperationParam) or '*' in (JobOperationParam)\r\n| where JobStatus in (JobStatusParam) or '*' in (JobStatusParam)\r\n| where JobFailureCode in (JobFailureCodeParam) or '*' in (JobFailureCodeParam)\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId = BackupItemUniqueId1, ResourceId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n};\r\nlet LatestJobTable =   \r\nLatestJobTableBasedOnBackupItem()\r\n// Only When JobCount is >= 1\r\n| where JobUniqueId != \"\"; \r\nLatestJobTable\r\n| where JobStatus == \"Failed\"\r\n| summarize JobFailureCode = any(JobFailureCode), JobOperation = any(JobOperation) by JobUniqueId\r\n| summarize count(JobOperation) by JobFailureCode\r\n| sort by count_JobOperation",
        "size": 0,
        "title": "Failed Jobs by Failure Code",
        "noDataMessage": "No records found for the selected time range and scope",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "piechart",
        "chartSettings": {}
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "customWidth": "33",
      "showPin": true,
      "name": "JobDistribution-FailureCodeGraph"
    },
    {
      "type": 1,
      "content": {
        "json": "____________________________"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "JobDistribution-DividingLine3"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">Distribution of Jobs in Period by Backup Item </span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "name": "JobDistribution-Grid2Title",
      "styleSettings": {
        "margin": "0% 0% 10px 0%"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "5dc2a074-b510-44f2-9530-cfcbd159b59c",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricSortBy",
            "label": "Sort By",
            "type": 2,
            "description": "Use to sort by a certain column",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{ \"value\": \"FailureCount\", \"label\": \"# Jobs Failed\" },\r\n{ \"value\": \"AvgDataTransferred\", \"label\": \"Avg data transferred (MB)\" }, \r\n{ \"value\": \"AvgJobDuration\", \"label\": \"Avg Job Duration (hrs)\" },\r\n{ \"value\": \"SuccessPercent\", \"label\": \"Job Success %\", \"selected\": \"true\" }]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "df3cc03c-53f7-4523-a29b-e50bf1b6d922",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricOrder",
            "label": "Order",
            "type": 2,
            "description": "Use to specify the sort order: Ascending/Descending",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"Ascending\", \"selected\":true},\r\n    { \"value\":\"Descending\"}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "2033073e-5e18-4e0f-a543-a03b98874d8d",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricRowsPerGrid",
            "label": "Rows per Page",
            "type": 2,
            "description": "Number of rows to display in grid view",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "356e4bfd-7e3d-4e48-89c0-b03efb72b9dc",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricPageNumber",
            "label": "Page",
            "type": 2,
            "description": "Select Page Number",
            "isRequired": true,
            "query": "// Time variable used  ******************** Using ExtRange For artifacts ******************************\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet ExtRangeStart = RangeStart - 2d;\r\nlet ExtRangeEnd = RangeEnd + 2d;\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet JobOperationParam = todynamic(strcat( \"[\", @\"{JobOperation}\", \"]\")); \r\nlet JobStatusParam = todynamic(strcat( \"[\", @\"{JobStatus}\", \"]\"));\r\nlet JobFailureCodeParam = todynamic(strcat( \"[\", @\"{JobFailureCode}\", \"]\"));\r\n//search\r\nlet Item_search =  @\"{ContainerNameWithBackupItemName}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");  \r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nTotalBackupItemDimensionTable\r\n| join  (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in (JobOperationParam) or '*' in (JobOperationParam)\r\n| where JobStatus in (JobStatusParam) or '*' in (JobStatusParam)\r\n| where JobFailureCode in (JobFailureCodeParam) or '*' in (JobFailureCodeParam)\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId = BackupItemUniqueId1, ResourceId\r\n};\r\nlet LatestJobTable = ()\r\n{ \r\n// Showing only BackupItem based Jobs\r\nLatestJobTableBasedOnBackupItem()\r\n| where JobUniqueId != \"\" or BackupItemUniqueId != \"\"\r\n}; \r\nlet JobMetric = ()\r\n{\r\n// Calculate percentage\r\nLatestJobTable\r\n| extend failed=iff(JobStatus == \"Failed\" , 1 , 0)\r\n| extend record = iff(JobUniqueId != \"\", 1, 0)  // to be used for total row count\r\n| summarize FailureCount =sum(failed), TotalCount=sum(record), AvgDataTransferred =avg(DataTransferredInMB), AvgJobDuration = avg(JobDurationInSecs)/3600, \r\nBackupItemFriendlyName = any(BackupItemFriendlyName), BackupItemName = any(BackupItemName), ProtectedContainerFriendlyName = any(ProtectedContainerFriendlyName), ProtectedContainerName = any(ProtectedContainerName), BackupManagementType = any(BackupManagementType), BackupItemType = any(BackupItemType), ResourceId = any(ResourceId) by BackupItemUniqueId\r\n| extend SuccessPercent = ((TotalCount - FailureCount) *100)/todouble(TotalCount)\r\n};\r\nJobMetric\r\n| summarize c=count()\r\n| project num = (c-1)/{JobMetricRowsPerGrid} + 1\r\n| project nums = range(1,num,1), num\r\n| mvexpand nums\r\n| project nums = tostring(nums), num = strcat(tostring(nums),\" of \",tostring(num))",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "customWidth": "90",
      "name": "parameters - 7",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%",
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used  ******************** Using ExtRange For artifacts ******************************\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet ExtRangeStart = RangeStart - 2d;\r\nlet ExtRangeEnd = RangeEnd + 2d;\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet JobOperationParam = todynamic(strcat( \"[\", @\"{JobOperation}\", \"]\")); \r\nlet JobStatusParam = todynamic(strcat( \"[\", @\"{JobStatus}\", \"]\"));\r\nlet JobFailureCodeParam = todynamic(strcat( \"[\", @\"{JobFailureCode}\", \"]\"));\r\n//search\r\nlet Item_search =  @\"{ContainerNameWithBackupItemName}\";\r\nlet ItemArray = split(Item_search, \";\");\r\nlet ItemArray_length = array_length(ItemArray);\r\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\r\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \"\");  \r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nTotalBackupItemDimensionTable\r\n| join  (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| where isempty(Container_search) or Container_search == \"*\" or ProtectedContainerFriendlyName contains (Container_search)\r\n| where isempty(BI_search) or BI_search == \"*\" or  BackupItemFriendlyName contains (BI_search)\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in (JobOperationParam) or '*' in (JobOperationParam)\r\n| where JobStatus in (JobStatusParam) or '*' in (JobStatusParam)\r\n| where JobFailureCode in (JobFailureCodeParam) or '*' in (JobFailureCodeParam)\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId = BackupItemUniqueId1, ResourceId\r\n};\r\nlet LatestJobTable = ()\r\n{ \r\n// Showing only BackupItem based Jobs\r\nLatestJobTableBasedOnBackupItem()\r\n| where JobUniqueId != \"\" or BackupItemUniqueId != \"\"\r\n}; \r\nlet JobMetric = ()\r\n{\r\n// Calculate percentage\r\nLatestJobTable\r\n| extend failed=iff(JobStatus == \"Failed\" , 1 , 0)\r\n| extend record = iff(JobUniqueId != \"\", 1, 0)  // to be used for total row count\r\n| summarize FailureCount =sum(failed), TotalCount=sum(record), AvgDataTransferred =avg(DataTransferredInMB), AvgJobDuration = avg(JobDurationInSecs)/3600, \r\nBackupItemFriendlyName = any(BackupItemFriendlyName), BackupItemName = any(BackupItemName), ProtectedContainerFriendlyName = any(ProtectedContainerFriendlyName), ProtectedContainerName = any(ProtectedContainerName), BackupManagementType = any(BackupManagementType), BackupItemType = any(BackupItemType), ResourceId = any(ResourceId) by BackupItemUniqueId\r\n| extend SuccessPercent = ((TotalCount - FailureCount) *100)/todouble(TotalCount)\r\n};\r\nJobMetric\r\n| extend TempColumn = column_ifexists(tostring('{JobMetricSortBy}'), \"SuccessPercent\")\r\n| extend ColumnToBeSorted = iff(tostring('{JobMetricOrder}') == \"Ascending\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\r\n| sort by ColumnToBeSorted asc nulls last, BackupItemUniqueId asc\r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/{JobMetricRowsPerGrid} + 1))\r\n| where page_num has ('{JobMetricPageNumber}') or '*' in ('{JobMetricPageNumber}')\r\n| extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\r\n| extend containerNameString = iff(array_length(split(ProtectedContainerName,\";\")) == 3, ProtectedContainerName, \"\")\r\n| parse containerNameString with entityType:string \";\" rgName:string \";\" entityName:string\r\n| extend entityTypeForAzureStorageUrl = iff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), \"\")\r\n| extend entityTypeForIaaSVMUrl = iff((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend entityTypeForAzureWorkloadUrl = iff(((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\") or (BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\")), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend AzureResource = iff(BackupManagementType in (\"DPM\", \"AzureBackupServer\", \"MAB\"), \"\" , iff(containerNameString != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId))\r\n| extend BackupItemLink =  iff ((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/IaasVMContainer;\", ProtectedContainerName, \"/protectedItems/VM;\", ProtectedContainerName),\r\niff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/StorageContainer;\", ProtectedContainerName, \"/protectedItems/AzureFileShare;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SQLDataBase;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SAPHanaDatabase;\", BackupItemName), \"\"))))\r\n|  extend container_array = split(ProtectedContainerName,\";\")\r\n|  extend container_arraylen = array_length(container_array)\r\n| project BackupItemName = BackupItemFriendlyName, ContainerName = ProtectedContainerFriendlyName, ContainerResourceGroup = iff(container_arraylen == 3, container_array[(container_arraylen-2)], \"(none)\"), FailureCount, SuccessPercent = iff( (isnan(SuccessPercent) or isinf(SuccessPercent) or isempty(SuccessPercent)), \"-\", strcat(tostring(round(SuccessPercent,2)), \" %\")),  AvgDataTransferred = iff( (isnan(AvgDataTransferred) or isinf(AvgDataTransferred) or isempty(AvgDataTransferred)), \"-\", tostring(round(AvgDataTransferred,2))) ,AvgJobDuration = iff( (isnan(AvgJobDuration) or isinf(AvgJobDuration) or isempty(AvgJobDuration)), \"-\", tostring(round(AvgJobDuration,2))), AzureResource, BackupItemLink, BackupItemUniqueId, TotalCount, TempColumn, ColumnToBeSorted",
        "size": 3,
        "noDataMessage": "No records found for the selected time range and scope",
        "exportFieldName": "BackupItemUniqueId",
        "exportParameterName": "SelectedContainerNameWithBackupItemName",
        "exportDefaultValue": "*",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "BackupItemName",
              "formatter": 16,
              "formatOptions": {
                "linkColumn": "BackupItemLink",
                "linkTarget": "Resource",
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Name of the Backup Item"
              }
            },
            {
              "columnMatch": "ContainerName",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Name of the Protected Container associated with the Backup Item"
              }
            },
            {
              "columnMatch": "ContainerResourceGroup",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Resource Group of the Backup Item"
              }
            },
            {
              "columnMatch": "FailureCount",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Number of Jobs (that were triggered in the selected time range) on the given Backup Item that failed"
              }
            },
            {
              "columnMatch": "SuccessPercent",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "% of Jobs (that were triggered in the selected time range) on the Backup Item that were successful"
              }
            },
            {
              "columnMatch": "AvgDataTransferred",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "Avg data transferred by Jobs (that were triggered in the selected time range) on the Backup Item"
              }
            },
            {
              "columnMatch": "AvgJobDuration",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "Avg duration of Jobs (that were triggered in the selected time range) on the Backup Item"
              }
            },
            {
              "columnMatch": "AzureResource",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Azure Resource associated with the Backup Item. For Azure VM Backup, SQL in Azure VM backup and SAP database in Azure VM backup, the Azure Resource is the Azure VM. For Azure Files Share backup, the Azure Resource is the Azure Storage account. For on-premises Backup Items, this field is blank."
              }
            },
            {
              "columnMatch": "BackupItemLink",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "BackupItemUniqueId",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "TotalCount",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "TempColumn",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ColumnToBeSorted",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "BackupItemName",
              "label": "Backup Item"
            },
            {
              "columnId": "ContainerName",
              "label": "Container"
            },
            {
              "columnId": "ContainerResourceGroup",
              "label": "Resource Group"
            },
            {
              "columnId": "FailureCount",
              "label": "# Jobs Failed"
            },
            {
              "columnId": "SuccessPercent",
              "label": "Job Success %"
            },
            {
              "columnId": "AvgDataTransferred",
              "label": "Avg Data Transferred (GB)"
            },
            {
              "columnId": "AvgJobDuration",
              "label": "Avg Job Duration (hrs)"
            },
            {
              "columnId": "AzureResource",
              "label": "Azure Resource"
            },
            {
              "columnId": "BackupItemLink"
            },
            {
              "columnId": "BackupItemUniqueId"
            },
            {
              "columnId": "TotalCount"
            },
            {
              "columnId": "TempColumn"
            },
            {
              "columnId": "ColumnToBeSorted"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "showPin": true,
      "name": "JobDistribution-Grid1",
      "styleSettings": {
        "padding": "0% 0% 0% 0%",
        "showBorder": true
      }
    },
    {
      "type": 1,
      "content": {
        "json": "<span style=\"font-size:12px;font-style:italic\"> Click on any row above to see details of all jobs for that backup item in the seletced time range. </span>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "name": "text - 66"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"text-align:left\"><span style=\"font-size:14px;font-weight:600;\">List of Jobs in Period</span> </div>"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "SelectedContainerNameWithBackupItemName",
          "comparison": "isNotEqualTo",
          "value": "*"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "name": "text - 17",
      "styleSettings": {
        "margin": "0% 0% 10px 0%"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "5dc2a074-b510-44f2-9530-cfcbd159b59c",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricSortBy2",
            "label": "Sort By",
            "type": 2,
            "description": "Use to sort by a certain column",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{ \"value\": \"JobDurationInSecs\", \"label\": \"Job Duration (hrs)\" },\r\n{ \"value\": \"DataTransferredInMB\", \"label\": \"Data Transferred (MB)\", \"selected\": \"true\" }]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "df3cc03c-53f7-4523-a29b-e50bf1b6d922",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricOrder2",
            "label": "Order",
            "type": 2,
            "description": "Use to specify the sort order: Ascending/Descending",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"Ascending\"},\r\n    { \"value\":\"Descending\", \"selected\":true}\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "90453a1f-7fd0-45d4-a2ef-cd36b4a834e0",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricRowsPerGrid2",
            "label": "Rows per Page",
            "type": 2,
            "description": "Number of rows to display in grid view",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":10, \"label\":\"10\", \"selected\":true  },\r\n    { \"value\":25, \"label\":\"25\" },\r\n    { \"value\":50, \"label\":\"50\" },\r\n    { \"value\":100, \"label\":\"100\" },\r\n    { \"value\":250, \"label\":\"250\" },\r\n    { \"value\":500, \"label\":\"500\" },\r\n    { \"value\":1000, \"label\":\"1000\" }\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "356e4bfd-7e3d-4e48-89c0-b03efb72b9dc",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricPageNumber2",
            "label": "Page",
            "type": 2,
            "description": "Select Page Number",
            "isRequired": true,
            "query": "// Time variable used  ******************** Using ExtRange For artifacts ******************************\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet ExtRangeStart = RangeStart - 2d;\r\nlet ExtRangeEnd = RangeEnd + 2d;\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Client\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\",\r\n\t  \"AzureBackupServer/SQLDB\", \"Azure Backup Server/SQL Database\",\r\n\t  \"AzureBackupServer/VMwareVM\", \"Azure Backup Server/VMWare VM\",\r\n\t  \"AzureBackupServer/HyperVVM\", \"Azure Backup Server/Hyper-V VM\",\r\n\t  \"AzureBackupServer/FileFolder\", \"Azure Backup Server/Files and Folder\",\r\n\t  \"AzureBackupServer/Client\", \"Azure Backup Server/Client\",\r\n\t  \"AzureBackupServer/SystemState\", \"Azure Backup Server/System State\",\r\n\t  \"AzureBackupServer/Sharepoint\", \"Azure Backup Server/Sharepoint Database\",\r\n\t  \"AzureBackupServer/Exchange\", \"Azure Backup Server/Exchange Mailbox Database\"];\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet JobOperationParam = todynamic(strcat( \"[\", @\"{JobOperation}\", \"]\")); \r\nlet JobStatusParam = todynamic(strcat( \"[\", @\"{JobStatus}\", \"]\"));\r\nlet JobFailureCodeParam = todynamic(strcat( \"[\", @\"{JobFailureCode}\", \"]\"));\r\nlet SelectedContainerNameWithBackupItemNameParam =  @\"{SelectedContainerNameWithBackupItemName}\";\t  \r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nTotalBackupItemDimensionTable\r\n| join  (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, ResourceId\r\n| where BackupItemUniqueId == (SelectedContainerNameWithBackupItemNameParam) or '*' in (SelectedContainerNameWithBackupItemNameParam)\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId,  JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in (JobOperationParam) or '*' in (JobOperationParam)\r\n| where JobStatus in (JobStatusParam) or '*' in (JobStatusParam)\r\n| where JobFailureCode in (JobFailureCodeParam) or '*' in (JobFailureCodeParam)\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId = BackupItemUniqueId1,  JobStartDateTime, AdHocOrScheduledJob, ResourceId\r\n};\r\nlet LatestJobTable = ()\r\n{LatestJobTableBasedOnBackupItem()\r\n// Show only BackupItems which has Jobs\r\n| where JobUniqueId != \"\" \r\n}; \r\nLatestJobTable\r\n| summarize c=count()\r\n| project num = (c-1)/{JobMetricRowsPerGrid2} + 1\r\n| project nums = range(1,num,1), num\r\n| mvexpand nums\r\n| project nums = tostring(nums), num = strcat(tostring(nums),\" of \",tostring(num))",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "SelectedContainerNameWithBackupItemName",
          "comparison": "isNotEqualTo",
          "value": "*"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "customWidth": "90",
      "name": "JobDistribution-Grid2ParameterBlock",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%",
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used  ******************** Using ExtRange For artifacts ******************************\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet ExtRangeStart = RangeStart - 2d;\r\nlet ExtRangeEnd = RangeEnd + 2d;\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Client\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\",\r\n\t  \"AzureBackupServer/SQLDB\", \"Azure Backup Server/SQL Database\",\r\n\t  \"AzureBackupServer/VMwareVM\", \"Azure Backup Server/VMWare VM\",\r\n\t  \"AzureBackupServer/HyperVVM\", \"Azure Backup Server/Hyper-V VM\",\r\n\t  \"AzureBackupServer/FileFolder\", \"Azure Backup Server/Files and Folder\",\r\n\t  \"AzureBackupServer/Client\", \"Azure Backup Server/Client\",\r\n\t  \"AzureBackupServer/SystemState\", \"Azure Backup Server/System State\",\r\n\t  \"AzureBackupServer/Sharepoint\", \"Azure Backup Server/Sharepoint Database\",\r\n\t  \"AzureBackupServer/Exchange\", \"Azure Backup Server/Exchange Mailbox Database\"];\r\n// Params (excluding sorting params)\r\nlet BackupManagementTypeParam =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z*]+\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet BackupItemTypeParam = todynamic(strcat( \"[\", replace(\"[a-zA-Z*]+/\", \"\", @\"{CustomBackupManagementTypeParam}\"), \"]\"));\r\nlet VaultSubscriptionParam = todynamic(strcat( \"[\", replace(\"/subscriptions/\", \"\", @\"{VaultSubscription:value}\"), \"]\"));\r\nlet LocationParam = todynamic(strcat( \"[\", @\"{Location}\", \"]\")); \r\nlet VaultParam = todynamic(strcat( \"[\", @\"{Vault}\", \"]\"));\r\nlet JobOperationParam = todynamic(strcat( \"[\", @\"{JobOperation}\", \"]\")); \r\nlet JobStatusParam = todynamic(strcat( \"[\", @\"{JobStatus}\", \"]\"));\r\nlet JobFailureCodeParam = todynamic(strcat( \"[\", @\"{JobFailureCode}\", \"]\"));\r\nlet SelectedContainerNameWithBackupItemNameParam =  @\"{SelectedContainerNameWithBackupItemName}\";\t  \r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId, StorageReplicationType = StorageReplicationType_s, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in (VaultSubscriptionParam) or '*' in (VaultSubscriptionParam)\r\n| where AzureDataCenter in (LocationParam) or '*' in (LocationParam)\r\n| where VaultName in  (VaultParam) or '*' in (VaultParam)\r\n| project StorageReplicationType, ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\r\n{\r\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName\r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, ProtectedContainerFriendlyName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \r\nTimeGenerated\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join  (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| where BackupItemType in (BackupItemTypeParam) or '*' in (BackupItemTypeParam)\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupItemProtectionState, ResourceId};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nTotalBackupItemDimensionTable\r\n| join  (CombinedTable | union isfuzzy = true   \r\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\r\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, BackupManagementType, BackupItemType, ResourceId\r\n| where BackupItemUniqueId == (SelectedContainerNameWithBackupItemNameParam) or '*' in (SelectedContainerNameWithBackupItemNameParam)\r\n};\r\nlet LatestBackupItemInfoTable = (){\r\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId,  JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in (JobOperationParam) or '*' in (JobOperationParam)\r\n| where JobStatus in (JobStatusParam) or '*' in (JobStatusParam)\r\n| where JobFailureCode in (JobFailureCodeParam) or '*' in (JobFailureCodeParam)\r\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BackupItemFriendlyName, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementType, BackupItemType, DataTransferredInMB = tostring(round(DataTransferredInMB,2)), JobDurationInSecs =tostring(round((JobDurationInSecs/3600),2)), BackupItemUniqueId = BackupItemUniqueId1,  JobStartDateTime, AdHocOrScheduledJob, ResourceId\r\n};\r\nlet LatestJobTable = ()\r\n{LatestJobTableBasedOnBackupItem()\r\n// Show only BackupItems which has Jobs\r\n| where JobUniqueId != \"\" \r\n}; \r\n//JobUniqueId*, BackupItemName*, TimeGenerated*, Failure Code*, Data Transferred*, Duration*, Adhoc, Operation* \r\nlet OutputTable = () {LatestJobTable\r\n| extend TempColumn = column_ifexists(tostring('{JobMetricSortBy2}'), \"DataTransferredInMB\")\r\n| extend ColumnToBeSorted = iff(tostring('{JobMetricOrder2}') == \"Ascending\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\r\n| sort by ColumnToBeSorted asc nulls last, JobUniqueId asc\r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/{JobMetricRowsPerGrid2} + 1))\r\n| where page_num has ('{JobMetricPageNumber2}') or '*' in ('{JobMetricPageNumber2}')\r\n| extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\r\n| extend containerNameString = iff(array_length(split(ProtectedContainerName,\";\")) == 3, ProtectedContainerName, \"\")\r\n| parse containerNameString with entityType:string \";\" rgName:string \";\" entityName:string\r\n| extend entityTypeForAzureStorageUrl = iff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), \"\")\r\n| extend entityTypeForIaaSVMUrl = iff((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend entityTypeForAzureWorkloadUrl = iff(((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\") or (BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\")), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")\r\n| extend AzureResource = iff(BackupManagementType in (\"DPM\", \"AzureBackupServer\", \"MAB\"), \"\" , iff(containerNameString != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId))\r\n| extend BackupItemLink =  iff ((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/IaasVMContainer;\", ProtectedContainerName, \"/protectedItems/VM;\", ProtectedContainerName),\r\niff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/StorageContainer;\", ProtectedContainerName, \"/protectedItems/AzureFileShare;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SQLDataBase;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SAPHanaDatabase;\", BackupItemName), \"\"))))\r\n|  extend container_array = split(ProtectedContainerName,\";\")\r\n|  extend container_arraylen = array_length(container_array)\r\n| project ExtractedBackupItemName = BackupItemFriendlyName, ExtractedContainerName = ProtectedContainerFriendlyName, ContainerResourceGroup = iff(container_arraylen == 3, container_array[(container_arraylen-2)], \"(none)\"), BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), JobOperation, JobStatus = ( iff(JobStatus == \"Completed\", \"Succeeded\", iff(JobStatus == \"CompletedWithWarnings\", \"SucceededWithWarnings\", JobStatus))), JobUniqueId, JobStartDateTime, JobDuration = JobDurationInSecs, JobFailureCode, DataTransferredInMB,  TempColumn, ColumnToBeSorted, AzureResource, BackupItemLink};\r\nlet CustomOutputTable = () {BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\r\n| project ExtractedBackupItemName, ExtractedContainerName, ContainerResourceGroup, BMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1 ,CustomBMSTypeWithBackupItemType ), JobOperation, JobStatus, JobUniqueId, JobStartDateTime, JobDuration, JobFailureCode, DataTransferredInMB,  TempColumn, ColumnToBeSorted, AzureResource, BackupItemLink\r\n| parse BMSTypeWithBackupItemType with ExtractedBMSType:string \"/\" ExtractedBackupItemType:string\r\n| project BackupItemName=ExtractedBackupItemName, ContainerName=ExtractedContainerName, ContainerResourceGroup,   JobOperation, JobStatus, JobUniqueId, JobStartDateTime, JobDuration, JobFailureCode, DataTransferredInMB,  TempColumn, ColumnToBeSorted, AzureResource, BackupItemLink, ExtractedBMSType, ExtractedBackupItemType\r\n};\r\nCustomOutputTable",
        "size": 3,
        "noDataMessage": "No records found for the selected time range and scope",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "BackupItemName",
              "formatter": 16,
              "formatOptions": {
                "linkColumn": "BackupItemLink",
                "linkTarget": "Resource",
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Name of the Backup Item"
              }
            },
            {
              "columnMatch": "ContainerName",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Name of the Protected Container associated with the Backup Item"
              }
            },
            {
              "columnMatch": "ContainerResourceGroup",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Resource Group of the Backup Item"
              }
            },
            {
              "columnMatch": "JobOperation",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Job Operation"
              }
            },
            {
              "columnMatch": "JobStatus",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Job Status"
              }
            },
            {
              "columnMatch": "JobUniqueId",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "JobStartDateTime",
              "formatter": 6,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": false
                }
              },
              "dateFormat": {
                "showUtcTime": true,
                "formatName": "shortDateTimePattern"
              },
              "tooltipFormat": {
                "tooltip": "Start date and time of the Job"
              }
            },
            {
              "columnMatch": "JobDuration",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "useGrouping": false,
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "Job Duration"
              }
            },
            {
              "columnMatch": "JobFailureCode",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Job Failure Code"
              }
            },
            {
              "columnMatch": "DataTransferredInMB",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "minimumFractionDigits": 2,
                  "maximumFractionDigits": 2
                }
              },
              "tooltipFormat": {
                "tooltip": "Data Transferred by the Job"
              }
            },
            {
              "columnMatch": "TempColumn",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ColumnToBeSorted",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "AzureResource",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Azure Resource associated with the Backup Item. For Azure VM Backup, SQL in Azure VM backup and SAP database in Azure VM backup, the Azure Resource is the Azure VM. For Azure Files Share backup, the Azure Resource is the Azure Storage account. For on-premises Backup Items, this field is blank."
              }
            },
            {
              "columnMatch": "BackupItemLink",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ExtractedBMSType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Backup Management Type"
              }
            },
            {
              "columnMatch": "ExtractedBackupItemType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "tooltipFormat": {
                "tooltip": "Backup Item Type"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "BackupItemName",
              "label": "Backup Item"
            },
            {
              "columnId": "ContainerName",
              "label": "Container"
            },
            {
              "columnId": "ContainerResourceGroup",
              "label": "Resource Group"
            },
            {
              "columnId": "JobOperation",
              "label": "Job Operation"
            },
            {
              "columnId": "JobStatus",
              "label": "Job Status"
            },
            {
              "columnId": "JobUniqueId"
            },
            {
              "columnId": "JobStartDateTime",
              "label": "Job Start Date Time"
            },
            {
              "columnId": "JobDuration",
              "label": "Job Duration (hrs)"
            },
            {
              "columnId": "JobFailureCode",
              "label": "Job Failure Code"
            },
            {
              "columnId": "DataTransferredInMB",
              "label": "Data Transferred (MB)"
            },
            {
              "columnId": "TempColumn"
            },
            {
              "columnId": "ColumnToBeSorted"
            },
            {
              "columnId": "AzureResource"
            },
            {
              "columnId": "BackupItemLink"
            },
            {
              "columnId": "ExtractedBMSType",
              "label": "Backup Management Type"
            },
            {
              "columnId": "ExtractedBackupItemType",
              "label": "Backup Item Type"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "TabName",
          "comparison": "isEqualTo",
          "value": "JobDistribution"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "SelectedContainerNameWithBackupItemName",
          "comparison": "isNotEqualTo",
          "value": "*"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBackupManagementTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "JobDistribution"
      },
      "showPin": true,
      "name": "JobDistribution-Grid2",
      "styleSettings": {
        "margin": "-30px 0% 0% 0%",
        "padding": "0% 0% -20px 0%",
        "showBorder": true
      }
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}