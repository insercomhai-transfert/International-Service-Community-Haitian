{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Subscriptions}"
        ],
        "parameters": [
          {
            "id": "d1f42f81-eb8f-4653-a0ff-38564d7487b4",
            "version": "KqlParameterItem/1.0",
            "name": "Subscriptions",
            "type": 6,
            "description": "Subscriptions to filter the list of workspaces",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": false,
              "selectAllValue": ""
            }
          },
          {
            "id": "2373a24f-ad32-4909-a7f6-59b373dcde6c",
            "version": "KqlParameterItem/1.0",
            "name": "Workspaces",
            "type": 5,
            "description": "LA Workspaces configured in vault diagnostic settings",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type =~ 'microsoft.operationalinsights/workspaces' | project id",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8c4ae44c-fa9a-4498-aedc-736a56e64b43",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "label": "Time Range",
            "type": 4,
            "description": "Time Range",
            "value": {
              "durationMs": 604800000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "bb7c8d78-cf0c-4b47-af95-1c07ac0f6829",
            "version": "KqlParameterItem/1.0",
            "name": "ErrorHandle",
            "label": "Error Handle",
            "type": 1,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Files & Folder\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\"];\r\nlet CustomBMSTypeParam = \"'Azure Backup Agent','Azure Storage (Azure Files)','Azure Virtual Machine','DPM','SAP ASE in Azure VM','SAP HANA in Azure VM','SQL in Azure VM'\";\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project  BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\") \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType \r\n};\r\nlet OutputTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| distinct BackupManagementType, BackupItemType\r\n| distinct strcat(BackupManagementType, \"/\", BackupItemType)\r\n| project BMSTypeWithBackupItemType = Column1};\r\nlet CustomOutputTable = () {BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\r\n| project BMSTypeWithBackupItemType1, CustomBMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1,CustomBMSTypeWithBackupItemType )};\r\nCustomOutputTable\r\n// convert to a list of internal names\r\n| project  s2 =  strcat(\"'\", CustomBMSTypeWithBackupItemType, \"'\"), s1 = CustomBMSTypeParam, s3 =  strcat(\"'\", BMSTypeWithBackupItemType1, \"'\") \r\n| mv-apply s2 = split(s2, \",\") to typeof(string) on (\r\n\twhere indexof(s1, substring(s2, 1, indexof(s2, \"/\") - 1)) >= 1)\r\n| summarize result = array_strcat(make_list(s3), \",\")\r\n| project result ",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "ab02c6b3-a9c9-4a3b-86fe-0694974335b0",
            "version": "KqlParameterItem/1.0",
            "name": "CustomBMSTypeParam",
            "label": "Backup Management Type",
            "type": 2,
            "description": "Backup Management Type",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "'Azure Backup Agent','Azure Storage (Azure Files)','Azure Virtual Machine','DPM','SAP ASE in Azure VM','SAP HANA in Azure VM','SQL in Azure VM'"
            },
            "jsonData": "[    \r\n\t\"Azure Backup Agent\",\r\n    \"Azure Storage (Azure Files)\",\r\n    \"Azure Virtual Machine\",\r\n    \"DPM\",\r\n    \"SAP ASE in Azure VM\",\r\n    \"SAP HANA in Azure VM\",\r\n    \"SQL in Azure VM\"\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "f61266ea-f32a-4b60-8eeb-f3b428ac4951",
            "version": "KqlParameterItem/1.0",
            "name": "BMSTypeWithBackupItemTypeParam",
            "type": 1,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Files & Folder\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\"];\r\n//let CustomBMSTypeParam = \"'SQL in Azure VM','Azure Virtual Machine','Azure Storage (Azure Files)','Azure Backup Agent','DPM'\";\r\nlet CustomBMSTypeParam = @\"{CustomBMSTypeParam}\";\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project  BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\") \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType \r\n};\r\nlet OutputTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| distinct BackupManagementType, BackupItemType\r\n| distinct strcat(BackupManagementType, \"/\", BackupItemType)\r\n| project BMSTypeWithBackupItemType = Column1};\r\nlet CustomOutputTable = () {BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\r\n| project BMSTypeWithBackupItemType1, CustomBMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1,CustomBMSTypeWithBackupItemType )};\r\nCustomOutputTable\r\n// convert to a list of internal names\r\n| project  s2 =  strcat(\"'\", CustomBMSTypeWithBackupItemType, \"'\"), s1 = CustomBMSTypeParam, s3 =  strcat(\"'\", BMSTypeWithBackupItemType1, \"'\") \r\n| mv-apply s2 = split(s2, \",\") to typeof(string) on (\r\n\twhere indexof(s1, substring(s2, 1, indexof(s2, \"/\") - 1)) >= 1)\r\n| summarize result = array_strcat(make_list(s3), \",\")\r\n| project result ",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.resources/subscriptions"
      },
      "name": "Overview-WorkspaceParameterBlock"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "678680e5-76b5-4db8-bbef-5f73942caf2e",
            "version": "KqlParameterItem/1.0",
            "name": "VaultSubscription",
            "label": "Subscription Name",
            "type": 6,
            "description": "Subscription(s) under which the vault(s) exist",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId \r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType,  ResourceId \r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n};\r\nCombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), SubscriptionId \r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct SubscriptionId",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2a83acc5-2123-476f-8a4c-da2fddf231a1",
            "version": "KqlParameterItem/1.0",
            "name": "Location",
            "label": "Vault Location",
            "type": 2,
            "description": "Location(s) in which the vault(s) were created",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used -  BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| distinct ResourceId, AzureDataCenter, VaultName\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| distinct ResourceId, AzureDataCenter, VaultName;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics() | project AzureDataCenter),\r\n(BackupItemUnderResourceSpecific() | project AzureDataCenter)\r\n| distinct AzureDataCenter};\r\nLatestBackupItemTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "fefd31fa-2774-43ca-8cc3-44d477c969f0",
            "version": "KqlParameterItem/1.0",
            "name": "Vault",
            "label": "Vault Name",
            "type": 2,
            "description": "Name(s) of the vault(s)",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used -  BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId, AzureDataCenter, VaultName\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId, AzureDataCenter, VaultName;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics() | project VaultName),\r\n(BackupItemUnderResourceSpecific() | project VaultName)\r\n| distinct VaultName};\r\nLatestBackupItemTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "CustomBMSTypeParam",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "BMSTypeWithBackupItemTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "60",
      "name": "Overview-ReportParameterBlock",
      "styleSettings": {
        "maxWidth": "100%"
      }
    }
  ,{
	"type": 9,
	"content": "{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Workspaces}\"],\"parameters\":[{\"id\":\"24608a3f-634b-4f4f-87cc-998a00636eeb\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ContainerNameWithBackupItemName\",\"label\":\"Search Item or Container\",\"type\":1,\"description\":\"Use to search for a Backup Item by name. <br/> To search for a specific item in a container, use the syntax [container name];[item name] <br/> To search for all items in a container, use the syntax [container name];\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"71c5a2f9-67e4-48d4-aec3-4c4116f04acd\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"JobOperation\",\"label\":\"Job Operation\",\"type\":2,\"description\":\"Use to filter by Job Operation\",\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"// Time variable used ******************** Using ExtRange For artifacts ******************************\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet ExtRangeStart = RangeStart + 36h;\\r\\nlet ExtRangeEnd = RangeEnd + 36h;\\r\\n//search\\r\\nlet Item_search =  @\\\"{ContainerNameWithBackupItemName}\\\";\\r\\nlet ItemArray = split(Item_search, \\\";\\\");\\r\\nlet ItemArray_length = array_length(ItemArray);\\r\\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\\r\\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \\\"\\\"); \\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| where VaultName in ({Vault}) or '*' in ({Vault})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupManagementServerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupManagementServer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\\r\\n| project OldBackupManagementServerUniqueId = columnifexists(\\\"BackupManagmentServerUniqueId_s\\\", \\\"\\\"), NewBackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),  BackupManagementServerName = columnifexists(\\\"BackupManagementServerName_s\\\", \\\"\\\"), AzureBackupAgentVersion = columnifexists(\\\"AzureBackupAgentVersion_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), ResourceId, TimeGenerated\\r\\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \\\"\\\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \\r\\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupManagementServerTable =CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupManagementServer\\\" and State != \\\"Deleted\\\"\\r\\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet JobUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet JobTable = AzureDiagnostics \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Job\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| project JobOperation = columnifexists(\\\"JobOperation_s\\\", \\\"\\\") , JobOperationSubType = columnifexists(\\\"JobOperationSubType_s\\\", \\\"\\\"), JobUniqueIdGuid = columnifexists(\\\"JobUniqueId_g\\\", \\\"\\\") , JobUniqueIdStr = columnifexists(\\\"JobUniqueId_s\\\", \\\"\\\"),\\r\\nProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\",\\\"\\\"), AdHocOrScheduledJob = columnifexists(\\\"AdHocOrScheduledJob_s\\\",\\\"\\\"), RecoveryJobDestination = columnifexists(\\\"RecoveryJobDestination_s\\\",\\\"\\\"),\\r\\nRecoveryJobRPDateTime = todatetime(columnifexists(\\\"RecoveryJobRPDateTime_s\\\",\\\"\\\")), RecoveryJobRPLocation = columnifexists(\\\"RecoveryJobRPLocation_s\\\",\\\"\\\"), RecoveryLocationType = columnifexists(\\\"RecoveryLocationType_s\\\",\\\"\\\"),\\r\\nBackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\",\\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\",\\\"\\\"), VaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\",\\\"\\\"),\\r\\nJobStatus = columnifexists(\\\"JobStatus_s\\\",\\\"\\\"), JobFailureCode = columnifexists(\\\"JobFailureCode_s\\\",\\\"\\\"), JobStartDateTime = todatetime(columnifexists(\\\"JobStartDateTime_s\\\",\\\"\\\")), JobDurationInSecs = todouble(columnifexists(\\\"JobDurationInSecs_s\\\", \\\"\\\")),\\r\\nDataTransferredInMB = todouble(columnifexists(\\\"DataTransferredInMB_s\\\",\\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\",\\\"\\\"), TimeGenerated, ResourceId\\r\\n| where not((JobOperation == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\")) \\r\\n| extend JobUniqueId = iff(JobUniqueIdGuid == \\\"\\\", JobUniqueIdStr, JobUniqueIdGuid) \\r\\n| project-away JobUniqueIdGuid, JobUniqueIdStr\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet JobUnderResourceSpecific = ()\\r\\n{\\r\\nlet JobTable = AddonAzureBackupJobs \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Job\\\" \\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| where not((JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\"))\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet TotalProtectedContainerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(ProtectedContainerUnderAzureDiagnostics()),\\r\\n(ProtectedContainerUnderResourceSpecific())\\r\\n| where ProtectedContainerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\"), ProtectedContainerUniqueId \\r\\n// BackupItemName Not applicable\\r\\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupManagementServerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(BackupManagementServerUnderAzureDiagnostics()),\\r\\n(BackupManagementServerUnderResourceSpecific())\\r\\n| where BackupManagementServerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = \\\"NaN\\\", BackupManagementServerUniqueId\\r\\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType)};\\r\\nlet LatestBackupItemWithProtectedContainerTable = () \\r\\n{\\r\\nTotalBackupItemDimensionTable\\r\\n| join kind= inner (CombinedTable | union isfuzzy = true   \\r\\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\\r\\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n// Handle AG container\\r\\n| project ProtectedContainerName = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\" and isempty(ProtectedContainerName)),split(BackupItemName,\\\";\\\")[0],ProtectedContainerName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ProtectedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  BackupItemName contains (BI_search)\\r\\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestBackupItemInfoTable = (){\\r\\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnBackupItem = (){\\r\\n CombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n)\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\\r\\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId = BackupItemUniqueId1, JobStartDateTime, AdHocOrScheduledJob, ResourceId, TimeGenerated\\r\\n};\\r\\nlet LatestJobTableBasedOnProtectedContainer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\\r\\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId \\r\\n};\\r\\nlet LatestJobTableBasedOnBackupManagementServer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\\r\\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId \\r\\n};\\r\\nlet LatestJobTable = () { \\r\\nLatestJobTableBasedOnBackupItem()\\r\\n// To Exclude NaN from Search filter\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| where JobUniqueId != \\\"\\\"\\r\\n| parse ContainerNameWithBackupItemName with ExtractedContainerName:string \\\"/\\\" ExtractedBackupItemName:string\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ExtractedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  ExtractedBackupItemName contains (BI_search)\\r\\n| distinct JobOperation}; \\r\\nLatestJobTable\",\"crossComponentResources\":[\"{Workspaces}\"],\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\"},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"49be13b9-6869-4cb2-94e0-b122508d1efb\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"JobStatus\",\"label\":\"Job Status\",\"type\":2,\"description\":\"Use to filter by Job Status\",\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"Completed\\\", \\\"label\\\":\\\"Succeeded\\\" },\\r\\n    { \\\"value\\\":\\\"Failed\\\", \\\"label\\\":\\\"Failed\\\"  },\\r\\n    { \\\"value\\\":\\\"CompletedWithWarnings\\\",   \\\"label\\\":\\\"SucceededWithWarnings\\\"  },\\r\\n    { \\\"value\\\":\\\"Cancelled\\\", \\\"label\\\":\\\"Cancelled\\\" }\\r\\n]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"84fef06a-bc14-40e3-a6c5-68647b3f5474\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"JobFailureCode\",\"label\":\"Job Failure Code\",\"type\":2,\"description\":\"Use to filter by Job Failure Code\",\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"// Time variable used  ******************** Using ExtRange For artifacts ******************************\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet ExtRangeStart = RangeStart + 36h;\\r\\nlet ExtRangeEnd = RangeEnd + 36h;\\r\\n//search\\r\\nlet Item_search =  @\\\"{ContainerNameWithBackupItemName}\\\";\\r\\nlet ItemArray = split(Item_search, \\\";\\\");\\r\\nlet ItemArray_length = array_length(ItemArray);\\r\\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\\r\\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \\\"\\\"); \\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| where VaultName in ({Vault}) or '*' in ({Vault})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupManagementServerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupManagementServer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\\r\\n| project OldBackupManagementServerUniqueId = columnifexists(\\\"BackupManagmentServerUniqueId_s\\\", \\\"\\\"), NewBackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),  BackupManagementServerName = columnifexists(\\\"BackupManagementServerName_s\\\", \\\"\\\"), AzureBackupAgentVersion = columnifexists(\\\"AzureBackupAgentVersion_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), ResourceId, TimeGenerated\\r\\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \\\"\\\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \\r\\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupManagementServerTable =CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupManagementServer\\\" and State != \\\"Deleted\\\"\\r\\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet JobUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet JobTable = AzureDiagnostics \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Job\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| project JobOperation = columnifexists(\\\"JobOperation_s\\\", \\\"\\\") , JobOperationSubType = columnifexists(\\\"JobOperationSubType_s\\\", \\\"\\\"), JobUniqueIdGuid = columnifexists(\\\"JobUniqueId_g\\\", \\\"\\\") , JobUniqueIdStr = columnifexists(\\\"JobUniqueId_s\\\", \\\"\\\"),\\r\\nProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\",\\\"\\\"), AdHocOrScheduledJob = columnifexists(\\\"AdHocOrScheduledJob_s\\\",\\\"\\\"), RecoveryJobDestination = columnifexists(\\\"RecoveryJobDestination_s\\\",\\\"\\\"),\\r\\nRecoveryJobRPDateTime = todatetime(columnifexists(\\\"RecoveryJobRPDateTime_s\\\",\\\"\\\")), RecoveryJobRPLocation = columnifexists(\\\"RecoveryJobRPLocation_s\\\",\\\"\\\"), RecoveryLocationType = columnifexists(\\\"RecoveryLocationType_s\\\",\\\"\\\"),\\r\\nBackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\",\\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\",\\\"\\\"), VaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\",\\\"\\\"),\\r\\nJobStatus = columnifexists(\\\"JobStatus_s\\\",\\\"\\\"), JobFailureCode = columnifexists(\\\"JobFailureCode_s\\\",\\\"\\\"), JobStartDateTime = todatetime(columnifexists(\\\"JobStartDateTime_s\\\",\\\"\\\")), JobDurationInSecs = todouble(columnifexists(\\\"JobDurationInSecs_s\\\", \\\"\\\")),\\r\\nDataTransferredInMB = todouble(columnifexists(\\\"DataTransferredInMB_s\\\",\\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\",\\\"\\\"), TimeGenerated, ResourceId\\r\\n| where not((JobOperation == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\")) \\r\\n| extend JobUniqueId = iff(JobUniqueIdGuid == \\\"\\\", JobUniqueIdStr, JobUniqueIdGuid) \\r\\n| project-away JobUniqueIdGuid, JobUniqueIdStr\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet JobUnderResourceSpecific = ()\\r\\n{\\r\\nlet JobTable = AddonAzureBackupJobs \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Job\\\" \\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| where not((JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\"))\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet TotalProtectedContainerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(ProtectedContainerUnderAzureDiagnostics()),\\r\\n(ProtectedContainerUnderResourceSpecific())\\r\\n| where ProtectedContainerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\"), ProtectedContainerUniqueId \\r\\n// BackupItemName Not applicable\\r\\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupManagementServerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(BackupManagementServerUnderAzureDiagnostics()),\\r\\n(BackupManagementServerUnderResourceSpecific())\\r\\n| where BackupManagementServerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = \\\"NaN\\\", BackupManagementServerUniqueId\\r\\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType)};\\r\\nlet LatestBackupItemWithProtectedContainerTable = () \\r\\n{\\r\\nTotalBackupItemDimensionTable\\r\\n| join kind= inner (CombinedTable | union isfuzzy = true   \\r\\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\\r\\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n// Handle AG container\\r\\n| project ProtectedContainerName = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\" and isempty(ProtectedContainerName)),split(BackupItemName,\\\";\\\")[0],ProtectedContainerName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ProtectedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  BackupItemName contains (BI_search)\\r\\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestBackupItemInfoTable = (){\\r\\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnBackupItem = (){\\r\\n CombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n)\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId = BackupItemUniqueId1, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnProtectedContainer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\\r\\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId \\r\\n};\\r\\nlet LatestJobTableBasedOnBackupManagementServer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\\r\\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId \\r\\n};\\r\\nlet LatestJobTable = () { \\r\\nLatestJobTableBasedOnBackupItem()\\r\\n// To Exclude NaN from Search filter\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| where JobUniqueId != \\\"\\\"\\r\\n| parse ContainerNameWithBackupItemName with ExtractedContainerName:string \\\"/\\\" ExtractedBackupItemName:string\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ExtractedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  ExtractedBackupItemName contains (BI_search)\\r\\n| distinct JobFailureCode\\r\\n| where not (JobFailureCode == \\\"Success\\\" or JobFailureCode == \\\"\\\")}; \\r\\nLatestJobTable\",\"crossComponentResources\":[\"{Workspaces}\"],\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\"},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"above\",\"doNotRunWhenHidden\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}",
	"conditionalVisibility": {
	  "parameterName": "TabName",
	  "comparison": "isEqualTo",
	  "value": "JobDistribution"
	},
	"conditionalVisibilities": [
	  {
		"parameterName": "TabName",
		"comparison": "isEqualTo",
		"value": "JobDistribution"
	  },
	  {
		"parameterName": "Workspaces",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "ErrorHandle",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "CustomBMSTypeParam",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "BMSTypeWithBackupItemTypeParam",
		"comparison": "isNotEqualTo"
	  }
	],
	"name": "JobDistribution-TopParameterBlock"
  },
  {
	"type": 1,
	"content": "{\"json\":\"________________________\"}",
	"conditionalVisibility": {
	  "parameterName": "Workspaces",
	  "comparison": "isNotEqualTo"
	},
	"conditionalVisibilities": [
	  {
		"parameterName": "Workspaces",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "TabName",
		"comparison": "isEqualTo",
		"value": "JobDistribution"
	  },
	  {
		"parameterName": "ErrorHandle",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "CustomBMSTypeParam",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "BMSTypeWithBackupItemTypeParam",
		"comparison": "isNotEqualTo"
	  }
	],
	"name": "JobDistribution-DividingLine1"
  },
  {
	"type": 3,
	"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used ******************** Using ExtRange For artifacts ******************************\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet ExtRangeStart = RangeStart + 36h;\\r\\nlet ExtRangeEnd = RangeEnd + 36h;\\r\\n//search\\r\\nlet Item_search =  @\\\"{ContainerNameWithBackupItemName}\\\";\\r\\nlet ItemArray = split(Item_search, \\\";\\\");\\r\\nlet ItemArray_length = array_length(ItemArray);\\r\\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\\r\\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \\\"\\\"); \\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupManagementServerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupManagementServer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\\r\\n| project OldBackupManagementServerUniqueId = columnifexists(\\\"BackupManagmentServerUniqueId_s\\\", \\\"\\\"), NewBackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),  BackupManagementServerName = columnifexists(\\\"BackupManagementServerName_s\\\", \\\"\\\"), AzureBackupAgentVersion = columnifexists(\\\"AzureBackupAgentVersion_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), ResourceId, TimeGenerated\\r\\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \\\"\\\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \\r\\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupManagementServerTable =CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupManagementServer\\\" and State != \\\"Deleted\\\"\\r\\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet JobUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet JobTable = AzureDiagnostics \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Job\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| project JobOperation = columnifexists(\\\"JobOperation_s\\\", \\\"\\\") , JobOperationSubType = columnifexists(\\\"JobOperationSubType_s\\\", \\\"\\\"), JobUniqueIdGuid = columnifexists(\\\"JobUniqueId_g\\\", \\\"\\\") , JobUniqueIdStr = columnifexists(\\\"JobUniqueId_s\\\", \\\"\\\"),\\r\\nProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\",\\\"\\\"), AdHocOrScheduledJob = columnifexists(\\\"AdHocOrScheduledJob_s\\\",\\\"\\\"), RecoveryJobDestination = columnifexists(\\\"RecoveryJobDestination_s\\\",\\\"\\\"),\\r\\nRecoveryJobRPDateTime = todatetime(columnifexists(\\\"RecoveryJobRPDateTime_s\\\",\\\"\\\")), RecoveryJobRPLocation = columnifexists(\\\"RecoveryJobRPLocation_s\\\",\\\"\\\"), RecoveryLocationType = columnifexists(\\\"RecoveryLocationType_s\\\",\\\"\\\"),\\r\\nBackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\",\\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\",\\\"\\\"), VaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\",\\\"\\\"),\\r\\nJobStatus = columnifexists(\\\"JobStatus_s\\\",\\\"\\\"), JobFailureCode = columnifexists(\\\"JobFailureCode_s\\\",\\\"\\\"), JobStartDateTime = todatetime(columnifexists(\\\"JobStartDateTime_s\\\",\\\"\\\")), JobDurationInSecs = todouble(columnifexists(\\\"JobDurationInSecs_s\\\", \\\"\\\")),\\r\\nDataTransferredInMB = todouble(columnifexists(\\\"DataTransferredInMB_s\\\",\\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\",\\\"\\\"), TimeGenerated, ResourceId\\r\\n| where not((JobOperation == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\")) \\r\\n| extend JobUniqueId = iff(JobUniqueIdGuid == \\\"\\\", JobUniqueIdStr, JobUniqueIdGuid) \\r\\n| project-away JobUniqueIdGuid, JobUniqueIdStr\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet JobUnderResourceSpecific = ()\\r\\n{\\r\\nlet JobTable = AddonAzureBackupJobs \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Job\\\" \\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| where not((JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\"))\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet TotalProtectedContainerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(ProtectedContainerUnderAzureDiagnostics()),\\r\\n(ProtectedContainerUnderResourceSpecific())\\r\\n| where ProtectedContainerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\"), ProtectedContainerUniqueId \\r\\n// BackupItemName Not applicable\\r\\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupManagementServerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(BackupManagementServerUnderAzureDiagnostics()),\\r\\n(BackupManagementServerUnderResourceSpecific())\\r\\n| where BackupManagementServerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = \\\"NaN\\\", BackupManagementServerUniqueId\\r\\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType)};\\r\\nlet LatestBackupItemWithProtectedContainerTable = () \\r\\n{\\r\\nTotalBackupItemDimensionTable\\r\\n| join kind= inner (CombinedTable | union isfuzzy = true   \\r\\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\\r\\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n// Handle AG container\\r\\n| project ProtectedContainerName = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\" and isempty(ProtectedContainerName)),split(BackupItemName,\\\";\\\")[0],ProtectedContainerName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ProtectedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  BackupItemName contains (BI_search)\\r\\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestBackupItemInfoTable = (){\\r\\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnBackupItem = (){\\r\\n CombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n)\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId = BackupItemUniqueId1, JobStartDateTime, AdHocOrScheduledJob, ResourceId, TimeGenerated\\r\\n};\\r\\nlet LatestJobTableBasedOnProtectedContainer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\\r\\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId \\r\\n};\\r\\nlet LatestJobTableBasedOnBackupManagementServer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\\r\\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId \\r\\n};\\r\\nlet LatestJobTable =  materialize(\\r\\nLatestJobTableBasedOnBackupItem()\\r\\n// To Exclude NaN from Search filter\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| where JobUniqueId != \\\"\\\"\\r\\n| parse ContainerNameWithBackupItemName with ExtractedContainerName:string \\\"/\\\" ExtractedBackupItemName:string\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ExtractedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  ExtractedBackupItemName contains (BI_search)\\r\\n| distinct JobStatus, JobUniqueId); \\r\\nlet JobSuccessPercent = LatestJobTable\\r\\n| extend success=iff((JobStatus == \\\"Completed\\\" or JobStatus == \\\"CompletedWithWarnings\\\") , 1 , 0)\\r\\n| extend record = 1 // to be used for total row count\\r\\n| summarize SuccessfulCount =sum(success), TotalCount=sum(record)\\r\\n| extend JobSuccessPercentage = (SuccessfulCount*100)/todouble(TotalCount)\\r\\n| project JobSuccessPercentage = iff( (isnan(JobSuccessPercentage) or isinf(JobSuccessPercentage) or isempty(JobSuccessPercentage)), \\\"-\\\", tostring(JobSuccessPercentage)) \\r\\n| extend  Key = pack_array(\\\"Success %\\\"), Value = pack_array( JobSuccessPercentage), Row = pack_array(0)\\r\\n| project Key, Value, Row\\r\\n| mvexpand  Key, Value, Row; \\r\\nlet JobStatusEnum = datatable (JobStatus:string, statusOrder:int, CustomJobStatus:string)\\r\\n    [ \\\"Completed\\\", 1, \\\"Succeeded\\\",\\r\\n      \\\"CompletedWithWarnings\\\", 2, \\\"SucceededWithWarnings\\\",\\r\\n      \\\"Failed\\\", 3, \\\"Failed\\\",\\r\\n      \\\"Cancelled\\\", 4, \\\"Cancelled\\\"];\\r\\nlet JobStatusTable = JobStatusEnum\\r\\n| join kind= leftouter (LatestJobTable | summarize dcount(JobUniqueId, 4) by JobStatus) \\r\\non JobStatus == JobStatus\\r\\n| project CustomJobStatus, JobStatus, JobCount = (iff(isempty(dcount_JobUniqueId), 0, dcount_JobUniqueId)), statusOrder\\r\\n| project-away JobStatus\\r\\n| order by statusOrder asc\\r\\n| extend  Key = pack_array(CustomJobStatus), Value = pack_array( JobCount), Row = pack_array(statusOrder)\\r\\n| project Key, Value, Row\\r\\n| mvexpand  Key, Value, Row;\\r\\nunion  JobStatusTable, JobSuccessPercent \\r\\n| order by toint(Row) asc\",\"size\":3,\"noDataMessage\":\"No records found for the selected time range and scope\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Key\",\"formatter\":1,\"formatOptions\":{\"showIcon\":true}},\"subtitleContent\":{\"columnMatch\":\"SubTitle\",\"formatter\":1,\"formatOptions\":{\"showIcon\":true}},\"leftContent\":{\"columnMatch\":\"Value\",\"formatter\":1,\"formatOptions\":{\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},\"showBorder\":true,\"sortCriteriaField\":\"Key\",\"sortOrderField\":2}}",
	"conditionalVisibility": {
	  "parameterName": "TabName",
	  "comparison": "isEqualTo",
	  "value": "JobDistribution"
	},
	"conditionalVisibilities": [
	  {
		"parameterName": "TabName",
		"comparison": "isEqualTo",
		"value": "JobDistribution"
	  },
	  {
		"parameterName": "Workspaces",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "ErrorHandle",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "CustomBMSTypeParam",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "BMSTypeWithBackupItemTypeParam",
		"comparison": "isNotEqualTo"
	  }
	],
	"name": "JobDistribution-Tiles",
	"styleSettings": {
	  "margin": "-10px 0% 0% -15px"
	}
  },
  {
	"type": 1,
	"content": "{\"json\":\"_____________________________\"}",
	"conditionalVisibility": {
	  "parameterName": "TabName",
	  "comparison": "isEqualTo",
	  "value": "JobDistribution"
	},
	"conditionalVisibilities": [
	  {
		"parameterName": "TabName",
		"comparison": "isEqualTo",
		"value": "JobDistribution"
	  },
	  {
		"parameterName": "Workspaces",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "ErrorHandle",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "CustomBMSTypeParam",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "BMSTypeWithBackupItemTypeParam",
		"comparison": "isNotEqualTo"
	  }
	],
	"name": "JobDistribution-DividingLine2"
  },
  {
	"type": 3,
	"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used ******************** Using ExtRange For artifacts ******************************\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet ExtRangeStart = RangeStart + 36h;\\r\\nlet ExtRangeEnd = RangeEnd + 36h;\\r\\n//search\\r\\nlet Item_search =  @\\\"{ContainerNameWithBackupItemName}\\\";\\r\\nlet ItemArray = split(Item_search, \\\";\\\");\\r\\nlet ItemArray_length = array_length(ItemArray);\\r\\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\\r\\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \\\"\\\");  \\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupManagementServerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupManagementServer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\\r\\n| project OldBackupManagementServerUniqueId = columnifexists(\\\"BackupManagmentServerUniqueId_s\\\", \\\"\\\"), NewBackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),  BackupManagementServerName = columnifexists(\\\"BackupManagementServerName_s\\\", \\\"\\\"), AzureBackupAgentVersion = columnifexists(\\\"AzureBackupAgentVersion_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), ResourceId, TimeGenerated\\r\\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \\\"\\\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \\r\\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupManagementServerTable =CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupManagementServer\\\" and State != \\\"Deleted\\\"\\r\\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet JobUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet JobTable = AzureDiagnostics \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Job\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| project JobOperation = columnifexists(\\\"JobOperation_s\\\", \\\"\\\") , JobOperationSubType = columnifexists(\\\"JobOperationSubType_s\\\", \\\"\\\"), JobUniqueIdGuid = columnifexists(\\\"JobUniqueId_g\\\", \\\"\\\") , JobUniqueIdStr = columnifexists(\\\"JobUniqueId_s\\\", \\\"\\\"),\\r\\nProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\",\\\"\\\"), AdHocOrScheduledJob = columnifexists(\\\"AdHocOrScheduledJob_s\\\",\\\"\\\"), RecoveryJobDestination = columnifexists(\\\"RecoveryJobDestination_s\\\",\\\"\\\"),\\r\\nRecoveryJobRPDateTime = todatetime(columnifexists(\\\"RecoveryJobRPDateTime_s\\\",\\\"\\\")), RecoveryJobRPLocation = columnifexists(\\\"RecoveryJobRPLocation_s\\\",\\\"\\\"), RecoveryLocationType = columnifexists(\\\"RecoveryLocationType_s\\\",\\\"\\\"),\\r\\nBackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\",\\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\",\\\"\\\"), VaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\",\\\"\\\"),\\r\\nJobStatus = columnifexists(\\\"JobStatus_s\\\",\\\"\\\"), JobFailureCode = columnifexists(\\\"JobFailureCode_s\\\",\\\"\\\"), JobStartDateTime = todatetime(columnifexists(\\\"JobStartDateTime_s\\\",\\\"\\\")), JobDurationInSecs = todouble(columnifexists(\\\"JobDurationInSecs_s\\\", \\\"\\\")),\\r\\nDataTransferredInMB = todouble(columnifexists(\\\"DataTransferredInMB_s\\\",\\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\",\\\"\\\"), TimeGenerated, ResourceId\\r\\n| where not((JobOperation == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\")) \\r\\n| extend JobUniqueId = iff(JobUniqueIdGuid == \\\"\\\", JobUniqueIdStr, JobUniqueIdGuid) \\r\\n| project-away JobUniqueIdGuid, JobUniqueIdStr\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet JobUnderResourceSpecific = ()\\r\\n{\\r\\nlet JobTable = AddonAzureBackupJobs \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Job\\\" \\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| where not((JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\"))\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet TotalProtectedContainerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(ProtectedContainerUnderAzureDiagnostics()),\\r\\n(ProtectedContainerUnderResourceSpecific())\\r\\n| where ProtectedContainerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\"), ProtectedContainerUniqueId \\r\\n// BackupItemName Not applicable\\r\\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupManagementServerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(BackupManagementServerUnderAzureDiagnostics()),\\r\\n(BackupManagementServerUnderResourceSpecific())\\r\\n| where BackupManagementServerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = \\\"NaN\\\", BackupManagementServerUniqueId\\r\\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType)};\\r\\nlet LatestBackupItemWithProtectedContainerTable = () \\r\\n{\\r\\nTotalBackupItemDimensionTable\\r\\n| join kind= inner (CombinedTable | union isfuzzy = true   \\r\\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\\r\\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n// Handle AG container\\r\\n| project ProtectedContainerName = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\" and isempty(ProtectedContainerName)),split(BackupItemName,\\\";\\\")[0],ProtectedContainerName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ProtectedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  BackupItemName contains (BI_search)\\r\\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestBackupItemInfoTable = (){\\r\\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnBackupItem = (){\\r\\n CombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n)\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId = BackupItemUniqueId1, JobStartDateTime, AdHocOrScheduledJob, ResourceId, TimeGenerated\\r\\n};\\r\\nlet LatestJobTableBasedOnProtectedContainer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\\r\\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId, TimeGenerated \\r\\n};\\r\\nlet LatestJobTableBasedOnBackupManagementServer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\\r\\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId, TimeGenerated \\r\\n};\\r\\nlet LatestJobTable =   \\r\\nLatestJobTableBasedOnBackupItem()\\r\\n// To Exclude NaN from Search filter\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| parse ContainerNameWithBackupItemName with ExtractedContainerName:string \\\"/\\\" ExtractedBackupItemName:string\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ExtractedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  ExtractedBackupItemName contains (BI_search)\\r\\n// Only When JobCount is >= 1\\r\\n| where JobUniqueId != \\\"\\\"; \\r\\nLatestJobTable\\r\\n| summarize arg_max(TimeGenerated, JobStatus) by JobUniqueId\\r\\n| summarize count(JobStatus) by  JobStatus, bin(TimeGenerated, 1d)\\r\\n| project TimeGenerated, count_JobStatus, JobStatus = ( iff(JobStatus == \\\"Completed\\\", \\\"Succeeded\\\", iff(JobStatus == \\\"CompletedWithWarnings\\\", \\\"SucceededWithWarnings\\\", JobStatus)))\",\"size\":0,\"title\":\"Jobs by Status over Time\",\"noDataMessage\":\"No records found for the selected time range and scope\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"barchart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Failed\",\"color\":\"red\"},{\"seriesName\":\"SucceededWithWarnings\",\"color\":\"yellow\"},{\"seriesName\":\"Succeeded\",\"color\":\"green\"}]}}",
	"customWidth": "33",
	"conditionalVisibility": {
	  "parameterName": "TabName",
	  "comparison": "isEqualTo",
	  "value": "JobDistribution"
	},
	"conditionalVisibilities": [
	  {
		"parameterName": "TabName",
		"comparison": "isEqualTo",
		"value": "JobDistribution"
	  },
	  {
		"parameterName": "Workspaces",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "ErrorHandle",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "CustomBMSTypeParam",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "BMSTypeWithBackupItemTypeParam",
		"comparison": "isNotEqualTo"
	  }
	],
	"showPin": true,
	"name": "JobDistribution-JobByStatusGraph"
  },
  {
	"type": 3,
	"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used ******************** Using ExtRange For artifacts ******************************\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet ExtRangeStart = RangeStart + 36h;\\r\\nlet ExtRangeEnd = RangeEnd + 36h;\\r\\n//search\\r\\nlet Item_search =  @\\\"{ContainerNameWithBackupItemName}\\\";\\r\\nlet ItemArray = split(Item_search, \\\";\\\");\\r\\nlet ItemArray_length = array_length(ItemArray);\\r\\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\\r\\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \\\"\\\");  \\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupManagementServerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupManagementServer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\\r\\n| project OldBackupManagementServerUniqueId = columnifexists(\\\"BackupManagmentServerUniqueId_s\\\", \\\"\\\"), NewBackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),  BackupManagementServerName = columnifexists(\\\"BackupManagementServerName_s\\\", \\\"\\\"), AzureBackupAgentVersion = columnifexists(\\\"AzureBackupAgentVersion_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), ResourceId, TimeGenerated\\r\\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \\\"\\\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \\r\\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupManagementServerTable =CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupManagementServer\\\" and State != \\\"Deleted\\\"\\r\\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet JobUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet JobTable = AzureDiagnostics \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Job\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| project JobOperation = columnifexists(\\\"JobOperation_s\\\", \\\"\\\") , JobOperationSubType = columnifexists(\\\"JobOperationSubType_s\\\", \\\"\\\"), JobUniqueIdGuid = columnifexists(\\\"JobUniqueId_g\\\", \\\"\\\") , JobUniqueIdStr = columnifexists(\\\"JobUniqueId_s\\\", \\\"\\\"),\\r\\nProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\",\\\"\\\"), AdHocOrScheduledJob = columnifexists(\\\"AdHocOrScheduledJob_s\\\",\\\"\\\"), RecoveryJobDestination = columnifexists(\\\"RecoveryJobDestination_s\\\",\\\"\\\"),\\r\\nRecoveryJobRPDateTime = todatetime(columnifexists(\\\"RecoveryJobRPDateTime_s\\\",\\\"\\\")), RecoveryJobRPLocation = columnifexists(\\\"RecoveryJobRPLocation_s\\\",\\\"\\\"), RecoveryLocationType = columnifexists(\\\"RecoveryLocationType_s\\\",\\\"\\\"),\\r\\nBackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\",\\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\",\\\"\\\"), VaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\",\\\"\\\"),\\r\\nJobStatus = columnifexists(\\\"JobStatus_s\\\",\\\"\\\"), JobFailureCode = columnifexists(\\\"JobFailureCode_s\\\",\\\"\\\"), JobStartDateTime = todatetime(columnifexists(\\\"JobStartDateTime_s\\\",\\\"\\\")), JobDurationInSecs = todouble(columnifexists(\\\"JobDurationInSecs_s\\\", \\\"\\\")),\\r\\nDataTransferredInMB = todouble(columnifexists(\\\"DataTransferredInMB_s\\\",\\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\",\\\"\\\"), TimeGenerated, ResourceId\\r\\n| where not((JobOperation == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\")) \\r\\n| extend JobUniqueId = iff(JobUniqueIdGuid == \\\"\\\", JobUniqueIdStr, JobUniqueIdGuid) \\r\\n| project-away JobUniqueIdGuid, JobUniqueIdStr\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet JobUnderResourceSpecific = ()\\r\\n{\\r\\nlet JobTable = AddonAzureBackupJobs \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Job\\\" \\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| where not((JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\"))\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet TotalProtectedContainerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(ProtectedContainerUnderAzureDiagnostics()),\\r\\n(ProtectedContainerUnderResourceSpecific())\\r\\n| where ProtectedContainerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\"), ProtectedContainerUniqueId \\r\\n// BackupItemName Not applicable\\r\\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupManagementServerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(BackupManagementServerUnderAzureDiagnostics()),\\r\\n(BackupManagementServerUnderResourceSpecific())\\r\\n| where BackupManagementServerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = \\\"NaN\\\", BackupManagementServerUniqueId\\r\\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType)};\\r\\nlet LatestBackupItemWithProtectedContainerTable = () \\r\\n{\\r\\nTotalBackupItemDimensionTable\\r\\n| join kind= inner (CombinedTable | union isfuzzy = true   \\r\\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\\r\\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n// Handle AG container\\r\\n| project ProtectedContainerName = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\" and isempty(ProtectedContainerName)),split(BackupItemName,\\\";\\\")[0],ProtectedContainerName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ProtectedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  BackupItemName contains (BI_search)\\r\\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestBackupItemInfoTable = (){\\r\\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnBackupItem = (){\\r\\n CombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n)\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId = BackupItemUniqueId1, JobStartDateTime, AdHocOrScheduledJob, ResourceId, TimeGenerated\\r\\n};\\r\\nlet LatestJobTableBasedOnProtectedContainer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\\r\\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId, TimeGenerated \\r\\n};\\r\\nlet LatestJobTableBasedOnBackupManagementServer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\\r\\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId, TimeGenerated \\r\\n};\\r\\nlet LatestJobTable =   \\r\\nLatestJobTableBasedOnBackupItem()\\r\\n// To Exclude NaN from Search filter\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| parse ContainerNameWithBackupItemName with ExtractedContainerName:string \\\"/\\\" ExtractedBackupItemName:string\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ExtractedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  ExtractedBackupItemName contains (BI_search)\\r\\n// Only When JobCount is >= 1\\r\\n| where JobUniqueId != \\\"\\\"; \\r\\nLatestJobTable\\r\\n| summarize JobStatus = any(JobStatus), JobOperation = any(JobOperation) by JobUniqueId\\r\\n| summarize count(JobStatus) by JobOperation, JobStatus\",\"size\":0,\"title\":\"Jobs by Job Operation\",\"noDataMessage\":\"No records found for the selected time range and scope\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"categoricalbar\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"JobOperation\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"JobOperation\",\"sortOrder\":1}],\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"JobStatus\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"count_JobStatus\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"JobStatus\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"count_JobStatus\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Backup\",\"color\":\"grayBlue\"}]}}",
	"customWidth": "33",
	"conditionalVisibility": {
	  "parameterName": "TabName",
	  "comparison": "isEqualTo",
	  "value": "JobDistribution"
	},
	"conditionalVisibilities": [
	  {
		"parameterName": "TabName",
		"comparison": "isEqualTo",
		"value": "JobDistribution"
	  },
	  {
		"parameterName": "Workspaces",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "ErrorHandle",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "CustomBMSTypeParam",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "BMSTypeWithBackupItemTypeParam",
		"comparison": "isNotEqualTo"
	  }
	],
	"showPin": true,
	"name": "JobDistribution-JobsByOperationGraph"
  },
  {
	"type": 3,
	"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used  ******************** Using ExtRange For artifacts ******************************\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet ExtRangeStart = RangeStart + 36h;\\r\\nlet ExtRangeEnd = RangeEnd + 36h;\\r\\n//search\\r\\nlet Item_search =  @\\\"{ContainerNameWithBackupItemName}\\\";\\r\\nlet ItemArray = split(Item_search, \\\";\\\");\\r\\nlet ItemArray_length = array_length(ItemArray);\\r\\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\\r\\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \\\"\\\");  \\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupManagementServerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupManagementServer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\\r\\n| project OldBackupManagementServerUniqueId = columnifexists(\\\"BackupManagmentServerUniqueId_s\\\", \\\"\\\"), NewBackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),  BackupManagementServerName = columnifexists(\\\"BackupManagementServerName_s\\\", \\\"\\\"), AzureBackupAgentVersion = columnifexists(\\\"AzureBackupAgentVersion_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), ResourceId, TimeGenerated\\r\\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \\\"\\\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \\r\\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupManagementServerTable =CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupManagementServer\\\" and State != \\\"Deleted\\\"\\r\\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet JobUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet JobTable = AzureDiagnostics \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Job\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| project JobOperation = columnifexists(\\\"JobOperation_s\\\", \\\"\\\") , JobOperationSubType = columnifexists(\\\"JobOperationSubType_s\\\", \\\"\\\"), JobUniqueIdGuid = columnifexists(\\\"JobUniqueId_g\\\", \\\"\\\") , JobUniqueIdStr = columnifexists(\\\"JobUniqueId_s\\\", \\\"\\\"),\\r\\nProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\",\\\"\\\"), AdHocOrScheduledJob = columnifexists(\\\"AdHocOrScheduledJob_s\\\",\\\"\\\"), RecoveryJobDestination = columnifexists(\\\"RecoveryJobDestination_s\\\",\\\"\\\"),\\r\\nRecoveryJobRPDateTime = todatetime(columnifexists(\\\"RecoveryJobRPDateTime_s\\\",\\\"\\\")), RecoveryJobRPLocation = columnifexists(\\\"RecoveryJobRPLocation_s\\\",\\\"\\\"), RecoveryLocationType = columnifexists(\\\"RecoveryLocationType_s\\\",\\\"\\\"),\\r\\nBackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\",\\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\",\\\"\\\"), VaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\",\\\"\\\"),\\r\\nJobStatus = columnifexists(\\\"JobStatus_s\\\",\\\"\\\"), JobFailureCode = columnifexists(\\\"JobFailureCode_s\\\",\\\"\\\"), JobStartDateTime = todatetime(columnifexists(\\\"JobStartDateTime_s\\\",\\\"\\\")), JobDurationInSecs = todouble(columnifexists(\\\"JobDurationInSecs_s\\\", \\\"\\\")),\\r\\nDataTransferredInMB = todouble(columnifexists(\\\"DataTransferredInMB_s\\\",\\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\",\\\"\\\"), TimeGenerated, ResourceId\\r\\n| where not((JobOperation == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\")) \\r\\n| extend JobUniqueId = iff(JobUniqueIdGuid == \\\"\\\", JobUniqueIdStr, JobUniqueIdGuid) \\r\\n| project-away JobUniqueIdGuid, JobUniqueIdStr\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet JobUnderResourceSpecific = ()\\r\\n{\\r\\nlet JobTable = AddonAzureBackupJobs \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Job\\\" \\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| where not((JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\"))\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet TotalProtectedContainerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(ProtectedContainerUnderAzureDiagnostics()),\\r\\n(ProtectedContainerUnderResourceSpecific())\\r\\n| where ProtectedContainerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\"), ProtectedContainerUniqueId \\r\\n// BackupItemName Not applicable\\r\\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupManagementServerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(BackupManagementServerUnderAzureDiagnostics()),\\r\\n(BackupManagementServerUnderResourceSpecific())\\r\\n| where BackupManagementServerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = \\\"NaN\\\", BackupManagementServerUniqueId\\r\\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType)};\\r\\nlet LatestBackupItemWithProtectedContainerTable = () \\r\\n{\\r\\nTotalBackupItemDimensionTable\\r\\n| join kind= inner (CombinedTable | union isfuzzy = true   \\r\\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\\r\\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n// Handle AG container\\r\\n| project ProtectedContainerName = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\" and isempty(ProtectedContainerName)),split(BackupItemName,\\\";\\\")[0],ProtectedContainerName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ProtectedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  BackupItemName contains (BI_search)\\r\\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestBackupItemInfoTable = (){\\r\\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnBackupItem = (){\\r\\n CombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n)\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId = BackupItemUniqueId1, JobStartDateTime, AdHocOrScheduledJob, ResourceId, TimeGenerated\\r\\n};\\r\\nlet LatestJobTableBasedOnProtectedContainer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\\r\\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId, TimeGenerated \\r\\n};\\r\\nlet LatestJobTableBasedOnBackupManagementServer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\\r\\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId, TimeGenerated \\r\\n};\\r\\nlet LatestJobTable =   \\r\\nLatestJobTableBasedOnBackupItem()\\r\\n// To Exclude NaN from Search filter\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| parse ContainerNameWithBackupItemName with ExtractedContainerName:string \\\"/\\\" ExtractedBackupItemName:string\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ExtractedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  ExtractedBackupItemName contains (BI_search)\\r\\n// Only When JobCount is >= 1\\r\\n| where JobUniqueId != \\\"\\\"; \\r\\nLatestJobTable\\r\\n| where JobStatus == \\\"Failed\\\"\\r\\n| summarize JobFailureCode = any(JobFailureCode), JobOperation = any(JobOperation) by JobUniqueId\\r\\n| summarize count(JobOperation) by JobFailureCode\",\"size\":0,\"title\":\"Failed Jobs by Failure Code\",\"noDataMessage\":\"No records found for the selected time range and scope\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"piechart\",\"chartSettings\":{}}",
	"customWidth": "33",
	"conditionalVisibility": {
	  "parameterName": "TabName",
	  "comparison": "isEqualTo",
	  "value": "JobDistribution"
	},
	"conditionalVisibilities": [
	  {
		"parameterName": "TabName",
		"comparison": "isEqualTo",
		"value": "JobDistribution"
	  },
	  {
		"parameterName": "Workspaces",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "ErrorHandle",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "CustomBMSTypeParam",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "BMSTypeWithBackupItemTypeParam",
		"comparison": "isNotEqualTo"
	  }
	],
	"showPin": true,
	"name": "JobDistribution-FailureCodeGraph"
  },
  {
	"type": 1,
	"content": "{\"json\":\"____________________________\"}",
	"conditionalVisibility": {
	  "parameterName": "Workspaces",
	  "comparison": "isNotEqualTo"
	},
	"conditionalVisibilities": [
	  {
		"parameterName": "Workspaces",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "TabName",
		"comparison": "isEqualTo",
		"value": "JobDistribution"
	  },
	  {
		"parameterName": "ErrorHandle",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "CustomBMSTypeParam",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "BMSTypeWithBackupItemTypeParam",
		"comparison": "isNotEqualTo"
	  }
	],
	"name": "JobDistribution-DividingLine3"
  },
  {
	"type": 9,
	"content": "{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Workspaces}\"],\"parameters\":[{\"id\":\"5dc2a074-b510-44f2-9530-cfcbd159b59c\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"JobMetricSortBy\",\"label\":\"Sort By\",\"type\":2,\"description\":\"Use to sort by a certain column\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[{ \\\"value\\\": \\\"FailureCount\\\", \\\"label\\\": \\\"# Jobs Failed\\\" },\\r\\n{ \\\"value\\\": \\\"AvgDataTransferred\\\", \\\"label\\\": \\\"Avg data transferred (MB)\\\" }, \\r\\n{ \\\"value\\\": \\\"AvgJobDuration\\\", \\\"label\\\": \\\"Avg Job Duration (hrs)\\\" },\\r\\n{ \\\"value\\\": \\\"SuccessPercent\\\", \\\"label\\\": \\\"Job Success %\\\", \\\"selected\\\": \\\"true\\\" }]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"df3cc03c-53f7-4523-a29b-e50bf1b6d922\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"JobMetricOrder\",\"label\":\"Order\",\"type\":2,\"description\":\"Use to specify the sort order: Ascending/Descending\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"Ascending\\\", \\\"selected\\\":true},\\r\\n    { \\\"value\\\":\\\"Descending\\\"}\\r\\n]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"2033073e-5e18-4e0f-a543-a03b98874d8d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"JobMetricRowsPerGrid\",\"label\":\"Rows per Page\",\"type\":2,\"description\":\"Number of rows to display in grid view\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":10, \\\"label\\\":\\\"10\\\", \\\"selected\\\":true  },\\r\\n    { \\\"value\\\":25, \\\"label\\\":\\\"25\\\" },\\r\\n    { \\\"value\\\":50, \\\"label\\\":\\\"50\\\" },\\r\\n    { \\\"value\\\":100, \\\"label\\\":\\\"100\\\" },\\r\\n    { \\\"value\\\":250, \\\"label\\\":\\\"250\\\" },\\r\\n    { \\\"value\\\":500, \\\"label\\\":\\\"500\\\" },\\r\\n    { \\\"value\\\":1000, \\\"label\\\":\\\"1000\\\" }\\r\\n]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"356e4bfd-7e3d-4e48-89c0-b03efb72b9dc\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"JobMetricPageNumber\",\"label\":\"Page\",\"type\":2,\"description\":\"Select Page Number\",\"isRequired\":true,\"query\":\"// Time variable used  ******************** Using ExtRange For artifacts ******************************\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet ExtRangeStart = RangeStart + 36h;\\r\\nlet ExtRangeEnd = RangeEnd + 36h;\\r\\n//search\\r\\nlet Item_search =  @\\\"{ContainerNameWithBackupItemName}\\\";\\r\\nlet ItemArray = split(Item_search, \\\";\\\");\\r\\nlet ItemArray_length = array_length(ItemArray);\\r\\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\\r\\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \\\"\\\");  \\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupManagementServerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupManagementServer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\\r\\n| project OldBackupManagementServerUniqueId = columnifexists(\\\"BackupManagmentServerUniqueId_s\\\", \\\"\\\"), NewBackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),  BackupManagementServerName = columnifexists(\\\"BackupManagementServerName_s\\\", \\\"\\\"), AzureBackupAgentVersion = columnifexists(\\\"AzureBackupAgentVersion_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), ResourceId, TimeGenerated\\r\\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \\\"\\\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \\r\\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupManagementServerTable =CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupManagementServer\\\" and State != \\\"Deleted\\\"\\r\\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet JobUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet JobTable = AzureDiagnostics \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Job\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| project JobOperation = columnifexists(\\\"JobOperation_s\\\", \\\"\\\") , JobOperationSubType = columnifexists(\\\"JobOperationSubType_s\\\", \\\"\\\"), JobUniqueIdGuid = columnifexists(\\\"JobUniqueId_g\\\", \\\"\\\") , JobUniqueIdStr = columnifexists(\\\"JobUniqueId_s\\\", \\\"\\\"),\\r\\nProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\",\\\"\\\"), AdHocOrScheduledJob = columnifexists(\\\"AdHocOrScheduledJob_s\\\",\\\"\\\"), RecoveryJobDestination = columnifexists(\\\"RecoveryJobDestination_s\\\",\\\"\\\"),\\r\\nRecoveryJobRPDateTime = todatetime(columnifexists(\\\"RecoveryJobRPDateTime_s\\\",\\\"\\\")), RecoveryJobRPLocation = columnifexists(\\\"RecoveryJobRPLocation_s\\\",\\\"\\\"), RecoveryLocationType = columnifexists(\\\"RecoveryLocationType_s\\\",\\\"\\\"),\\r\\nBackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\",\\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\",\\\"\\\"), VaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\",\\\"\\\"),\\r\\nJobStatus = columnifexists(\\\"JobStatus_s\\\",\\\"\\\"), JobFailureCode = columnifexists(\\\"JobFailureCode_s\\\",\\\"\\\"), JobStartDateTime = todatetime(columnifexists(\\\"JobStartDateTime_s\\\",\\\"\\\")), JobDurationInSecs = todouble(columnifexists(\\\"JobDurationInSecs_s\\\", \\\"\\\")),\\r\\nDataTransferredInMB = todouble(columnifexists(\\\"DataTransferredInMB_s\\\",\\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\",\\\"\\\"), TimeGenerated, ResourceId\\r\\n| where not((JobOperation == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\")) \\r\\n| extend JobUniqueId = iff(JobUniqueIdGuid == \\\"\\\", JobUniqueIdStr, JobUniqueIdGuid) \\r\\n| project-away JobUniqueIdGuid, JobUniqueIdStr\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet JobUnderResourceSpecific = ()\\r\\n{\\r\\nlet JobTable = AddonAzureBackupJobs \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Job\\\" \\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| where not((JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\"))\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet TotalProtectedContainerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(ProtectedContainerUnderAzureDiagnostics()),\\r\\n(ProtectedContainerUnderResourceSpecific())\\r\\n| where ProtectedContainerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\"), ProtectedContainerUniqueId, ResourceId\\r\\n// BackupItemName Not applicable\\r\\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName, ResourceId \\r\\n};\\r\\nlet TotalBackupManagementServerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(BackupManagementServerUnderAzureDiagnostics()),\\r\\n(BackupManagementServerUnderResourceSpecific())\\r\\n| where BackupManagementServerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = \\\"NaN\\\", BackupManagementServerUniqueId, ResourceId\\r\\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName, ResourceId\\r\\n};\\r\\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated, ResourceId\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType), ResourceId};\\r\\nlet LatestBackupItemWithProtectedContainerTable = () \\r\\n{\\r\\nTotalBackupItemDimensionTable\\r\\n| join kind= inner (CombinedTable | union isfuzzy = true   \\r\\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\\r\\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n// Handle AG container\\r\\n| project ProtectedContainerName = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\" and isempty(ProtectedContainerName)),split(BackupItemName,\\\";\\\")[0],ProtectedContainerName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ProtectedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  BackupItemName contains (BI_search)\\r\\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestBackupItemInfoTable = (){\\r\\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnBackupItem = (){\\r\\n CombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n)\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId = BackupItemUniqueId1, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnProtectedContainer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnBackupManagementServer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId, ResourceId\\r\\n};\\r\\nlet LatestJobTable = ()\\r\\n{ \\r\\n// Showing only BackupItem based Jobs\\r\\nLatestJobTableBasedOnBackupItem()\\r\\n// To Exclude NaN from Search filter\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| parse ContainerNameWithBackupItemName with ExtractedContainerName:string \\\"/\\\" ExtractedBackupItemName:string\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ExtractedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  ExtractedBackupItemName contains (BI_search)\\r\\n| where JobUniqueId != \\\"\\\" or ContainerNameWithBackupItemName != \\\"\\\"\\r\\n}; \\r\\nlet JobMetric = ()\\r\\n{\\r\\n// Calculate percentage\\r\\nLatestJobTable\\r\\n| extend failed=iff(JobStatus == \\\"Failed\\\" , 1 , 0)\\r\\n| extend record = iff(JobUniqueId != \\\"\\\", 1, 0)  // to be used for total row count\\r\\n| summarize FailureCount =sum(failed), TotalCount=sum(record), AvgDataTransferred =avg(DataTransferredInMB), AvgJobDuration = avg(JobDurationInSecs)/3600, ContainerNameWithBackupItemName = any(ContainerNameWithBackupItemName), \\r\\nExtractedBackupItemName = any(ExtractedBackupItemName), ExtractedContainerName = any(ExtractedContainerName), BMSTypeWithBackupItemType = any(BMSTypeWithBackupItemType), ResourceId = any(ResourceId) by BackupItemUniqueId\\r\\n| extend SuccessPercent = ((TotalCount - FailureCount) *100)/todouble(TotalCount)\\r\\n};\\r\\nJobMetric\\r\\n| summarize c=count()\\r\\n| project num = (c-1)/{JobMetricRowsPerGrid} + 1\\r\\n| project nums = range(1,num,1), num\\r\\n| mvexpand nums\\r\\n| project nums = tostring(nums), num = strcat(tostring(nums),\\\" of \\\",tostring(num))\",\"crossComponentResources\":[\"{Workspaces}\"],\"value\":\"1\",\"typeSettings\":{\"additionalResourceOptions\":[]},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"above\",\"doNotRunWhenHidden\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}",
	"customWidth": "90",
	"conditionalVisibility": {
	  "parameterName": "TabName",
	  "comparison": "isEqualTo",
	  "value": "JobDistribution"
	},
	"conditionalVisibilities": [
	  {
		"parameterName": "TabName",
		"comparison": "isEqualTo",
		"value": "JobDistribution"
	  },
	  {
		"parameterName": "Workspaces",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "ErrorHandle",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "CustomBMSTypeParam",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "BMSTypeWithBackupItemTypeParam",
		"comparison": "isNotEqualTo"
	  }
	],
	"name": "parameters - 7",
	"styleSettings": {
	  "margin": "-23px 0% 0% 0%",
	  "padding": "0% 0% 0% 0%"
	}
  },
  {
	"type": 3,
	"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used  ******************** Using ExtRange For artifacts ******************************\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet ExtRangeStart = RangeStart + 36h;\\r\\nlet ExtRangeEnd = RangeEnd + 36h;\\r\\n//search\\r\\nlet Item_search =  @\\\"{ContainerNameWithBackupItemName}\\\";\\r\\nlet ItemArray = split(Item_search, \\\";\\\");\\r\\nlet ItemArray_length = array_length(ItemArray);\\r\\nlet BI_search = iff(ItemArray_length == 2, ItemArray[1], ItemArray[0] );\\r\\nlet Container_search = iff(ItemArray_length == 2, ItemArray[0], \\\"\\\");  \\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupManagementServerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupManagementServer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\\r\\n| project OldBackupManagementServerUniqueId = columnifexists(\\\"BackupManagmentServerUniqueId_s\\\", \\\"\\\"), NewBackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),  BackupManagementServerName = columnifexists(\\\"BackupManagementServerName_s\\\", \\\"\\\"), AzureBackupAgentVersion = columnifexists(\\\"AzureBackupAgentVersion_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), ResourceId, TimeGenerated\\r\\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \\\"\\\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \\r\\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupManagementServerTable =CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupManagementServer\\\" and State != \\\"Deleted\\\"\\r\\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet JobUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet JobTable = AzureDiagnostics \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Job\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| project JobOperation = columnifexists(\\\"JobOperation_s\\\", \\\"\\\") , JobOperationSubType = columnifexists(\\\"JobOperationSubType_s\\\", \\\"\\\"), JobUniqueIdGuid = columnifexists(\\\"JobUniqueId_g\\\", \\\"\\\") , JobUniqueIdStr = columnifexists(\\\"JobUniqueId_s\\\", \\\"\\\"),\\r\\nProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\",\\\"\\\"), AdHocOrScheduledJob = columnifexists(\\\"AdHocOrScheduledJob_s\\\",\\\"\\\"), RecoveryJobDestination = columnifexists(\\\"RecoveryJobDestination_s\\\",\\\"\\\"),\\r\\nRecoveryJobRPDateTime = todatetime(columnifexists(\\\"RecoveryJobRPDateTime_s\\\",\\\"\\\")), RecoveryJobRPLocation = columnifexists(\\\"RecoveryJobRPLocation_s\\\",\\\"\\\"), RecoveryLocationType = columnifexists(\\\"RecoveryLocationType_s\\\",\\\"\\\"),\\r\\nBackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\",\\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\",\\\"\\\"), VaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\",\\\"\\\"),\\r\\nJobStatus = columnifexists(\\\"JobStatus_s\\\",\\\"\\\"), JobFailureCode = columnifexists(\\\"JobFailureCode_s\\\",\\\"\\\"), JobStartDateTime = todatetime(columnifexists(\\\"JobStartDateTime_s\\\",\\\"\\\")), JobDurationInSecs = todouble(columnifexists(\\\"JobDurationInSecs_s\\\", \\\"\\\")),\\r\\nDataTransferredInMB = todouble(columnifexists(\\\"DataTransferredInMB_s\\\",\\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\",\\\"\\\"), TimeGenerated, ResourceId\\r\\n| where not((JobOperation == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\")) \\r\\n| extend JobUniqueId = iff(JobUniqueIdGuid == \\\"\\\", JobUniqueIdStr, JobUniqueIdGuid) \\r\\n| project-away JobUniqueIdGuid, JobUniqueIdStr\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet JobUnderResourceSpecific = ()\\r\\n{\\r\\nlet JobTable = AddonAzureBackupJobs \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Job\\\" \\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| where not((JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\"))\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet TotalProtectedContainerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(ProtectedContainerUnderAzureDiagnostics()),\\r\\n(ProtectedContainerUnderResourceSpecific())\\r\\n| where ProtectedContainerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\"), ProtectedContainerUniqueId, ResourceId\\r\\n// BackupItemName Not applicable\\r\\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName, ResourceId \\r\\n};\\r\\nlet TotalBackupManagementServerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(BackupManagementServerUnderAzureDiagnostics()),\\r\\n(BackupManagementServerUnderResourceSpecific())\\r\\n| where BackupManagementServerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = \\\"NaN\\\", BackupManagementServerUniqueId, ResourceId\\r\\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName, ResourceId\\r\\n};\\r\\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated, ResourceId\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType), ResourceId};\\r\\nlet LatestBackupItemWithProtectedContainerTable = () \\r\\n{\\r\\nTotalBackupItemDimensionTable\\r\\n| join kind= inner (CombinedTable | union isfuzzy = true   \\r\\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\\r\\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n// Handle AG container\\r\\n| project ProtectedContainerName = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\" and isempty(ProtectedContainerName)),split(BackupItemName,\\\";\\\")[0],ProtectedContainerName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ProtectedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  BackupItemName contains (BI_search)\\r\\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestBackupItemInfoTable = (){\\r\\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnBackupItem = (){\\r\\n CombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n)\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId = BackupItemUniqueId1, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnProtectedContainer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnBackupManagementServer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId, ResourceId\\r\\n};\\r\\nlet LatestJobTable = ()\\r\\n{ \\r\\n// Showing only BackupItem based Jobs\\r\\nLatestJobTableBasedOnBackupItem()\\r\\n// To Exclude NaN from Search filter\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| parse ContainerNameWithBackupItemName with ExtractedContainerName:string \\\"/\\\" ExtractedBackupItemName:string\\r\\n| where isempty(Container_search) or Container_search == \\\"*\\\" or ExtractedContainerName contains (Container_search)\\r\\n| where isempty(BI_search) or BI_search == \\\"*\\\" or  ExtractedBackupItemName contains (BI_search)\\r\\n| where JobUniqueId != \\\"\\\" or ContainerNameWithBackupItemName != \\\"\\\"\\r\\n}; \\r\\nlet JobMetric = ()\\r\\n{\\r\\n// Calculate percentage\\r\\nLatestJobTable\\r\\n| extend failed=iff(JobStatus == \\\"Failed\\\" , 1 , 0)\\r\\n| extend record = iff(JobUniqueId != \\\"\\\", 1, 0)  // to be used for total row count\\r\\n| summarize FailureCount =sum(failed), TotalCount=sum(record), AvgDataTransferred =avg(DataTransferredInMB), AvgJobDuration = avg(JobDurationInSecs)/3600, ContainerNameWithBackupItemName = any(ContainerNameWithBackupItemName), \\r\\nExtractedBackupItemName = any(ExtractedBackupItemName), ExtractedContainerName = any(ExtractedContainerName), BMSTypeWithBackupItemType = any(BMSTypeWithBackupItemType), ResourceId = any(ResourceId) by BackupItemUniqueId\\r\\n| extend SuccessPercent = ((TotalCount - FailureCount) *100)/todouble(TotalCount)\\r\\n};\\r\\nJobMetric\\r\\n| extend TempColumn = column_ifexists(tostring('{JobMetricSortBy}'), \\\"SuccessPercent\\\")\\r\\n| extend ColumnToBeSorted = iff(tostring('{JobMetricOrder}') == \\\"Ascending\\\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\\r\\n| sort by ColumnToBeSorted asc nulls last, BackupItemUniqueId asc\\r\\n| extend row_num = row_number()\\r\\n| extend page_num = tostring(((row_num-1)/{JobMetricRowsPerGrid} + 1))\\r\\n| where page_num has ('{JobMetricPageNumber}') or '*' in ('{JobMetricPageNumber}')\\r\\n| extend prefix = array_strcat(array_split(split(ResourceId,\\\"/\\\"), 4)[0] ,\\\"/\\\")\\r\\n| extend containerNameString = iff((split(ContainerNameWithBackupItemName, \\\"/\\\")[0] != \\\"\\\" and array_length(split((split(ContainerNameWithBackupItemName, \\\"/\\\")[0]),\\\";\\\")) == 3), split(ContainerNameWithBackupItemName,\\\"/\\\")[0], \\\"\\\")\\r\\n| parse containerNameString with entityType:string \\\";\\\" rgName:string \\\";\\\" entityName:string\\r\\n| extend entityTypeForAzureStorageUrl = iff(BMSTypeWithBackupItemType == \\\"AzureStorage/AzureFileShare\\\", iff(entityType == \\\"storage\\\", \\\"/Microsoft.Storage/storageAccounts/\\\", \\\"/Microsoft.ClassicStorage/storageAccounts/\\\"), \\\"\\\")\\r\\n| extend entityTypeForIaaSVMUrl = iff(BMSTypeWithBackupItemType == \\\"IaaSVM/VM\\\", iff(entityType =~ \\\"iaasvmcontainerv2\\\", \\\"/Microsoft.Compute/virtualMachines/\\\", \\\"/Microsoft.ClassicCompute/virtualMachines/\\\"), \\\"\\\")\\r\\n| extend entityTypeForAzureWorkloadUrl = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SAPHanaDatabase\\\" or BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\"), iff(entityType =~ \\\"compute\\\", \\\"/Microsoft.Compute/virtualMachines/\\\", \\\"/Microsoft.ClassicCompute/virtualMachines/\\\"), \\\"\\\")\\r\\n| extend AzureResource = iff(BMSTypeWithBackupItemType startswith \\\"DPM\\\" or BMSTypeWithBackupItemType startswith \\\"MAB\\\", \\\"\\\" , iff(containerNameString != \\\"\\\", strcat(prefix, \\\"/\\\", rgName, \\\"/providers\\\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId))\\r\\n| extend BackupItemLink =  iff (BMSTypeWithBackupItemType has \\\"IaaSVM/VM\\\", strcat(ResourceId,\\\"/backupFabrics/Azure/protectionContainers/IaasVMContainer;\\\", ExtractedContainerName, \\\"/protectedItems/VM;\\\", ExtractedContainerName),\\r\\niff(BMSTypeWithBackupItemType has \\\"AzureStorage/AzureFileShare\\\", strcat(ResourceId,\\\"/backupFabrics/Azure/protectionContainers/StorageContainer;\\\", ExtractedContainerName, \\\"/protectedItems/AzureFileShare;\\\", ExtractedBackupItemName) , \\r\\niff(BMSTypeWithBackupItemType has \\\"AzureWorkload/SQLDataBase\\\", strcat(ResourceId,\\\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\\\", ExtractedContainerName, \\\"/protectedItems/SQLDataBase;\\\", ExtractedBackupItemName) , \\r\\niff(BMSTypeWithBackupItemType has \\\"AzureWorkload/SAPHanaDatabase\\\", strcat(ResourceId,\\\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\\\", ExtractedContainerName, \\\"/protectedItems/SAPHanaDatabase;\\\", ExtractedBackupItemName), \\\"\\\"))))\\r\\n|  extend container_array = split(ExtractedContainerName,\\\";\\\"), backupitem_array = split(ExtractedBackupItemName, \\\";\\\")\\r\\n|  extend container_arraylen = array_length(container_array), backupitem_arraylen = array_length(backupitem_array)\\r\\n| project ExtractedBackupItemName = backupitem_array[(backupitem_arraylen-1)], ExtractedContainerName = container_array[(container_arraylen-1)], ContainerResourceGroup = iff(container_arraylen == 3, container_array[(container_arraylen-2)], \\\"(none)\\\"), FailureCount,  AvgDataTransferred = iff( (isnan(AvgDataTransferred) or isinf(AvgDataTransferred) or isempty(AvgDataTransferred)), \\\"-\\\", tostring(round(AvgDataTransferred,2))) ,AvgJobDuration = iff( (isnan(AvgJobDuration) or isinf(AvgJobDuration) or isempty(AvgJobDuration)), \\\"-\\\", tostring(round(AvgJobDuration,2))), SuccessPercent = iff( (isnan(SuccessPercent) or isinf(SuccessPercent) or isempty(SuccessPercent)), \\\"-\\\", strcat(tostring(round(SuccessPercent,2)), \\\" %\\\")), AzureResource, BackupItemLink, TotalCount, ContainerNameWithBackupItemName, TempColumn, ColumnToBeSorted\",\"size\":3,\"title\":\"Distribution of Jobs in Period by Backup Item\",\"noDataMessage\":\"No records found for the selected time range and scope\",\"exportFieldName\":\"ContainerNameWithBackupItemName\",\"exportParameterName\":\"SelectedContainerNameWithBackupItemName\",\"exportDefaultValue\":\"*\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ExtractedBackupItemName\",\"formatter\":16,\"formatOptions\":{\"linkColumn\":\"BackupItemLink\",\"linkTarget\":\"Resource\",\"showIcon\":true}},{\"columnMatch\":\"ExtractedContainerName\",\"formatter\":1,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ContainerResourceGroup\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"FailureCount\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"showIcon\":true}},{\"columnMatch\":\"AvgDataTransferred\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blue\",\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"minimumFractionDigits\":2,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"AvgJobDuration\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"minimumFractionDigits\":2,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"SuccessPercent\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"linkTarget\":\"Url\",\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"minimumFractionDigits\":2,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"AzureResource\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"BackupItemLink\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"TotalCount\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ContainerNameWithBackupItemName\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"TempColumn\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ColumnToBeSorted\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"finalUrl\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"BMSTypeWithBackupItemType\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"row_num\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"page_num\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}}],\"labelSettings\":[{\"columnId\":\"ExtractedBackupItemName\",\"label\":\"Backup Item Name\"},{\"columnId\":\"ExtractedContainerName\",\"label\":\"Container Name\"},{\"columnId\":\"ContainerResourceGroup\",\"label\":\"Backup Item Resource Group\"},{\"columnId\":\"FailureCount\",\"label\":\"# Jobs Failed\"},{\"columnId\":\"AvgDataTransferred\",\"label\":\"Avg Data Transferred (MB)\"},{\"columnId\":\"AvgJobDuration\",\"label\":\"Avg Job Duration (hrs)\"},{\"columnId\":\"SuccessPercent\",\"label\":\"Job Success %\"},{\"columnId\":\"AzureResource\",\"label\":\"Azure Resource\"}]}}",
	"conditionalVisibility": {
	  "parameterName": "TabName",
	  "comparison": "isEqualTo",
	  "value": "JobDistribution"
	},
	"conditionalVisibilities": [
	  {
		"parameterName": "TabName",
		"comparison": "isEqualTo",
		"value": "JobDistribution"
	  },
	  {
		"parameterName": "CustomBMSTypeParam",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "ErrorHandle",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "BMSTypeWithBackupItemTypeParam",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "Workspaces",
		"comparison": "isNotEqualTo"
	  }
	],
	"showPin": true,
	"name": "JobDistribution-Grid1",
	"styleSettings": {
	  "padding": "0% 0% 0% 0%",
	  "showBorder": true
	}
  },
  {
	"type": 1,
	"content": "{\"json\":\"<span style=\\\"font-size:12px;font-style:italic\\\"> Click on any row above to see details of all jobs for that backup item in the seletced time range. </span>\"}",
	"conditionalVisibility": {
	  "parameterName": "TabName",
	  "comparison": "isEqualTo",
	  "value": "JobDistribution"
	},
	"conditionalVisibilities": [
	  {
		"parameterName": "TabName",
		"comparison": "isEqualTo",
		"value": "JobDistribution"
	  },
	  {
		"parameterName": "BMSTypeWithBackupItemTypeParam",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "Workspaces",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "ErrorHandle",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "CustomBMSTypeParam",
		"comparison": "isNotEqualTo"
	  }
	],
	"name": "text - 66"
  },
  {
	"type": 9,
	"content": "{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Workspaces}\"],\"parameters\":[{\"id\":\"5dc2a074-b510-44f2-9530-cfcbd159b59c\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"JobMetricSortBy2\",\"label\":\"Sort By\",\"type\":2,\"description\":\"Use to sort by a certain column\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[{ \\\"value\\\": \\\"JobDurationInSecs\\\", \\\"label\\\": \\\"Job Duration (hrs)\\\" },\\r\\n{ \\\"value\\\": \\\"DataTransferredInMB\\\", \\\"label\\\": \\\"Data Transferred (MB)\\\", \\\"selected\\\": \\\"true\\\" }]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"df3cc03c-53f7-4523-a29b-e50bf1b6d922\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"JobMetricOrder2\",\"label\":\"Order\",\"type\":2,\"description\":\"Use to specify the sort order: Ascending/Descending\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"Ascending\\\"},\\r\\n    { \\\"value\\\":\\\"Descending\\\", \\\"selected\\\":true}\\r\\n]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"90453a1f-7fd0-45d4-a2ef-cd36b4a834e0\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"JobMetricRowsPerGrid2\",\"label\":\"Rows per Page\",\"type\":2,\"description\":\"Number of rows to display in grid view\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":10, \\\"label\\\":\\\"10\\\", \\\"selected\\\":true  },\\r\\n    { \\\"value\\\":25, \\\"label\\\":\\\"25\\\" },\\r\\n    { \\\"value\\\":50, \\\"label\\\":\\\"50\\\" },\\r\\n    { \\\"value\\\":100, \\\"label\\\":\\\"100\\\" },\\r\\n    { \\\"value\\\":250, \\\"label\\\":\\\"250\\\" },\\r\\n    { \\\"value\\\":500, \\\"label\\\":\\\"500\\\" },\\r\\n    { \\\"value\\\":1000, \\\"label\\\":\\\"1000\\\" }\\r\\n]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"356e4bfd-7e3d-4e48-89c0-b03efb72b9dc\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"JobMetricPageNumber2\",\"label\":\"Page\",\"type\":2,\"description\":\"Select Page Number\",\"isRequired\":true,\"query\":\"// Time variable used ******************** Using ExtRange For artifacts ******************************\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet ExtRangeStart = RangeStart + 36h;\\r\\nlet ExtRangeEnd = RangeEnd + 36h;\\r\\n// BMSTypeWithBackupItemType MappingTable\\r\\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\\r\\n    [ \\\"AzureWorkload/SAPHanaDatabase\\\", \\\"SAP HANA in Azure VM/SAP HANA in Azure VM\\\",\\r\\n      \\\"AzureWorkload/SQLDataBase\\\", \\\"SQL in Azure VM/SQL Database\\\",\\r\\n      \\\"IaaSVM/VM\\\", \\\"Azure Virtual Machine/Azure VM\\\",\\r\\n\\t  \\\"AzureStorage/AzureFileShare\\\", \\\"Azure Storage (Azure Files)/Azure File Share\\\",\\r\\n\\t  \\\"AzureWorkload/SAPAseDatabase\\\", \\\"SAP ASE in Azure VM/SAP ASE in Azure VM\\\",\\r\\n\\t  \\\"MAB/FileFolder\\\", \\\"Azure Backup Agent/Files and Folder\\\",\\r\\n\\t  \\\"DPM/SQLDB\\\", \\\"DPM/SQL Database\\\",\\r\\n\\t  \\\"DPM/VMwareVM\\\", \\\"DPM/VMWare VM\\\",\\r\\n\\t  \\\"DPM/HyperVVM\\\", \\\"DPM/Hyper-V VM\\\",\\r\\n\\t  \\\"DPM/FileFolder\\\", \\\"DPM/Files and Folder\\\",\\r\\n\\t  \\\"DPM/Client\\\", \\\"DPM/Files & Folder\\\",\\r\\n\\t  \\\"DPM/SystemState\\\", \\\"DPM/System State\\\",\\r\\n\\t  \\\"DPM/Sharepoint\\\", \\\"DPM/Sharepoint Database\\\",\\r\\n\\t  \\\"DPM/Exchange\\\", \\\"DPM/Exchange Mailbox Database\\\"];\\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupManagementServerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupManagementServer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\\r\\n| project OldBackupManagementServerUniqueId = columnifexists(\\\"BackupManagmentServerUniqueId_s\\\", \\\"\\\"), NewBackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),  BackupManagementServerName = columnifexists(\\\"BackupManagementServerName_s\\\", \\\"\\\"), AzureBackupAgentVersion = columnifexists(\\\"AzureBackupAgentVersion_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), ResourceId, TimeGenerated\\r\\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \\\"\\\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \\r\\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupManagementServerTable =CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupManagementServer\\\" and State != \\\"Deleted\\\"\\r\\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet JobUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet JobTable = AzureDiagnostics \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Job\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| project JobOperation = columnifexists(\\\"JobOperation_s\\\", \\\"\\\") , JobOperationSubType = columnifexists(\\\"JobOperationSubType_s\\\", \\\"\\\"), JobUniqueIdGuid = columnifexists(\\\"JobUniqueId_g\\\", \\\"\\\") , JobUniqueIdStr = columnifexists(\\\"JobUniqueId_s\\\", \\\"\\\"),\\r\\nProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\",\\\"\\\"), AdHocOrScheduledJob = columnifexists(\\\"AdHocOrScheduledJob_s\\\",\\\"\\\"), RecoveryJobDestination = columnifexists(\\\"RecoveryJobDestination_s\\\",\\\"\\\"),\\r\\nRecoveryJobRPDateTime = todatetime(columnifexists(\\\"RecoveryJobRPDateTime_s\\\",\\\"\\\")), RecoveryJobRPLocation = columnifexists(\\\"RecoveryJobRPLocation_s\\\",\\\"\\\"), RecoveryLocationType = columnifexists(\\\"RecoveryLocationType_s\\\",\\\"\\\"),\\r\\nBackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\",\\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\",\\\"\\\"), VaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\",\\\"\\\"),\\r\\nJobStatus = columnifexists(\\\"JobStatus_s\\\",\\\"\\\"), JobFailureCode = columnifexists(\\\"JobFailureCode_s\\\",\\\"\\\"), JobStartDateTime = todatetime(columnifexists(\\\"JobStartDateTime_s\\\",\\\"\\\")), JobDurationInSecs = todouble(columnifexists(\\\"JobDurationInSecs_s\\\", \\\"\\\")),\\r\\nDataTransferredInMB = todouble(columnifexists(\\\"DataTransferredInMB_s\\\",\\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\",\\\"\\\"), TimeGenerated, ResourceId\\r\\n| where not((JobOperation == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\")) \\r\\n| extend JobUniqueId = iff(JobUniqueIdGuid == \\\"\\\", JobUniqueIdStr, JobUniqueIdGuid) \\r\\n| project-away JobUniqueIdGuid, JobUniqueIdStr\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet JobUnderResourceSpecific = ()\\r\\n{\\r\\nlet JobTable = AddonAzureBackupJobs \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Job\\\" \\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| where not((JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\"))\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet TotalProtectedContainerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(ProtectedContainerUnderAzureDiagnostics()),\\r\\n(ProtectedContainerUnderResourceSpecific())\\r\\n| where ProtectedContainerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\"), ProtectedContainerUniqueId \\r\\n// BackupItemName Not applicable\\r\\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupManagementServerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(BackupManagementServerUnderAzureDiagnostics()),\\r\\n(BackupManagementServerUnderResourceSpecific())\\r\\n| where BackupManagementServerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = \\\"NaN\\\", BackupManagementServerUniqueId\\r\\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType)};\\r\\nlet LatestBackupItemWithProtectedContainerTable = () \\r\\n{\\r\\nTotalBackupItemDimensionTable\\r\\n| join kind= inner (CombinedTable | union isfuzzy = true   \\r\\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\\r\\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n| where ContainerNameWithBackupItemName == (@\\\"{SelectedContainerNameWithBackupItemName}\\\") or '*' in (@\\\"{SelectedContainerNameWithBackupItemName}\\\")\\r\\n};\\r\\nlet LatestBackupItemInfoTable = (){\\r\\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnBackupItem = (){\\r\\n CombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n)\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId = BackupItemUniqueId1, JobStartDateTime, AdHocOrScheduledJob, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnProtectedContainer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnBackupManagementServer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId \\r\\n};\\r\\nlet LatestJobTable = ()\\r\\n{LatestJobTableBasedOnBackupItem()\\r\\n// To Exclude NaN from Search filter\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| where ContainerNameWithBackupItemName == (@\\\"{SelectedContainerNameWithBackupItemName}\\\") or '*' in (@\\\"{SelectedContainerNameWithBackupItemName}\\\")\\r\\n// Show only BackupItems which has Jobs\\r\\n| where JobUniqueId != \\\"\\\" \\r\\n}; \\r\\nLatestJobTable\\r\\n| summarize c=count()\\r\\n| project num = (c-1)/{JobMetricRowsPerGrid2} + 1\\r\\n| project nums = range(1,num,1), num\\r\\n| mvexpand nums\\r\\n| project nums = tostring(nums), num = strcat(tostring(nums),\\\" of \\\",tostring(num))\",\"crossComponentResources\":[\"{Workspaces}\"],\"value\":\"1\",\"typeSettings\":{\"additionalResourceOptions\":[]},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"above\",\"doNotRunWhenHidden\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}",
	"conditionalVisibility": {
	  "parameterName": "Workspaces",
	  "comparison": "isNotEqualTo"
	},
	"conditionalVisibilities": [
	  {
		"parameterName": "Workspaces",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "SelectedContainerNameWithBackupItemName",
		"comparison": "isNotEqualTo",
		"value": "*"
	  },
	  {
		"parameterName": "ErrorHandle",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "CustomBMSTypeParam",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "BMSTypeWithBackupItemTypeParam",
		"comparison": "isNotEqualTo"
	  }
	],
	"name": "JobDistribution-Grid2ParameterBlock"
  },
  {
	"type": 3,
	"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used  ******************** Using ExtRange For artifacts ******************************\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet ExtRangeStart = RangeStart + 36h;\\r\\nlet ExtRangeEnd = RangeEnd + 36h;\\r\\n// BMSTypeWithBackupItemType MappingTable\\r\\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\\r\\n    [ \\\"AzureWorkload/SAPHanaDatabase\\\", \\\"SAP HANA in Azure VM/SAP HANA in Azure VM\\\",\\r\\n      \\\"AzureWorkload/SQLDataBase\\\", \\\"SQL in Azure VM/SQL Database\\\",\\r\\n      \\\"IaaSVM/VM\\\", \\\"Azure Virtual Machine/Azure VM\\\",\\r\\n\\t  \\\"AzureStorage/AzureFileShare\\\", \\\"Azure Storage (Azure Files)/Azure File Share\\\",\\r\\n\\t  \\\"AzureWorkload/SAPAseDatabase\\\", \\\"SAP ASE in Azure VM/SAP ASE in Azure VM\\\",\\r\\n\\t  \\\"MAB/FileFolder\\\", \\\"Azure Backup Agent/Files and Folder\\\",\\r\\n\\t  \\\"DPM/SQLDB\\\", \\\"DPM/SQL Database\\\",\\r\\n\\t  \\\"DPM/VMwareVM\\\", \\\"DPM/VMWare VM\\\",\\r\\n\\t  \\\"DPM/HyperVVM\\\", \\\"DPM/Hyper-V VM\\\",\\r\\n\\t  \\\"DPM/FileFolder\\\", \\\"DPM/Files and Folder\\\",\\r\\n\\t  \\\"DPM/Client\\\", \\\"DPM/Files & Folder\\\",\\r\\n\\t  \\\"DPM/SystemState\\\", \\\"DPM/System State\\\",\\r\\n\\t  \\\"DPM/Sharepoint\\\", \\\"DPM/Sharepoint Database\\\",\\r\\n\\t  \\\"DPM/Exchange\\\", \\\"DPM/Exchange Mailbox Database\\\"];\\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupManagementServerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupManagementServer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\\r\\n| project OldBackupManagementServerUniqueId = columnifexists(\\\"BackupManagmentServerUniqueId_s\\\", \\\"\\\"), NewBackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),  BackupManagementServerName = columnifexists(\\\"BackupManagementServerName_s\\\", \\\"\\\"), AzureBackupAgentVersion = columnifexists(\\\"AzureBackupAgentVersion_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), ResourceId, TimeGenerated\\r\\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \\\"\\\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \\r\\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupManagementServerUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupManagementServerTable =CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupManagementServer\\\" and State != \\\"Deleted\\\"\\r\\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\\r\\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupManagementServerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet BackupItemAssociationWithProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific | project ProtectedContainerUniqueId, ProtectedContainerName\\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId, ProtectedContainerName, PolicyUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId,  VaultUniqueId, BackupManagementType, \\r\\nTimeGenerated\\r\\n};\\r\\nlet JobUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet JobTable = AzureDiagnostics \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Job\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| project JobOperation = columnifexists(\\\"JobOperation_s\\\", \\\"\\\") , JobOperationSubType = columnifexists(\\\"JobOperationSubType_s\\\", \\\"\\\"), JobUniqueIdGuid = columnifexists(\\\"JobUniqueId_g\\\", \\\"\\\") , JobUniqueIdStr = columnifexists(\\\"JobUniqueId_s\\\", \\\"\\\"),\\r\\nProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\",\\\"\\\"), AdHocOrScheduledJob = columnifexists(\\\"AdHocOrScheduledJob_s\\\",\\\"\\\"), RecoveryJobDestination = columnifexists(\\\"RecoveryJobDestination_s\\\",\\\"\\\"),\\r\\nRecoveryJobRPDateTime = todatetime(columnifexists(\\\"RecoveryJobRPDateTime_s\\\",\\\"\\\")), RecoveryJobRPLocation = columnifexists(\\\"RecoveryJobRPLocation_s\\\",\\\"\\\"), RecoveryLocationType = columnifexists(\\\"RecoveryLocationType_s\\\",\\\"\\\"),\\r\\nBackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\",\\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\",\\\"\\\"), VaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\",\\\"\\\"),\\r\\nJobStatus = columnifexists(\\\"JobStatus_s\\\",\\\"\\\"), JobFailureCode = columnifexists(\\\"JobFailureCode_s\\\",\\\"\\\"), JobStartDateTime = todatetime(columnifexists(\\\"JobStartDateTime_s\\\",\\\"\\\")), JobDurationInSecs = todouble(columnifexists(\\\"JobDurationInSecs_s\\\", \\\"\\\")),\\r\\nDataTransferredInMB = todouble(columnifexists(\\\"DataTransferredInMB_s\\\",\\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\",\\\"\\\"), TimeGenerated, ResourceId\\r\\n| where not((JobOperation == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\")) \\r\\n| extend JobUniqueId = iff(JobUniqueIdGuid == \\\"\\\", JobUniqueIdStr, JobUniqueIdGuid) \\r\\n| project-away JobUniqueIdGuid, JobUniqueIdStr\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet JobUnderResourceSpecific = ()\\r\\n{\\r\\nlet JobTable = AddonAzureBackupJobs \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Job\\\" \\r\\n// Exclude Log Jobs and InProgress Jobs\\r\\n| where not((JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Log\\\") or (JobOperation  == \\\"Backup\\\" and JobOperationSubType == \\\"Recovery point_Log\\\") or (JobStatus == \\\"InProgress\\\"))\\r\\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   JobTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet TotalProtectedContainerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(ProtectedContainerUnderAzureDiagnostics()),\\r\\n(ProtectedContainerUnderResourceSpecific())\\r\\n| where ProtectedContainerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\"), ProtectedContainerUniqueId \\r\\n// BackupItemName Not applicable\\r\\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupManagementServerTable = ( ) \\r\\n{\\r\\nCombinedTable | union isfuzzy = true \\r\\n(BackupManagementServerUnderAzureDiagnostics()),\\r\\n(BackupManagementServerUnderResourceSpecific())\\r\\n| where BackupManagementServerUniqueId != \\\"\\\"\\r\\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\"), BackupItemName = \\\"NaN\\\", ContainerNameWithBackupItemName = \\\"NaN\\\", BackupManagementServerUniqueId\\r\\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName \\r\\n};\\r\\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType)};\\r\\nlet LatestBackupItemWithProtectedContainerTable = () \\r\\n{\\r\\nTotalBackupItemDimensionTable\\r\\n| join kind= inner (CombinedTable | union isfuzzy = true   \\r\\n(BackupItemAssociationWithProtectedContainerUnderAzureDiagnostics()),\\r\\n(BackupItemAssociationWithProtectedContainerUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n// Handle AG container\\r\\n| project ProtectedContainerName = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\" and isempty(ProtectedContainerName)),split(BackupItemName,\\\";\\\")[0],ProtectedContainerName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId,  BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n| project ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemUniqueId,  BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, ResourceId\\r\\n| where ContainerNameWithBackupItemName == (@\\\"{SelectedContainerNameWithBackupItemName}\\\") or '*' in (@\\\"{SelectedContainerNameWithBackupItemName}\\\")\\r\\n};\\r\\nlet LatestBackupItemInfoTable = (){\\r\\nLatestBackupItemWithProtectedContainerTable  | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnBackupItem = (){\\r\\n CombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n)\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= rightouter (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupItemUniqueId = BackupItemUniqueId1, JobStartDateTime, AdHocOrScheduledJob, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnProtectedContainer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId\\r\\n};\\r\\nlet LatestJobTableBasedOnBackupManagementServer = (){\\r\\nCombinedTable | union isfuzzy = true \\r\\n(JobUnderAzureDiagnostics()\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n),\\r\\n(JobUnderResourceSpecific()\\r\\n| where BackupItemUniqueId == \\\"\\\" and ProtectedContainerUniqueId == \\\"\\\"\\r\\n)\\r\\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\\r\\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\\r\\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\\r\\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\\r\\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\\r\\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId \\r\\n};\\r\\nlet LatestJobTable = ()\\r\\n{LatestJobTableBasedOnBackupItem()\\r\\n// To Exclude NaN from Search filter\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| where ContainerNameWithBackupItemName == (@\\\"{SelectedContainerNameWithBackupItemName}\\\") or '*' in (@\\\"{SelectedContainerNameWithBackupItemName}\\\")\\r\\n// Show only BackupItems which has Jobs\\r\\n| where JobUniqueId != \\\"\\\" \\r\\n}; \\r\\n//JobUniqueId*, BackupItemName*, TimeGenerated*, Failure Code*, Data Transferred*, Duration*, Adhoc, Operation* \\r\\nlet OutputTable = () {LatestJobTable\\r\\n| extend TempColumn = column_ifexists(tostring('{JobMetricSortBy2}'), \\\"DataTransferredInMB\\\")\\r\\n| extend ColumnToBeSorted = iff(tostring('{JobMetricOrder2}') == \\\"Ascending\\\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\\r\\n| sort by ColumnToBeSorted asc nulls last, JobUniqueId asc\\r\\n| extend row_num = row_number()\\r\\n| extend page_num = tostring(((row_num-1)/{JobMetricRowsPerGrid2} + 1))\\r\\n| where page_num has ('{JobMetricPageNumber2}') or '*' in ('{JobMetricPageNumber2}')\\r\\n| extend prefix = array_strcat(array_split(split(ResourceId,\\\"/\\\"), 4)[0] ,\\\"/\\\")\\r\\n| extend containerNameString = iff((split(ContainerNameWithBackupItemName, \\\"/\\\")[0] != \\\"\\\" and array_length(split((split(ContainerNameWithBackupItemName, \\\"/\\\")[0]),\\\";\\\")) == 3), split(ContainerNameWithBackupItemName,\\\"/\\\")[0], \\\"\\\")\\r\\n| parse containerNameString with entityType:string \\\";\\\" rgName:string \\\";\\\" entityName:string\\r\\n| extend entityTypeForAzureStorageUrl = iff(BMSTypeWithBackupItemType == \\\"AzureStorage/AzureFileShare\\\", iff(entityType == \\\"storage\\\", \\\"/Microsoft.Storage/storageAccounts/\\\", \\\"/Microsoft.ClassicStorage/storageAccounts/\\\"), \\\"\\\")\\r\\n| extend entityTypeForIaaSVMUrl = iff(BMSTypeWithBackupItemType == \\\"IaaSVM/VM\\\", iff(entityType =~ \\\"iaasvmcontainerv2\\\", \\\"/Microsoft.Compute/virtualMachines/\\\", \\\"/Microsoft.ClassicCompute/virtualMachines/\\\"), \\\"\\\")\\r\\n| extend entityTypeForAzureWorkloadUrl = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SAPHanaDatabase\\\" or BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\"), iff(entityType =~ \\\"compute\\\", \\\"/Microsoft.Compute/virtualMachines/\\\", \\\"/Microsoft.ClassicCompute/virtualMachines/\\\"), \\\"\\\")\\r\\n| extend AzureResource = iff(BMSTypeWithBackupItemType startswith \\\"DPM\\\" or BMSTypeWithBackupItemType startswith \\\"MAB\\\", \\\"\\\" , iff(containerNameString != \\\"\\\", strcat(prefix, \\\"/\\\", rgName, \\\"/providers\\\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId))\\r\\n| parse ContainerNameWithBackupItemName with ExtractedContainerName:string \\\"/\\\" ExtractedBackupItemName:string\\r\\n| extend BackupItemLink =  iff (BMSTypeWithBackupItemType has \\\"IaaSVM/VM\\\", strcat(ResourceId,\\\"/backupFabrics/Azure/protectionContainers/IaasVMContainer;\\\", ExtractedContainerName, \\\"/protectedItems/VM;\\\", ExtractedContainerName),\\r\\niff(BMSTypeWithBackupItemType has \\\"AzureStorage/AzureFileShare\\\", strcat(ResourceId,\\\"/backupFabrics/Azure/protectionContainers/StorageContainer;\\\", ExtractedContainerName, \\\"/protectedItems/AzureFileShare;\\\", ExtractedBackupItemName) , \\r\\niff(BMSTypeWithBackupItemType has \\\"AzureWorkload/SQLDataBase\\\", strcat(ResourceId,\\\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\\\", ExtractedContainerName, \\\"/protectedItems/SQLDataBase;\\\", ExtractedBackupItemName) , \\r\\niff(BMSTypeWithBackupItemType has \\\"AzureWorkload/SAPHanaDatabase\\\", strcat(ResourceId,\\\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\\\", ExtractedContainerName, \\\"/protectedItems/SAPHanaDatabase;\\\", ExtractedBackupItemName), \\\"\\\"))))\\r\\n|  extend container_array = split(ExtractedContainerName,\\\";\\\"), backupitem_array = split(ExtractedBackupItemName, \\\";\\\")\\r\\n|  extend container_arraylen = array_length(container_array), backupitem_arraylen = array_length(backupitem_array)\\r\\n| project ContainerNameWithBackupItemName, ExtractedBackupItemName = backupitem_array[(backupitem_arraylen-1)], ExtractedContainerName = container_array[(container_arraylen-1)], ContainerResourceGroup = iff(container_arraylen == 3, container_array[(container_arraylen-2)], \\\"(none)\\\"), BMSTypeWithBackupItemType = iff(BMSTypeWithBackupItemType == \\\"AzureWorkload/SAPHanaDatabase\\\", \\\"AzureWorkload/SAPHanaDB\\\", iff(BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\", \\\"AzureWorkload/SQLDB\\\",BMSTypeWithBackupItemType)), JobOperation, JobStatus = ( iff(JobStatus == \\\"Completed\\\", \\\"Succeeded\\\", iff(JobStatus == \\\"CompletedWithWarnings\\\", \\\"SucceededWithWarnings\\\", JobStatus))), JobUniqueId, JobStartDateTime, JobDuration=tostring(round((JobDurationInSecs/3600),2)), JobFailureCode, DataTransferredInMB = tostring(round(DataTransferredInMB,2)),  TempColumn, ColumnToBeSorted, AzureResource, BackupItemLink};\\r\\nlet CustomOutputTable = () {BMSTypeWithBackupItemTypeMappingTable\\r\\n| join kind= rightouter (OutputTable) \\r\\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\\r\\n| project ContainerNameWithBackupItemName, ExtractedBackupItemName, ExtractedContainerName, ContainerResourceGroup, BMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \\\"\\\",BMSTypeWithBackupItemType1 ,CustomBMSTypeWithBackupItemType ), JobOperation, JobStatus, JobUniqueId, JobStartDateTime, JobDuration, JobFailureCode, DataTransferredInMB,  TempColumn, ColumnToBeSorted, AzureResource, BackupItemLink\\r\\n| parse BMSTypeWithBackupItemType with ExtractedBMSType:string \\\"/\\\" ExtractedBackupItemType:string\\r\\n| project ContainerNameWithBackupItemName, ExtractedBackupItemName, ContainerResourceGroup, ExtractedContainerName,  JobOperation, JobStatus, JobUniqueId, JobStartDateTime, JobDuration, JobFailureCode, DataTransferredInMB,  TempColumn, ColumnToBeSorted, AzureResource, BackupItemLink, ExtractedBMSType, ExtractedBackupItemType\\r\\n};\\r\\nCustomOutputTable\",\"size\":3,\"title\":\"Jobs in Period ({$rowCount})\",\"noDataMessage\":\"No records found for the selected time range and scope\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ContainerNameWithBackupItemName\",\"formatter\":5,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true}},{\"columnMatch\":\"ExtractedBackupItemName\",\"formatter\":16,\"formatOptions\":{\"linkColumn\":\"BackupItemLink\",\"linkTarget\":\"Resource\",\"subTarget\":\"backupProtectedItems\",\"showIcon\":true},\"tooltipFormat\":{\"tooltip\":\"Name of the Backup Item\"}},{\"columnMatch\":\"ContainerResourceGroup\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ExtractedContainerName\",\"formatter\":1,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"JobOperation\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"JobStatus\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"JobUniqueId\",\"formatter\":5,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true}},{\"columnMatch\":\"JobStartDateTime\",\"formatter\":6,\"formatOptions\":{\"showIcon\":true},\"dateFormat\":{\"showUtcTime\":true,\"formatName\":\"shortDateTimePattern\"},\"tooltipFormat\":{\"tooltip\":\"Date and Time at which the job was triggered\"}},{\"columnMatch\":\"JobDuration\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"minimumFractionDigits\":2,\"maximumFractionDigits\":2}},\"tooltipFormat\":{\"tooltip\":\"Job Duration in hours\"}},{\"columnMatch\":\"JobFailureCode\",\"formatter\":1,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"DataTransferredInMB\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"minimumFractionDigits\":2,\"maximumFractionDigits\":2}},\"tooltipFormat\":{\"tooltip\":\"Amount of data transferred by the job\"}},{\"columnMatch\":\"TempColumn\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ColumnToBeSorted\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"AzureResource\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true},\"tooltipFormat\":{\"tooltip\":\"Azure Resource which contains the Backup Item. For Azure VM Backup, SQL in Azure VM Backup, or SAP HANA in Azure VM Backup - the Azure Resource is an Azure VM. For AzureFileShare Backup - the Azure Resource is an Azure Storage Account. Value of the column is <blank> for on-premises workloads.\"}},{\"columnMatch\":\"BackupItemLink\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ExtractedBMSType\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ExtractedBackupItemType\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"BMSTypeWithBackupItemType\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"finalUrl\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"BackupItemFriendlyName\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"AdHocOrScheduledJob\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"Job Start DateTime\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"JobCreationDate\",\"formatter\":6,\"formatOptions\":{\"showIcon\":true},\"dateFormat\":{\"showUtcTime\":true,\"formatName\":\"fullDateTimePattern\"}},{\"columnMatch\":\"JobCreationTime\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"FailureCount\",\"formatter\":1,\"formatOptions\":{\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"AvgDataTransferred\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"minimumFractionDigits\":2,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"AvgJobDuration\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"minimumFractionDigits\":2,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"SuccessPercent\",\"formatter\":18,\"formatOptions\":{\"linkTarget\":\"Url\",\"showIcon\":true,\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"100\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"<\",\"thresholdValue\":\"50\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"<\",\"thresholdValue\":\"100\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":null,\"text\":\"{0}{1}\"}]},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"row_num\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"page_num\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}}],\"labelSettings\":[{\"columnId\":\"ContainerNameWithBackupItemName\",\"label\":\"BackupItem FullName\"},{\"columnId\":\"ExtractedBackupItemName\",\"label\":\"Backup Item Name\"},{\"columnId\":\"ContainerResourceGroup\",\"label\":\"Backup Item Resource Group\"},{\"columnId\":\"ExtractedContainerName\",\"label\":\"Container Name\"},{\"columnId\":\"JobOperation\",\"label\":\"Job Operation\"},{\"columnId\":\"JobStatus\",\"label\":\"Job Status\"},{\"columnId\":\"JobUniqueId\",\"label\":\"Job Unique Id\"},{\"columnId\":\"JobStartDateTime\",\"label\":\"Job Start DateTime\"},{\"columnId\":\"JobDuration\",\"label\":\"Job Duration (hrs)\"},{\"columnId\":\"JobFailureCode\",\"label\":\"Job Failure Code\"},{\"columnId\":\"DataTransferredInMB\",\"label\":\"Data Transferred (MB)\"},{\"columnId\":\"AzureResource\",\"label\":\"Azure Resource\"},{\"columnId\":\"ExtractedBMSType\",\"label\":\"Backup Management Type\"},{\"columnId\":\"ExtractedBackupItemType\",\"label\":\"Backup Item Type\"}]}}",
	"conditionalVisibility": {
	  "parameterName": "Workspaces",
	  "comparison": "isNotEqualTo"
	},
	"conditionalVisibilities": [
	  {
		"parameterName": "Workspaces",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "SelectedContainerNameWithBackupItemName",
		"comparison": "isNotEqualTo",
		"value": "*"
	  },
	  {
		"parameterName": "ErrorHandle",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "CustomBMSTypeParam",
		"comparison": "isNotEqualTo"
	  },
	  {
		"parameterName": "BMSTypeWithBackupItemTypeParam",
		"comparison": "isNotEqualTo"
	  }
	],
	"showPin": true,
	"name": "JobDistribution-Grid2",
	"styleSettings": {
	  "showBorder": true
	}
  } 

  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}