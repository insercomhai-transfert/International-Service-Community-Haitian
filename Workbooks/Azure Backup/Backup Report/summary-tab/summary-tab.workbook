{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Subscriptions}"
        ],
        "parameters": [
          {
            "id": "d1f42f81-eb8f-4653-a0ff-38564d7487b4",
            "version": "KqlParameterItem/1.0",
            "name": "Subscriptions",
            "type": 6,
            "description": "Subscriptions to filter the list of workspaces",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": false,
              "selectAllValue": ""
            }
          },
          {
            "id": "2373a24f-ad32-4909-a7f6-59b373dcde6c",
            "version": "KqlParameterItem/1.0",
            "name": "Workspaces",
            "type": 5,
            "description": "LA Workspaces configured in vault diagnostic settings",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type =~ 'microsoft.operationalinsights/workspaces' | project id",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8c4ae44c-fa9a-4498-aedc-736a56e64b43",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "label": "Time Range",
            "type": 4,
            "description": "Time Range",
            "value": {
              "durationMs": 604800000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "bb7c8d78-cf0c-4b47-af95-1c07ac0f6829",
            "version": "KqlParameterItem/1.0",
            "name": "ErrorHandle",
            "label": "Error Handle",
            "type": 1,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Files & Folder\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\"];\r\nlet CustomBMSTypeParam = \"'Azure Backup Agent','Azure Storage (Azure Files)','Azure Virtual Machine','DPM','SAP ASE in Azure VM','SAP HANA in Azure VM','SQL in Azure VM'\";\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project  BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\") \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType \r\n};\r\nlet OutputTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| distinct BackupManagementType, BackupItemType\r\n| distinct strcat(BackupManagementType, \"/\", BackupItemType)\r\n| project BMSTypeWithBackupItemType = Column1};\r\nlet CustomOutputTable = () {BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\r\n| project BMSTypeWithBackupItemType1, CustomBMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1,CustomBMSTypeWithBackupItemType )};\r\nCustomOutputTable\r\n// convert to a list of internal names\r\n| project  s2 =  strcat(\"'\", CustomBMSTypeWithBackupItemType, \"'\"), s1 = CustomBMSTypeParam, s3 =  strcat(\"'\", BMSTypeWithBackupItemType1, \"'\") \r\n| mv-apply s2 = split(s2, \",\") to typeof(string) on (\r\n\twhere indexof(s1, substring(s2, 1, indexof(s2, \"/\") - 1)) >= 1)\r\n| summarize result = array_strcat(make_list(s3), \",\")\r\n| project result ",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "ab02c6b3-a9c9-4a3b-86fe-0694974335b0",
            "version": "KqlParameterItem/1.0",
            "name": "CustomBMSTypeParam",
            "label": "Backup Management Type",
            "type": 2,
            "description": "Backup Management Type",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "'Azure Backup Agent','Azure Storage (Azure Files)','Azure Virtual Machine','DPM','SAP ASE in Azure VM','SAP HANA in Azure VM','SQL in Azure VM'"
            },
            "jsonData": "[    \r\n\t\"Azure Backup Agent\",\r\n    \"Azure Storage (Azure Files)\",\r\n    \"Azure Virtual Machine\",\r\n    \"DPM\",\r\n    \"SAP ASE in Azure VM\",\r\n    \"SAP HANA in Azure VM\",\r\n    \"SQL in Azure VM\"\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "f61266ea-f32a-4b60-8eeb-f3b428ac4951",
            "version": "KqlParameterItem/1.0",
            "name": "BMSTypeWithBackupItemTypeParam",
            "type": 1,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Files & Folder\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\"];\r\n//let CustomBMSTypeParam = \"'SQL in Azure VM','Azure Virtual Machine','Azure Storage (Azure Files)','Azure Backup Agent','DPM'\";\r\nlet CustomBMSTypeParam = @\"{CustomBMSTypeParam}\";\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project  BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\") \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType \r\n};\r\nlet OutputTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| distinct BackupManagementType, BackupItemType\r\n| distinct strcat(BackupManagementType, \"/\", BackupItemType)\r\n| project BMSTypeWithBackupItemType = Column1};\r\nlet CustomOutputTable = () {BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\r\n| project BMSTypeWithBackupItemType1, CustomBMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1,CustomBMSTypeWithBackupItemType )};\r\nCustomOutputTable\r\n// convert to a list of internal names\r\n| project  s2 =  strcat(\"'\", CustomBMSTypeWithBackupItemType, \"'\"), s1 = CustomBMSTypeParam, s3 =  strcat(\"'\", BMSTypeWithBackupItemType1, \"'\") \r\n| mv-apply s2 = split(s2, \",\") to typeof(string) on (\r\n\twhere indexof(s1, substring(s2, 1, indexof(s2, \"/\") - 1)) >= 1)\r\n| summarize result = array_strcat(make_list(s3), \",\")\r\n| project result ",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.resources/subscriptions"
      },
      "name": "Overview-WorkspaceParameterBlock"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "678680e5-76b5-4db8-bbef-5f73942caf2e",
            "version": "KqlParameterItem/1.0",
            "name": "VaultSubscription",
            "label": "Subscription Name",
            "type": 6,
            "description": "Subscription(s) under which the vault(s) exist",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId \r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType,  ResourceId \r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n};\r\nCombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), SubscriptionId \r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct SubscriptionId",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2a83acc5-2123-476f-8a4c-da2fddf231a1",
            "version": "KqlParameterItem/1.0",
            "name": "Location",
            "label": "Vault Location",
            "type": 2,
            "description": "Location(s) in which the vault(s) were created",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used -  BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| distinct ResourceId, AzureDataCenter, VaultName\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| distinct ResourceId, AzureDataCenter, VaultName;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics() | project AzureDataCenter),\r\n(BackupItemUnderResourceSpecific() | project AzureDataCenter)\r\n| distinct AzureDataCenter};\r\nLatestBackupItemTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "fefd31fa-2774-43ca-8cc3-44d477c969f0",
            "version": "KqlParameterItem/1.0",
            "name": "Vault",
            "label": "Vault Name",
            "type": 2,
            "description": "Name(s) of the vault(s)",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used -  BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId, AzureDataCenter, VaultName\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId, AzureDataCenter, VaultName;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics() | project VaultName),\r\n(BackupItemUnderResourceSpecific() | project VaultName)\r\n| distinct VaultName};\r\nLatestBackupItemTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "CustomBMSTypeParam",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "BMSTypeWithBackupItemTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "60",
      "name": "Overview-ReportParameterBlock",
      "styleSettings": {
        "maxWidth": "100%"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "#### ⚠ - There is no backup data in the selected Log Analytics workspace(s). [Learn More](https://aka.ms/UsingLAWorkspace)"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "ErrorHandle",
          "comparison": "isEqualTo"
        },
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        }
      ],
      "name": "ErrorMessage"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet ExtRangeStart = RangeStart + 36h;\r\nlet ExtRangeEnd = RangeEnd + 36h;\r\nlet interval = 1d;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\nlet DPMVMwareVM = \"DPM/VMwareVM\";\r\nlet DPMHyperVVM = \"DPM/HyperVVM\";\r\nlet ExtractedBMSType =  todynamic(strcat( \"[\", replace(\"/[a-zA-Z]+\", \"\", @\"{BMSTypeWithBackupItemTypeParam}\"), \"]\"));\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| distinct ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\r\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId, BackupManagementType = BackupManagementType_s \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId, BackupManagementType\r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\n\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet AlertUnderAzureDiagnostics = ()\r\n{\r\nlet AlertTable = AzureDiagnostics \r\n| where TimeGenerated  >= RangeStart and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Alert\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| project  AlertUniqueIdGuid = columnifexists(\"AlertUniqueId_g\", \"\") , AlertUniqueIdStr = columnifexists(\"AlertUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), \r\nStorageUniqueId = columnifexists(\"StorageUniqueId_s\",\"\"),AlertConsolidationStatus = columnifexists(\"AlertConsolidationStatus_s\",\"\"), CountOfAlertsConsolidated = toint(columnifexists(\"CountOfAlertsConsolidated_s\",\"\")),\r\nAlertRaisedOn = columnifexists(\"AlertRaisedOn_s\",\"\"), AlertCode = columnifexists(\"AlertCode_s\",\"\"), RecommendedAction = columnifexists(\"RecommendedAction_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"),AlertType = columnifexists(\"AlertType_s\",\"\"), \r\nAlertStatus = columnifexists(\"AlertStatus_s\",\"\"),  AlertOccurrenceDateTime = todatetime(columnifexists(\"AlertOccurrenceDateTime_s\",\"\")), AlertTimeToResolveInMinutes = todouble(columnifexists(\"AlertTimeToResolveInMinutes_s\", \"\")),\r\nAlertSeverity = columnifexists(\"AlertSeverity_s\",\"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where AlertOccurrenceDateTime >= RangeStart and AlertOccurrenceDateTime <= RangeEnd \r\n| extend AlertUniqueId = iff(isempty(AlertUniqueIdGuid), AlertUniqueIdStr, AlertUniqueIdGuid) \r\n| project-away AlertUniqueIdGuid, AlertUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by AlertUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   AlertTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet AlertUnderResourceSpecific = ()\r\n{\r\nlet AlertTable = AddonAzureBackupAlerts \r\n// Take records until previous day\r\n| where TimeGenerated  >= RangeStart and TimeGenerated < Today\r\n| where AlertOccurrenceDateTime >= RangeStart and AlertOccurrenceDateTime <= RangeEnd \r\n| summarize arg_max(TimeGenerated, *)  by AlertUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   AlertTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\r\n{\r\n let ProtectedInstanceTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedInstance\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),\r\n ProtectedInstanceCount = toint(columnifexists(\"ProtectedInstanceCount_s\", \"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedInstanceUnderResourceSpecific = (isProtectedContainerBillingType:bool)\r\n{\r\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \r\n| where OperationName == \"ProtectedInstance\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where (BackupItemUniqueId == \"\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \"\" and not(isProtectedContainerBillingType))\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedInstanceTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestProtectedInstanceTable = (isProtectedContainerBillingType:bool) \r\n{CombinedTable | union isfuzzy = true \r\n(ProtectedInstanceUnderAzureDiagnostics(isProtectedContainerBillingType)),\r\n(ProtectedInstanceUnderResourceSpecific(isProtectedContainerBillingType))\r\n| where startofday(TimeGenerated) == AsonDay\r\n// ProtectedInstance is at BillingEntity level. BMSType can be the filter used.\r\n| where BackupManagementType in (ExtractedBMSType) or \"'*'\" in (@\"{BMSTypeWithBackupItemTypeParam}\") \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId\r\n| project BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType, ResourceId, TimeGenerated, ProtectedInstanceCount, TimeRangeEndDay = startofday(TimeGenerated)\r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where BackupItemUniqueId != \"\"\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where strcat(BackupManagementType, \"/\", BackupItemType) in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| project BackupItemUniqueId,  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId};\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where BackupItemUniqueId != \"\"\r\n| where strcat(BackupManagementType, \"/\", BackupItemType) in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| project BackupItemUniqueId,  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId};\r\nlet LatestBackupItemAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= leftouter\r\n(CombinedTable | union isfuzzy = true  \r\n(StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, BackupManagementType),\r\n(StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, BackupManagementType)\r\n| where BackupManagementType in (ExtractedBMSType) or \"'*'\" in (@\"{BMSTypeWithBackupItemTypeParam}\") \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| summarize StorageConsumedInGBs = sum(StorageConsumedInMBs)/(1024) by BMSTypeWithBackupItemType};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId, ResourceId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName, ResourceId\r\n};\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId, ResourceId\r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName, ResourceId \r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\nTotalBackupItemDimensionTable\r\n| join kind= inner ( \r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (TotalProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, ProtectedContainerUniqueId, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupManagementServer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId == \"\" and ProtectedContainerUniqueId == \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (TotalBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, ContainerNameWithBackupItemName, BackupManagementServerUniqueId, ResourceId\r\n};\r\nlet LatestJobTable = ()\r\n{LatestJobTableBasedOnBackupItem()\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n// Taking only BackupItemBasedJobs\r\n| where JobUniqueId != \"\"\r\n}; \r\nlet LatestAlertTableBasedOnBackupItem = (){\r\nLatestBackupItemDimensionTable\r\n| join kind= leftouter \r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(AlertUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, AlertUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet LatestProtectedContainerUniqueIdTableBasedOnBackupItemExcludingDPMVMs = (){\r\nLatestBackupItemDimensionTable\r\n| where not(BMSTypeWithBackupItemType has DPMVMwareVM or BMSTypeWithBackupItemType has DPMHyperVVM)\r\n| join kind= inner \r\n(CombinedTable | union isfuzzy = true \r\n(BackupItemAssociationUnderAzureDiagnostics()),\r\n(BackupItemAssociationUnderResourceSpecific())\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n| distinct ProtectedContainerUniqueId\r\n};\r\nlet LatestProtectedInstanceTableFromProtectedContainerUniqueId = ()\r\n{ \r\nLatestProtectedInstanceTable(true)\r\n| join kind= rightouter (LatestProtectedContainerUniqueIdTableBasedOnBackupItemExcludingDPMVMs) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project BillingEntityUniqueId = ProtectedContainerUniqueId1, ProtectedInstanceCount, BackupManagementType\r\n};\r\nlet LatestProtectedInstanceTableFromBackupItemUniqueId = ()\r\n{ \r\nLatestProtectedInstanceTable(false)\r\n| join kind= rightouter (LatestBackupItemDimensionTable | where BMSTypeWithBackupItemType has DPMVMwareVM or BMSTypeWithBackupItemType has DPMHyperVVM) on BackupItemUniqueId == BackupItemUniqueId\r\n| project BillingEntityUniqueId = BackupItemUniqueId1, ProtectedInstanceCount, BackupManagementType\r\n};\r\nlet ProtectedInstanceMetricTable = ( ) \r\n{ union \r\n(LatestProtectedInstanceTableFromProtectedContainerUniqueId()),\r\n(LatestProtectedInstanceTableFromBackupItemUniqueId())\r\n| project CustomProtectedInstanceCount = iff(isempty(ProtectedInstanceCount) or BackupManagementType == \"AzureStorage\", 0 ,ProtectedInstanceCount), BillingEntityUniqueId\r\n};\r\n(LatestBackupItemDimensionTable | count | extend Dummy = 1) \r\n| join (LatestBackupItemAndStorageConsumptionTable | summarize sum(StorageConsumedInGBs) | extend Dummy = 1) on Dummy == Dummy \r\n| join (LatestJobTable | where JobUniqueId != \"\" | summarize dcount(JobUniqueId,4) | extend Dummy = 1) on Dummy == Dummy \r\n| join (ProtectedInstanceMetricTable | summarize sum(CustomProtectedInstanceCount) | extend Dummy = 1) on Dummy == Dummy \r\n| extend  Key = pack_array( \"Backup Items\", \"Protected Instances\",  \"Cloud Storage (GB)\", \"Jobs Created\"), Value = pack_array( Count, toreal(sum_CustomProtectedInstanceCount)/10, sum_StorageConsumedInGBs, dcount_JobUniqueId), \r\nSubTitle = pack_array( \"\", \"\", \"\", \"\")\r\n| project Key, Value, SubTitle \r\n| mvexpand Key, Value, SubTitle",
        "size": 4,
        "noDataMessage": "No records found for the selected time range and scope",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Key",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "subtitleContent": {
            "columnMatch": "SubTitle",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatter": 12,
            "formatOptions": {
              "showIcon": true
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "decimal",
                "minimumFractionDigits": 0,
                "maximumFractionDigits": 2
              }
            }
          },
          "showBorder": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "CustomBMSTypeParam",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "BMSTypeWithBackupItemTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "name": "Summary-Tiles",
      "styleSettings": {
        "margin": "0% 0% 0% -15px"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\nlet ExtRangeStart = RangeStart + 36h;\r\nlet ExtRangeEnd = RangeEnd + 36h;\r\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\r\nlet TrendEndDay = iff((RangeEnd-Today == 1d),RangeEnd-1d, RangeEnd);\r\nlet interval = 1d;\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Files & Folder\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\"];\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| distinct ResourceId\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| where VaultName in  ({Vault}) or '*' in ({Vault})\r\n| distinct ResourceId\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),\r\nSecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\r\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemFrontEndSizeTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemFrontEndSizeConsumption\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemFrontEndSize = todouble(columnifexists(\"BackupItemFrontEndSize_s\", \"\")), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\r\n{\r\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemFrontEndSizeConsumption\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemFrontEndSizeTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\r\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId\r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   ProtectedContainerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderAzureDiagnostics = ()\r\n{\r\nlet BackupManagementServerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupManagementServer\"  and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Not projecting BackupManagementServerVersion, BackupManagementServerOSVersion due to special handling like NewBackupManagementServerUniqueId\r\n| project OldBackupManagementServerUniqueId = columnifexists(\"BackupManagmentServerUniqueId_s\", \"\"), NewBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"),  BackupManagementServerName = columnifexists(\"BackupManagementServerName_s\", \"\"), AzureBackupAgentVersion = columnifexists(\"AzureBackupAgentVersion_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), ResourceId, TimeGenerated\r\n| extend BackupManagementServerUniqueId = iff(NewBackupManagementServerUniqueId == \"\", OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId) \r\n| project-away OldBackupManagementServerUniqueId, NewBackupManagementServerUniqueId\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupManagementServerUnderResourceSpecific = ()\r\n{\r\nlet BackupManagementServerTable =CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupManagementServer\" and State != \"Deleted\"\r\n| project BackupManagementServerUniqueId,  BackupManagementServerName, AzureBackupAgentVersion, BackupManagementType, ResourceId, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by BackupManagementServerUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupManagementServerTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let StorageAssociationTable = AzureDiagnostics \r\n| where Category == \"AzureBackupReport\" and OperationName == \"StorageAssociation\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), StorageUniqueId = columnifexists(\"StorageUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), StorageConsumedInMBs = todouble(columnifexists(\"StorageConsumedInMBs_s\", \"\")), \r\nStorageAllocatedInMBs = todouble(columnifexists(\"StorageAllocatedInMBs_s\", \"\")),  TimeGenerated, ResourceId \r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet StorageAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet StorageAssociationTable = AddonAzureBackupStorage \r\n| where OperationName == \"StorageAssociation\" and State != \"Deleted\"\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\r\n| where split(StorageUniqueId, \";\")[2] has \"cloud\"\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   StorageAssociationTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderAzureDiagnostics = ()\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\")) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet JobUnderResourceSpecific = ()\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Job\" \r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\") or (JobStatus == \"InProgress\"))\r\n| where JobStartDateTime >= RangeStart and JobStartDateTime <= RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   JobTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet AlertUnderAzureDiagnostics = ()\r\n{\r\nlet AlertTable = AzureDiagnostics \r\n| where TimeGenerated  >= RangeStart and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Alert\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| project  AlertUniqueIdGuid = columnifexists(\"AlertUniqueId_g\", \"\") , AlertUniqueIdStr = columnifexists(\"AlertUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), \r\nStorageUniqueId = columnifexists(\"StorageUniqueId_s\",\"\"),AlertConsolidationStatus = columnifexists(\"AlertConsolidationStatus_s\",\"\"), CountOfAlertsConsolidated = toint(columnifexists(\"CountOfAlertsConsolidated_s\",\"\")),\r\nAlertRaisedOn = columnifexists(\"AlertRaisedOn_s\",\"\"), AlertCode = columnifexists(\"AlertCode_s\",\"\"), RecommendedAction = columnifexists(\"RecommendedAction_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nBackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"),AlertType = columnifexists(\"AlertType_s\",\"\"), \r\nAlertStatus = columnifexists(\"AlertStatus_s\",\"\"),  AlertOccurrenceDateTime = todatetime(columnifexists(\"AlertOccurrenceDateTime_s\",\"\")), AlertTimeToResolveInMinutes = todouble(columnifexists(\"AlertTimeToResolveInMinutes_s\", \"\")),\r\nAlertSeverity = columnifexists(\"AlertSeverity_s\",\"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where AlertOccurrenceDateTime >= RangeStart and AlertOccurrenceDateTime <= RangeEnd and TimeGenerated < Today\r\n| extend AlertUniqueId = iff(AlertUniqueIdGuid == \"\", AlertUniqueIdStr, AlertUniqueIdGuid) \r\n| project-away AlertUniqueIdGuid, AlertUniqueIdStr\r\n| summarize arg_max(TimeGenerated, *)  by AlertUniqueId ;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   AlertTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet AlertUnderResourceSpecific = ()\r\n{\r\nlet AlertTable = AddonAzureBackupAlerts \r\n// Take records until previous day\r\n| where TimeGenerated  >= RangeStart and TimeGenerated < Today\r\n| where AlertOccurrenceDateTime >= RangeStart and AlertOccurrenceDateTime <= RangeEnd and TimeGenerated < Today\r\n| summarize arg_max(TimeGenerated, *)  by AlertUniqueId;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   AlertTable \r\n) on ResourceId == ResourceId;\r\n};\r\n// BusinessLogic\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n// To show as per as on 'AsonDay'\r\n| where startofday(TimeGenerated) == AsonDay\r\n| where strcat(BackupManagementType, \"/\", BackupItemType) in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| project BackupItemUniqueId,  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId};\r\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BackupItemType, BackupItemName, BackupManagementType, BackupItemUniqueId, TimeGenerated, ResourceId\r\n| where strcat(BackupManagementType, \"/\", BackupItemType) in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| where BackupItemUniqueId != \"\"\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId};\r\nlet LatestBackupItemAndStorageConsumptionTable = ()\r\n{\r\nLatestBackupItemDimensionTable | join kind= leftouter\r\n(CombinedTable | union isfuzzy = true  \r\n(StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated),\r\n(StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| summarize StorageConsumedInGBs = sum(StorageConsumedInMBs)/(1024) by BMSTypeWithBackupItemType};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics = ()\r\n{\r\n BackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId , TimeRangeEndDay\r\n | join kind= leftouter (\r\n  StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, PolicyUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs \r\n};\r\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific = ()\r\n{\r\nBackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId , TimeRangeEndDay\r\n | join kind= leftouter (\r\n  StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\r\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\r\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, PolicyUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs \r\n};\r\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\r\n{\r\nTotalBackupItemDimensionTable | join kind= inner\r\n(CombinedTable | union isfuzzy = true  \r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics()\r\n),\r\n(BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\r\n  on BackupItemUniqueId == BackupItemUniqueId\r\n| project TimeGenerated, BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId, ProtectedContainerUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, ResourceId, BackupItemUniqueId, TimeRangeEndDay\r\n};\r\nlet TotalProtectedContainerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(ProtectedContainerUnderAzureDiagnostics()),\r\n(ProtectedContainerUnderResourceSpecific())\r\n| where ProtectedContainerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\"), ProtectedContainerUniqueId, ResourceId\r\n// BackupItemName Not applicable\r\n| distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName, ResourceId \r\n};\r\nlet TotalBackupManagementServerTable = ( ) \r\n{\r\nCombinedTable | union isfuzzy = true \r\n(BackupManagementServerUnderAzureDiagnostics()),\r\n(BackupManagementServerUnderResourceSpecific())\r\n| where BackupManagementServerUniqueId != \"\"\r\n| project  BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\"), BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\", BackupManagementServerUniqueId, ResourceId\r\n| distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType, BackupItemName, ContainerNameWithBackupItemName, ResourceId\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\nTotalBackupItemDimensionTable\r\n| join kind= inner ( \r\nCombinedTable | union isfuzzy = true \r\n(JobUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(JobUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSecs, BackupItemUniqueId, JobStartDateTime, AdHocOrScheduledJob, ResourceId, TimeGenerated\r\n};\r\nlet LatestJobTable = ()\r\n{LatestJobTableBasedOnBackupItem()\r\n// To Exclude NaN from Search filter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n// Taking only BackupItemBasedJobs\r\n| where JobUniqueId != \"\"\r\n}; \r\nlet LatestAlertTableBasedOnBackupItem = (){\r\nLatestBackupItemDimensionTable\r\n| join kind= leftouter \r\n(CombinedTable | union isfuzzy = true \r\n(AlertUnderAzureDiagnostics()\r\n| where BackupItemUniqueId != \"\"\r\n),\r\n(AlertUnderResourceSpecific()\r\n| where BackupItemUniqueId != \"\"\r\n)\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, AlertUniqueId) on BackupItemUniqueId == BackupItemUniqueId\r\n};\r\nlet ActiveAlertPercentageTable = ()\r\n{ \r\nLatestAlertTableBasedOnBackupItem\r\n// Calculate percentage\r\n| extend active=iff((AlertUniqueId != \"\" and AlertStatus == \"Active\") , 1 , 0)\r\n| extend record = iff(AlertUniqueId != \"\", 1, 0)  // to be used for total row count\r\n| summarize ActiveCount =sum(active), TotalCount=sum(record) by BMSTypeWithBackupItemType\r\n| extend ActiveAlertPercentage = iff(TotalCount == 0, 0.0,(ActiveCount*100)/todouble(TotalCount))\r\n};\r\nlet JobSuccessPercentageTable = (){\r\nLatestJobTable\r\n// Calculate percentage\r\n| extend success=iff((JobStatus == \"Completed\" or JobStatus == \"CompletedWithWarnings\") , 1 , 0)\r\n| extend record = iff(JobUniqueId != \"\", 1, 0)  // to be used for total row count\r\n| summarize SuccessfulCount =sum(success), TotalCount=sum(record) by BMSTypeWithBackupItemType\r\n| extend JobSuccessPercentage = (SuccessfulCount*100)/todouble(TotalCount)\r\n};\r\nlet JobFailureTrendTable = () {\r\nLatestJobTable\r\n// Calculate Failure count\r\n| extend Failed=iff((JobStatus != \"Completed\" and JobStatus != \"CompletedWithWarnings\"), 1 , 0)\r\n| extend record = iff(JobUniqueId != \"\", 1, 0)  // to be used for total row count\r\n| make-series FailureCountSeries = sum(Failed) default=0\r\non TimeGenerated  from RangeStart to TrendEndDay step interval by BMSTypeWithBackupItemType\r\n};\r\nlet CloudStorageTrendTable = ()\r\n{\r\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable\r\n| make-series StorageConsumptionSeries = sum(StorageConsumedInMBs) default=0\r\non TimeGenerated  from RangeStart to TrendEndDay step interval by BMSTypeWithBackupItemType\r\n};\r\nlet AlertCreationTrendTable = () {\r\nLatestAlertTableBasedOnBackupItem\r\n| where isnotempty(AlertOccurrenceDateTime)\r\n| make-series AlertCreationCountSeries = count() default=0\r\non AlertOccurrenceDateTime  from RangeStart to TrendEndDay step interval by BMSTypeWithBackupItemType\r\n};\r\nlet SummaryTable = (){\r\n// Total BackupItem Types in the period\r\nTotalBackupItemDimensionTable | summarize by BMSTypeWithBackupItemType\r\n// Active BackupItem count \r\n| join kind=leftouter (LatestBackupItemDimensionTable | summarize count(BackupItemUniqueId) by BMSTypeWithBackupItemType) on BMSTypeWithBackupItemType == BMSTypeWithBackupItemType \r\n| join kind=leftouter JobSuccessPercentageTable on BMSTypeWithBackupItemType == BMSTypeWithBackupItemType \r\n| join kind=leftouter LatestBackupItemAndStorageConsumptionTable on BMSTypeWithBackupItemType == BMSTypeWithBackupItemType \r\n| project BMSTypeWithBackupItemType, count_BackupItemUniqueId, JobSuccessPercentage, StorageConsumedInGBs};\r\nlet CustomSummaryTable = BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (SummaryTable) \r\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\r\n| project BMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1 ,CustomBMSTypeWithBackupItemType ), count_BackupItemUniqueId, JobSuccessPercentage = iff( (isnan(JobSuccessPercentage) or isinf(JobSuccessPercentage) or isempty(JobSuccessPercentage)), \"-\", tostring(strcat(round(JobSuccessPercentage,2), \" %\"))),  StorageConsumedInGBs\r\n| parse BMSTypeWithBackupItemType with ExtractedBMSType:string \"/\" ExtractedBackupItemType:string\r\n| project ExtractedBMSType, ExtractedBackupItemType, count_BackupItemUniqueId, JobSuccessPercentage, StorageConsumedInGBs\r\n| order by ExtractedBMSType asc;\r\nCustomSummaryTable",
        "size": 3,
        "title": "Key Parameters by Backup Item Type ",
        "noDataMessage": "No records found for the selected time range and scope",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "ExtractedBMSType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ExtractedBackupItemType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "count_BackupItemUniqueId",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              }
            },
            {
              "columnMatch": "JobSuccessPercentage",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              }
            },
            {
              "columnMatch": "StorageConsumedInGBs",
              "formatter": 4,
              "formatOptions": {
                "min": 0,
                "palette": "blue",
                "showIcon": true
              }
            },
            {
              "columnMatch": "BMSTypeWithBackupItemType",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "sortBy": [
            {
              "itemKey": "ExtractedBMSType",
              "sortOrder": 1
            }
          ],
          "labelSettings": [
            {
              "columnId": "ExtractedBMSType",
              "label": "Backup Management Type"
            },
            {
              "columnId": "ExtractedBackupItemType",
              "label": "Backup Item Type"
            },
            {
              "columnId": "count_BackupItemUniqueId",
              "label": "# Backup Items"
            },
            {
              "columnId": "JobSuccessPercentage",
              "label": "Job Success %"
            },
            {
              "columnId": "StorageConsumedInGBs",
              "label": "Cloud Storage (GB)"
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "ExtractedBMSType",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "CustomBMSTypeParam",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "BMSTypeWithBackupItemTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "showPin": true,
      "name": "Summary-Grid",
      "styleSettings": {
        "margin": "-23px 0% 0% 0%",
        "showBorder": true
      }
    }
  ],
  "fromTemplateId": "ext-backup-report/summary-tab",
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}