{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Subscriptions}"
        ],
        "parameters": [
          {
            "id": "d1f42f81-eb8f-4653-a0ff-38564d7487b4",
            "version": "KqlParameterItem/1.0",
            "name": "Subscriptions",
            "type": 6,
            "description": "Subscriptions to filter the list of workspaces",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": false,
              "selectAllValue": ""
            }
          },
          {
            "id": "2373a24f-ad32-4909-a7f6-59b373dcde6c",
            "version": "KqlParameterItem/1.0",
            "name": "Workspaces",
            "type": 5,
            "description": "LA Workspaces configured in vault diagnostic settings",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type =~ 'microsoft.operationalinsights/workspaces' | project id",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8c4ae44c-fa9a-4498-aedc-736a56e64b43",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "label": "Time Range",
            "type": 4,
            "description": "Time Range",
            "value": {
              "durationMs": 604800000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "bb7c8d78-cf0c-4b47-af95-1c07ac0f6829",
            "version": "KqlParameterItem/1.0",
            "name": "ErrorHandle",
            "label": "Error Handle",
            "type": 1,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Files & Folder\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\"];\r\nlet CustomBMSTypeParam = \"'Azure Backup Agent','Azure Storage (Azure Files)','Azure Virtual Machine','DPM','SAP ASE in Azure VM','SAP HANA in Azure VM','SQL in Azure VM'\";\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project  BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\") \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType \r\n};\r\nlet OutputTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| distinct BackupManagementType, BackupItemType\r\n| distinct strcat(BackupManagementType, \"/\", BackupItemType)\r\n| project BMSTypeWithBackupItemType = Column1};\r\nlet CustomOutputTable = () {BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\r\n| project BMSTypeWithBackupItemType1, CustomBMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1,CustomBMSTypeWithBackupItemType )};\r\nCustomOutputTable\r\n// convert to a list of internal names\r\n| project  s2 =  strcat(\"'\", CustomBMSTypeWithBackupItemType, \"'\"), s1 = CustomBMSTypeParam, s3 =  strcat(\"'\", BMSTypeWithBackupItemType1, \"'\") \r\n| mv-apply s2 = split(s2, \",\") to typeof(string) on (\r\n\twhere indexof(s1, substring(s2, 1, indexof(s2, \"/\") - 1)) >= 1)\r\n| summarize result = array_strcat(make_list(s3), \",\")\r\n| project result ",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "ab02c6b3-a9c9-4a3b-86fe-0694974335b0",
            "version": "KqlParameterItem/1.0",
            "name": "CustomBMSTypeParam",
            "label": "Backup Management Type",
            "type": 2,
            "description": "Backup Management Type",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "'Azure Backup Agent','Azure Storage (Azure Files)','Azure Virtual Machine','DPM','SAP ASE in Azure VM','SAP HANA in Azure VM','SQL in Azure VM'"
            },
            "jsonData": "[    \r\n\t\"Azure Backup Agent\",\r\n    \"Azure Storage (Azure Files)\",\r\n    \"Azure Virtual Machine\",\r\n    \"DPM\",\r\n    \"SAP ASE in Azure VM\",\r\n    \"SAP HANA in Azure VM\",\r\n    \"SQL in Azure VM\"\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "f61266ea-f32a-4b60-8eeb-f3b428ac4951",
            "version": "KqlParameterItem/1.0",
            "name": "BMSTypeWithBackupItemTypeParam",
            "type": 1,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Files & Folder\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\"];\r\n//let CustomBMSTypeParam = \"'SQL in Azure VM','Azure Virtual Machine','Azure Storage (Azure Files)','Azure Backup Agent','DPM'\";\r\nlet CustomBMSTypeParam = @\"{CustomBMSTypeParam}\";\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project  BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\") \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType \r\n};\r\nlet OutputTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| distinct BackupManagementType, BackupItemType\r\n| distinct strcat(BackupManagementType, \"/\", BackupItemType)\r\n| project BMSTypeWithBackupItemType = Column1};\r\nlet CustomOutputTable = () {BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\r\n| project BMSTypeWithBackupItemType1, CustomBMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1,CustomBMSTypeWithBackupItemType )};\r\nCustomOutputTable\r\n// convert to a list of internal names\r\n| project  s2 =  strcat(\"'\", CustomBMSTypeWithBackupItemType, \"'\"), s1 = CustomBMSTypeParam, s3 =  strcat(\"'\", BMSTypeWithBackupItemType1, \"'\") \r\n| mv-apply s2 = split(s2, \",\") to typeof(string) on (\r\n\twhere indexof(s1, substring(s2, 1, indexof(s2, \"/\") - 1)) >= 1)\r\n| summarize result = array_strcat(make_list(s3), \",\")\r\n| project result ",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.resources/subscriptions"
      },
      "name": "Overview-WorkspaceParameterBlock"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "678680e5-76b5-4db8-bbef-5f73942caf2e",
            "version": "KqlParameterItem/1.0",
            "name": "VaultSubscription",
            "label": "Subscription Name",
            "type": 6,
            "description": "Subscription(s) under which the vault(s) exist",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId \r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType,  ResourceId \r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n};\r\nCombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), SubscriptionId \r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct SubscriptionId",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2a83acc5-2123-476f-8a4c-da2fddf231a1",
            "version": "KqlParameterItem/1.0",
            "name": "Location",
            "label": "Vault Location",
            "type": 2,
            "description": "Location(s) in which the vault(s) were created",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used -  BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| distinct ResourceId, AzureDataCenter, VaultName\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| distinct ResourceId, AzureDataCenter, VaultName;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics() | project AzureDataCenter),\r\n(BackupItemUnderResourceSpecific() | project AzureDataCenter)\r\n| distinct AzureDataCenter};\r\nLatestBackupItemTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "fefd31fa-2774-43ca-8cc3-44d477c969f0",
            "version": "KqlParameterItem/1.0",
            "name": "Vault",
            "label": "Vault Name",
            "type": 2,
            "description": "Name(s) of the vault(s)",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used -  BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId, AzureDataCenter, VaultName\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId, AzureDataCenter, VaultName;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics() | project VaultName),\r\n(BackupItemUnderResourceSpecific() | project VaultName)\r\n| distinct VaultName};\r\nLatestBackupItemTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "CustomBMSTypeParam",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "BMSTypeWithBackupItemTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "60",
      "name": "Overview-ReportParameterBlock",
      "styleSettings": {
        "maxWidth": "100%"
      }
    },
	{
		"type": 9,
		"content": "{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Workspaces}\"],\"parameters\":[{\"id\":\"a29464c3-34f0-4d60-82bb-614b8128b7f9\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"BillingEntityName\",\"label\":\"Search Billed Entity\",\"type\":1,\"description\":\"Search by Billed Entity Name\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"value\":\"\"}],\"style\":\"above\",\"doNotRunWhenHidden\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"name": "Usage-SearchParameterBlock"
	  },
	  {
		"type": 1,
		"content": "{\"json\":\"_____________________\"}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"name": "Usage-DividingLine1"
	  },
	  {
		"type": 3,
		"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet NumberOfDaysInRange = datetime_diff('day',RangeEnd, RangeStart);\\r\\n// AsonDay is needed to project consumption data only as per the last complete day.\\r\\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\\r\\nlet DPMVMwareVM = \\\"DPM/VMwareVM\\\";\\r\\nlet DPMHyperVVM = \\\"DPM/HyperVVM\\\";\\r\\nlet ExtractedBMSType =  todynamic(strcat( \\\"[\\\", replace(\\\"/[a-zA-Z]+\\\", \\\"\\\", @\\\"{BMSTypeWithBackupItemTypeParam}\\\"), \\\"]\\\"));\\r\\nlet BMSTypeMappingTable = datatable (BMSType:string, CustomBMSType:string)\\r\\n    [ \\\"IaaSVM\\\", \\\"Azure Virtual Machine\\\",\\r\\n\\t  \\\"AzureStorage\\\", \\\"Azure Storage (Azure Files)\\\",\\r\\n\\t  \\\"MAB\\\", \\\"Azure Backup Agent\\\",\\r\\n\\t  \\\"AzureWorkload/SAPAseDatabase\\\", \\\"SAP ASE in Azure VM\\\",\\r\\n\\t  \\\"AzureWorkload/SQLDataBase\\\", \\\"SQL in Azure VM\\\",\\r\\n\\t  \\\"AzureWorkload/SAPHanaDatabase\\\", \\\"SAP HANA in Azure VM\\\"\\r\\n\\t];\\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId, StorageReplicationType = StorageReplicationType_s\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n\\r\\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemFrontEndSizeTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemFrontEndSize = todouble(columnifexists(\\\"BackupItemFrontEndSize_s\\\", \\\"\\\")), BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let StorageAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"StorageAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), StorageUniqueId = columnifexists(\\\"StorageUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), StorageConsumedInMBs = todouble(columnifexists(\\\"StorageConsumedInMBs_s\\\", \\\"\\\")), \\r\\nStorageAllocatedInMBs = todouble(columnifexists(\\\"StorageAllocatedInMBs_s\\\", \\\"\\\")),  TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet StorageAssociationTable = AddonAzureBackupStorage \\r\\n| where OperationName == \\\"StorageAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedInstanceUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\\r\\n{\\r\\n let ProtectedInstanceTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedInstance\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),\\r\\n ProtectedInstanceCount = toint(columnifexists(\\\"ProtectedInstanceCount_s\\\", \\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| where (BackupItemUniqueId == \\\"\\\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \\\"\\\" and not(isProtectedContainerBillingType))\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedInstanceTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedInstanceUnderResourceSpecific = (isProtectedContainerBillingType:bool)\\r\\n{\\r\\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \\r\\n| where OperationName == \\\"ProtectedInstance\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where (BackupItemUniqueId == \\\"\\\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \\\"\\\" and not(isProtectedContainerBillingType))\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedInstanceTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n// To show as per as on 'AsonDay'\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType), BackupItemProtectionState};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics  | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics\\t\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId, TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId,  ResourceId, StorageReplicationType \\r\\n};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific  | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific \\t\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId, TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId,  ResourceId, StorageReplicationType  \\r\\n};\\r\\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\\r\\n{\\r\\nLatestBackupItemDimensionTable | join kind= inner\\r\\n(CombinedTable | union isfuzzy = true  \\r\\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\\r\\n),\\r\\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\\r\\n  on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| project BackupItemUniqueId, ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, \\r\\nBMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, TimeGenerated, ResourceId, StorageReplicationType\\r\\n| parse BMSTypeWithBackupItemType with BMSType:string\\\"/\\\" *\\r\\n};\\r\\nlet LatestBackupItemInfoTable = (){\\r\\n// projecting TimeRangeDay to distill the report for RangeEndDay\\r\\nLatestBackupItemAssociationAndStorageConsumptionTable | project BackupItemUniqueId, ContainerNameWithBackupItemName, BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, TimeRangeEndDay = startofday(TimeGenerated), BMSType, ResourceId, StorageReplicationType\\r\\n};\\r\\nlet LatestProtectedContainerInfoTableExcludingDPMVMs = (){\\r\\n// projecting TimeRangeDay to distill the report for RangeEndDay\\r\\nLatestBackupItemAssociationAndStorageConsumptionTable \\r\\n| where not(BMSTypeWithBackupItemType has DPMVMwareVM or BMSTypeWithBackupItemType has DPMHyperVVM)\\r\\n| summarize StorageConsumedInMBs = sum(StorageConsumedInMBs), StorageAllocatedInMBs= sum(StorageAllocatedInMBs), BackupItemFrontEndSize = sum(BackupItemFrontEndSize), ProtectedContainerName = any(ProtectedContainerName), TimeRangeEndDay = startofday(any(TimeGenerated)),\\r\\n BMSType = iff((any(BMSTypeWithBackupItemType) startswith \\\"AzureWorkload\\\"), any(BMSTypeWithBackupItemType), any(BMSType)), StorageReplicationType = any(StorageReplicationType), ResourceId = any(ResourceId) by  ProtectedContainerUniqueId\\r\\n};\\r\\nlet LatestProtectedInstanceTable = (isProtectedContainerBillingType:bool) \\r\\n{CombinedTable | union isfuzzy = true \\r\\n(ProtectedInstanceUnderAzureDiagnostics(isProtectedContainerBillingType)),\\r\\n(ProtectedInstanceUnderResourceSpecific(isProtectedContainerBillingType))\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n// ProtectedInstance is at BillingEntity level. BMSType can be the filter used.\\r\\n| where BackupManagementType in (ExtractedBMSType) or \\\"'*'\\\" in (@\\\"{BMSTypeWithBackupItemTypeParam}\\\") \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId\\r\\n| project BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType, ResourceId, TimeGenerated, ProtectedInstanceCount, TimeRangeEndDay = startofday(TimeGenerated), StorageReplicationType\\r\\n};\\r\\nlet LatestProtectedInstanceTableFromProtectedContainerUniqueId = ()\\r\\n{ \\r\\nLatestProtectedInstanceTable(true)\\r\\n| join kind= rightouter (LatestProtectedContainerInfoTableExcludingDPMVMs ) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project TimeRangeEndDay = TimeRangeEndDay1, ProtectedInstanceCount, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, BackupManagementType, BMSType, BillingEntityType = \\\"ProtectedContainer\\\", BillingEntityName = ProtectedContainerName, \\r\\n BillingEntityUniqueId = ProtectedContainerUniqueId1, ResourceId = ResourceId1, StorageReplicationType = StorageReplicationType1\\r\\n};\\r\\nlet LatestProtectedInstanceTableFromBackupItemUniqueId = ()\\r\\n{ \\r\\nLatestProtectedInstanceTable(false)\\r\\n| join kind= rightouter \\r\\n// applicable only for DPM VM Scenarios\\r\\n(LatestBackupItemInfoTable | where BMSTypeWithBackupItemType has DPMVMwareVM or BMSTypeWithBackupItemType has DPMHyperVVM ) \\r\\non BackupItemUniqueId == BackupItemUniqueId\\r\\n| project TimeRangeEndDay = TimeRangeEndDay1, ProtectedInstanceCount, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, BackupManagementType, BMSType, BillingEntityType = \\\"BackupItem\\\", BillingEntityName = ContainerNameWithBackupItemName, \\r\\n BillingEntityUniqueId = BackupItemUniqueId1, ResourceId = ResourceId1, StorageReplicationType = StorageReplicationType1\\r\\n};\\r\\nlet ProtectedInstanceMetric = ( ) \\r\\n{ union \\r\\n(LatestProtectedInstanceTableFromBackupItemUniqueId() ),\\r\\n(LatestProtectedInstanceTableFromProtectedContainerUniqueId())\\r\\n| project  BMSType, BackupItemFrontEndSize, StorageConsumedInMBs, BillingEntityUniqueId, BillingEntityName = iff(array_length(split(BillingEntityName, \\\"/\\\")) == 2, split(BillingEntityName,\\\"/\\\")[1], BillingEntityName), ProtectedInstanceCount, ResourceId, BillingEntityType, StorageReplicationType, TimeRangeEndDay, BackupManagementType\\r\\n| where BillingEntityName contains (@\\\"{BillingEntityName}\\\") or '*' in ('{BillingEntityName}')\\r\\n| summarize arg_max(TimeRangeEndDay, *) by BillingEntityUniqueId \\r\\n};\\r\\nlet ProtectedInstanceCount = ()\\r\\n{\\r\\nBMSTypeMappingTable\\r\\n| join kind = rightouter (\\r\\nProtectedInstanceMetric\\r\\n| project ProtectedInstanceCount = iff(isempty(ProtectedInstanceCount) or BMSType == \\\"AzureStorage\\\", 0.0 ,todouble(ProtectedInstanceCount)), BMSType\\r\\n| summarize TotalProtectedInstanceCount = sum(todouble(ProtectedInstanceCount)/10) by BMSType\\r\\n) on BMSType == BMSType\\r\\n| project BMSType = iff(CustomBMSType == \\\"\\\",BMSType1,CustomBMSType), TotalProtectedInstanceCount\\r\\n| order by BMSType asc\\r\\n| extend rn = row_number()\\r\\n| extend  Key = pack_array(BMSType), Value = pack_array(TotalProtectedInstanceCount), SubText = pack_array(\\\"Protected Instance Count\\\"), Row = pack_array(rn)\\r\\n| project Key, Value, SubText, Row\\r\\n| mvexpand  Key, Value, SubText, Row\\r\\n};\\r\\nlet StorageByStorageReplication = ()\\r\\n{ProtectedInstanceMetric\\r\\n| summarize sum(StorageConsumedInMBs) by StorageReplicationType \\r\\n| order by StorageReplicationType | extend rn = row_number(100)\\r\\n| extend  Key = pack_array(StorageReplicationType), Value = pack_array( sum_StorageConsumedInMBs),  SubText = pack_array(\\\"Cloud Storage (MB)\\\"), Row = pack_array(rn)\\r\\n| project Key, Value, SubText, Row\\r\\n| mvexpand  Key, Value, SubText, Row\\r\\n};\\r\\nunion  ProtectedInstanceCount, StorageByStorageReplication \\r\\n| order by toint(Row) asc\",\"size\":3,\"noDataMessage\":\"No records found for the selected time range and scope\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Key\",\"formatOptions\":{\"showIcon\":true}},\"subtitleContent\":{\"columnMatch\":\"SubText\",\"formatOptions\":{\"showIcon\":true}},\"leftContent\":{\"columnMatch\":\"Value\",\"formatter\":12,\"formatOptions\":{\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},\"showBorder\":true}}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"name": "Usage-Tiles"
	  },
	  {
		"type": 1,
		"content": "{\"json\":\"_____________________\"}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"name": "Usage-DividingLine2"
	  },
	  {
		"type": 3,
		"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet DPMVMwareVM = \\\"DPM/VMwareVM\\\";\\r\\nlet DPMHyperVVM = \\\"DPM/HyperVVM\\\";\\r\\nlet ExtractedBMSType =  todynamic(strcat( \\\"[\\\", replace(\\\"/[a-zA-Z]+\\\", \\\"\\\", @\\\"{BMSTypeWithBackupItemTypeParam}\\\"), \\\"]\\\"));\\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemFrontEndSizeTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemFrontEndSize = todouble(columnifexists(\\\"BackupItemFrontEndSize_s\\\", \\\"\\\")), BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\n let StorageAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"StorageAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), StorageUniqueId = columnifexists(\\\"StorageUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), StorageConsumedInMBs = todouble(columnifexists(\\\"StorageConsumedInMBs_s\\\", \\\"\\\")), \\r\\nStorageAllocatedInMBs = todouble(columnifexists(\\\"StorageAllocatedInMBs_s\\\", \\\"\\\")),  TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nlet StorageAssociationTable = AddonAzureBackupStorage \\r\\n| where OperationName == \\\"StorageAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedInstanceHistoryUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\\r\\n{\\r\\n let ProtectedInstanceTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedInstance\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),\\r\\n ProtectedInstanceCount = toint(columnifexists(\\\"ProtectedInstanceCount_s\\\", \\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| where (BackupItemUniqueId == \\\"\\\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \\\"\\\" and not(isProtectedContainerBillingType))\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedInstanceTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedInstanceHistoryUnderResourceSpecific = (isProtectedContainerBillingType:bool)\\r\\n{\\r\\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \\r\\n| where OperationName == \\\"ProtectedInstance\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where (BackupItemUniqueId == \\\"\\\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \\\"\\\" and not(isProtectedContainerBillingType))\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedInstanceTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()\\r\\n| project BackupItemType, BackupItemName, BackupManagementType, \\r\\nBackupItemProtectionState, BackupItemUniqueId, TimeGenerated),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType), BackupItemProtectionState};\\r\\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId , TimeRangeEndDay\\r\\n | join kind= leftouter (\\r\\n   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, ProtectedContainerName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\\r\\n| join kind= leftouter (\\r\\n  StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \\r\\n};\\r\\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay \\r\\n | join kind= leftouter (\\r\\n   BackupItemFrontEndSizeHistoryUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, ProtectedContainerName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\\r\\n| join kind= leftouter (\\r\\n  StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \\r\\n};\\r\\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\\r\\n{\\r\\nTotalBackupItemDimensionTable | join kind= inner\\r\\n(CombinedTable | union isfuzzy = true  \\r\\n(BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics()\\r\\n),\\r\\n(BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\\r\\n  on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| parse BMSTypeWithBackupItemType with BMSType:string\\\"/\\\" *\\r\\n};\\r\\nlet LatestBackupItemHistoryInfoTable = (){\\r\\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable \\r\\n| summarize ContainerNameWithBackupItemName = any(strcat(ProtectedContainerName, \\\"/\\\", BackupItemName)), BackupItemName = any(BackupItemName), BMSTypeWithBackupItemType = any(BMSTypeWithBackupItemType), PolicyUniqueId = any(PolicyUniqueId), ProtectedContainerName = any(ProtectedContainerName), BackupItemFrontEndSize = any(BackupItemFrontEndSize), StorageConsumedInMBs= any(StorageConsumedInMBs), StorageAllocatedInMBs = any(StorageAllocatedInMBs), BackupItemProtectionState = any(BackupItemProtectionState), BMSType = any(BMSType), ProtectedContainerUniqueId = any(ProtectedContainerUniqueId) by BackupItemUniqueId, TimeRangeEndDay\\r\\n};\\r\\nlet LatestProtectedContainerHistoryInfoTableExcludingDPMVMs = (){\\r\\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable \\r\\n| where not(BMSTypeWithBackupItemType has DPMVMwareVM or BMSTypeWithBackupItemType has DPMHyperVVM)\\r\\n| summarize StorageConsumedInMBs = sum(StorageConsumedInMBs), StorageAllocatedInMBs= sum(StorageAllocatedInMBs), BackupItemFrontEndSize = sum(BackupItemFrontEndSize), ProtectedContainerName = any(ProtectedContainerName), BMSType = any(BMSType) by  ProtectedContainerUniqueId,  TimeRangeEndDay\\r\\n};\\r\\nlet TotalProtectedInstanceHistoryTable = (isProtectedContainerBillingType:bool) \\r\\n{CombinedTable | union isfuzzy = true \\r\\n(ProtectedInstanceHistoryUnderAzureDiagnostics(isProtectedContainerBillingType)),\\r\\n(ProtectedInstanceHistoryUnderResourceSpecific(isProtectedContainerBillingType))\\r\\n| where BackupManagementType in (ExtractedBMSType) or \\\"'*'\\\" in (@\\\"{BMSTypeWithBackupItemTypeParam}\\\") \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay\\r\\n};\\r\\nlet LatestProtectedInstanceHistoryTableFromProtectedContainerUniqueId = ()\\r\\n{ \\r\\nTotalProtectedInstanceHistoryTable(true) \\r\\n| join kind= rightouter (LatestProtectedContainerHistoryInfoTableExcludingDPMVMs) on ProtectedContainerUniqueId == ProtectedContainerUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project TimeRangeEndDay = iff(isempty(TimeRangeEndDay1), TimeRangeEndDay, TimeRangeEndDay1), ProtectedInstanceCount, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, BMSType, BackupManagementType, BillingEntityType = \\\"ProtectedContainer\\\", BillingEntityName = ProtectedContainerName, \\r\\n BillingEntityUniqueId = iff(isempty(ProtectedContainerUniqueId1), ProtectedContainerUniqueId, ProtectedContainerUniqueId1)\\r\\n};\\r\\nlet LatestProtectedInstanceHistoryTableFromBackupItemUniqueId = ()\\r\\n{ \\r\\nTotalProtectedInstanceHistoryTable(false) \\r\\n| join kind= rightouter (LatestBackupItemHistoryInfoTable | where BMSTypeWithBackupItemType has DPMVMwareVM or BMSTypeWithBackupItemType has DPMHyperVVM ) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project TimeRangeEndDay = iff(isempty(TimeRangeEndDay1), TimeRangeEndDay, TimeRangeEndDay1), ProtectedInstanceCount, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, BMSType, BackupManagementType, BillingEntityType = \\\"BackupItem\\\", BillingEntityName = ContainerNameWithBackupItemName, \\r\\n BillingEntityUniqueId = iff(isempty(BackupItemUniqueId1), BackupItemUniqueId, BackupItemUniqueId1)\\r\\n};\\r\\nlet ProtectedInstanceHistoryMetric = ( ) \\r\\n{ union \\r\\n(LatestProtectedInstanceHistoryTableFromProtectedContainerUniqueId()),\\r\\n(LatestProtectedInstanceHistoryTableFromBackupItemUniqueId())\\r\\n| project  BMSType, BackupItemFrontEndSize, StorageConsumedInMBs, BillingEntityUniqueId, BillingEntityName = iff(array_length(split(BillingEntityName, \\\"/\\\")) == 2, split(BillingEntityName,\\\"/\\\")[1], BillingEntityName), ProtectedInstanceCount, BillingEntityType, TimeRangeEndDay, BackupManagementType\\r\\n| where BillingEntityName contains (@\\\"{BillingEntityName}\\\") or '*' in (@\\\"{BillingEntityName}\\\")\\r\\n};\\r\\nProtectedInstanceHistoryMetric()\\r\\n// Display Tweaks for AFS and null ProtectedInstanceCount\\r\\n// Billing Entity is at BackupManagementType level and not at DS level. Hence BMSTypeWithBackupItemType can't be used.\\r\\n| project  BMSType = iff(isempty(BMSType), BackupManagementType, BMSType), BackupItemFrontEndSize, StorageConsumedInMBs, BillingEntityUniqueId, BillingEntityName, ProtectedInstanceCount = toreal(ProtectedInstanceCount)/10, TimeRangeEndDay\\r\\n| project BillingEntityUniqueId, BillingEntityName, BMSType, ProtectedInstanceCount = iff(isempty(ProtectedInstanceCount) or BMSType == \\\"AzureStorage\\\", 0.0 ,ProtectedInstanceCount), TimeRangeEndDay,\\r\\n StorageConsumedInMBs = iff(isempty(StorageConsumedInMBs), todouble(0), StorageConsumedInMBs), BackupItemFrontEndSize = iff(isempty(BackupItemFrontEndSize), todouble(0), BackupItemFrontEndSize)\\r\\n| project-away BillingEntityUniqueId\\r\\n| summarize ProtectedInstanceCount = sum(ProtectedInstanceCount) by  TimeRangeEndDay\",\"size\":0,\"aggregation\":5,\"title\":\"Protected Instances Trend\",\"noDataMessage\":\"No records found for the selected time range and scope\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeRangeEndDay\",\"sortOrder\":2}]},\"sortBy\":[{\"itemKey\":\"TimeRangeEndDay\",\"sortOrder\":2}],\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"ProtectedInstanceCount\",\"label\":\"# Protected Instances\"}]}}",
		"customWidth": "50",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"showPin": true,
		"name": "Usage-ProtectedInstancesTrendGraph"
	  },
	  {
		"type": 3,
		"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet DPMVMwareVM = \\\"DPM/VMwareVM\\\";\\r\\nlet DPMHyperVVM = \\\"DPM/HyperVVM\\\";\\r\\nlet ExtractedBMSType =  todynamic(strcat( \\\"[\\\", replace(\\\"/[a-zA-Z]+\\\", \\\"\\\", @\\\"{BMSTypeWithBackupItemTypeParam}\\\"), \\\"]\\\"));\\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemFrontEndSizeTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemFrontEndSize = todouble(columnifexists(\\\"BackupItemFrontEndSize_s\\\", \\\"\\\")), BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\n let StorageAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"StorageAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), StorageUniqueId = columnifexists(\\\"StorageUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), StorageConsumedInMBs = todouble(columnifexists(\\\"StorageConsumedInMBs_s\\\", \\\"\\\")), \\r\\nStorageAllocatedInMBs = todouble(columnifexists(\\\"StorageAllocatedInMBs_s\\\", \\\"\\\")),  TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nlet StorageAssociationTable = AddonAzureBackupStorage \\r\\n| where OperationName == \\\"StorageAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedInstanceHistoryUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\\r\\n{\\r\\n let ProtectedInstanceTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedInstance\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),\\r\\n ProtectedInstanceCount = toint(columnifexists(\\\"ProtectedInstanceCount_s\\\", \\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| where (BackupItemUniqueId == \\\"\\\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \\\"\\\" and not(isProtectedContainerBillingType))\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedInstanceTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedInstanceHistoryUnderResourceSpecific = (isProtectedContainerBillingType:bool)\\r\\n{\\r\\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \\r\\n| where OperationName == \\\"ProtectedInstance\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where (BackupItemUniqueId == \\\"\\\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \\\"\\\" and not(isProtectedContainerBillingType))\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedInstanceTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()\\r\\n| project BackupItemType, BackupItemName, BackupManagementType, \\r\\nBackupItemProtectionState, BackupItemUniqueId, TimeGenerated),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType), BackupItemProtectionState};\\r\\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId , TimeRangeEndDay\\r\\n | join kind= leftouter (\\r\\n   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, ProtectedContainerName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\\r\\n| join kind= leftouter (\\r\\n  StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \\r\\n};\\r\\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay \\r\\n | join kind= leftouter (\\r\\n   BackupItemFrontEndSizeHistoryUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, ProtectedContainerName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\\r\\n| join kind= leftouter (\\r\\n  StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \\r\\n};\\r\\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\\r\\n{\\r\\nTotalBackupItemDimensionTable | join kind= inner\\r\\n(CombinedTable | union isfuzzy = true  \\r\\n(BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics()\\r\\n),\\r\\n(BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\\r\\n  on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| parse BMSTypeWithBackupItemType with BMSType:string\\\"/\\\" *\\r\\n};\\r\\nlet LatestBackupItemHistoryInfoTable = (){\\r\\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable \\r\\n| summarize ContainerNameWithBackupItemName = any(strcat(ProtectedContainerName, \\\"/\\\", BackupItemName)), BackupItemName = any(BackupItemName), BMSTypeWithBackupItemType = any(BMSTypeWithBackupItemType), PolicyUniqueId = any(PolicyUniqueId), ProtectedContainerName = any(ProtectedContainerName), BackupItemFrontEndSize = any(BackupItemFrontEndSize), StorageConsumedInMBs= any(StorageConsumedInMBs), StorageAllocatedInMBs = any(StorageAllocatedInMBs), BackupItemProtectionState = any(BackupItemProtectionState), BMSType = any(BMSType), ProtectedContainerUniqueId = any(ProtectedContainerUniqueId) by BackupItemUniqueId, TimeRangeEndDay\\r\\n};\\r\\nlet LatestProtectedContainerHistoryInfoTableExcludingDPMVMs = (){\\r\\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable \\r\\n| where not(BMSTypeWithBackupItemType has DPMVMwareVM or BMSTypeWithBackupItemType has DPMHyperVVM)\\r\\n| summarize StorageConsumedInMBs = sum(StorageConsumedInMBs), StorageAllocatedInMBs= sum(StorageAllocatedInMBs), BackupItemFrontEndSize = sum(BackupItemFrontEndSize), ProtectedContainerName = any(ProtectedContainerName), BMSType = any(BMSType) by  ProtectedContainerUniqueId,  TimeRangeEndDay\\r\\n};\\r\\nlet TotalProtectedInstanceHistoryTable = (isProtectedContainerBillingType:bool) \\r\\n{CombinedTable | union isfuzzy = true \\r\\n(ProtectedInstanceHistoryUnderAzureDiagnostics(isProtectedContainerBillingType)),\\r\\n(ProtectedInstanceHistoryUnderResourceSpecific(isProtectedContainerBillingType))\\r\\n| where BackupManagementType in (ExtractedBMSType) or \\\"'*'\\\" in (@\\\"{BMSTypeWithBackupItemTypeParam}\\\")\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId, TimeRangeEndDay\\r\\n};\\r\\nlet LatestProtectedInstanceHistoryTableFromProtectedContainerUniqueId = ()\\r\\n{ \\r\\nTotalProtectedInstanceHistoryTable(true) \\r\\n| join kind= rightouter (LatestProtectedContainerHistoryInfoTableExcludingDPMVMs) on ProtectedContainerUniqueId == ProtectedContainerUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project TimeRangeEndDay = iff(isempty(TimeRangeEndDay1), TimeRangeEndDay, TimeRangeEndDay1), ProtectedInstanceCount, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, BMSType, BackupManagementType, BillingEntityType = \\\"ProtectedContainer\\\", BillingEntityName = ProtectedContainerName, \\r\\n BillingEntityUniqueId = iff(isempty(ProtectedContainerUniqueId1), ProtectedContainerUniqueId, ProtectedContainerUniqueId1)\\r\\n};\\r\\nlet LatestProtectedInstanceHistoryTableFromBackupItemUniqueId = ()\\r\\n{ \\r\\nTotalProtectedInstanceHistoryTable(false) \\r\\n| join kind= rightouter (LatestBackupItemHistoryInfoTable | where BMSTypeWithBackupItemType has DPMVMwareVM or BMSTypeWithBackupItemType has DPMHyperVVM ) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project TimeRangeEndDay = iff(isempty(TimeRangeEndDay1), TimeRangeEndDay, TimeRangeEndDay1), ProtectedInstanceCount, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, BMSType, BackupManagementType, BillingEntityType = \\\"BackupItem\\\", BillingEntityName = ContainerNameWithBackupItemName, \\r\\n BillingEntityUniqueId = iff(isempty(BackupItemUniqueId1), BackupItemUniqueId, BackupItemUniqueId1)\\r\\n};\\r\\nlet ProtectedInstanceHistoryMetric = ( ) \\r\\n{ union \\r\\n(LatestProtectedInstanceHistoryTableFromProtectedContainerUniqueId()),\\r\\n(LatestProtectedInstanceHistoryTableFromBackupItemUniqueId())\\r\\n| project  BMSType, BackupItemFrontEndSize, StorageConsumedInMBs, BillingEntityUniqueId, BillingEntityName = iff(array_length(split(BillingEntityName, \\\"/\\\")) == 2, split(BillingEntityName,\\\"/\\\")[1], BillingEntityName), ProtectedInstanceCount, BillingEntityType, TimeRangeEndDay, BackupManagementType\\r\\n| where BillingEntityName contains (@\\\"{BillingEntityName}\\\") or '*' in (@\\\"{BillingEntityName}\\\")\\r\\n};\\r\\nProtectedInstanceHistoryMetric()\\r\\n// Display Tweaks for AFS and null ProtectedInstanceCount\\r\\n// Billing Entity is at BackupManagementType level and not at DS level. Hence BMSTypeWithBackupItemType can't be used.\\r\\n| project  BMSType = iff(isempty(BMSType), BackupManagementType, BMSType), BackupItemFrontEndSize, StorageConsumedInMBs, BillingEntityUniqueId, BillingEntityName, ProtectedInstanceCount, TimeRangeEndDay\\r\\n| project BillingEntityUniqueId, BillingEntityName, BMSType, ProtectedInstanceCount = iff(isempty(ProtectedInstanceCount) or BMSType == \\\"AzureStorage\\\", 0 ,ProtectedInstanceCount), TimeRangeEndDay,\\r\\n StorageConsumedInMBs = iff(isempty(StorageConsumedInMBs), todouble(0), StorageConsumedInMBs), BackupItemFrontEndSize = iff(isempty(BackupItemFrontEndSize), todouble(0), BackupItemFrontEndSize)\\r\\n| project-away BillingEntityUniqueId\\r\\n| summarize StorageConsumedInMBs = sum(StorageConsumedInMBs) by  TimeRangeEndDay\",\"size\":0,\"aggregation\":5,\"title\":\"Cloud Storage Trend\",\"noDataMessage\":\"No records found for the selected time range and scope\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeRangeEndDay\",\"sortOrder\":2}]},\"sortBy\":[{\"itemKey\":\"TimeRangeEndDay\",\"sortOrder\":2}],\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"StorageConsumedInMBs\",\"label\":\"Cloud Storage (MB)\"}],\"xSettings\":{\"unit\":17,\"min\":null,\"max\":null}}}",
		"customWidth": "50",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"showPin": true,
		"name": "Usage-CloudStorageTrendGraph"
	  },
	  {
		"type": 1,
		"content": "{\"json\":\"___________\"}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"name": "Usage-DividingLine2"
	  },
	  {
		"type": 9,
		"content": "{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Workspaces}\"],\"parameters\":[{\"id\":\"5dc2a074-b510-44f2-9530-cfcbd159b59c\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ProtectedInstanceMetricSortBy\",\"label\":\"Sort By\",\"type\":2,\"description\":\"Use to sort by a certain column\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[{ \\\"value\\\": \\\"ProtectedInstanceCount\\\", \\\"label\\\": \\\"# Protected Instances\\\" },\\r\\n{ \\\"value\\\": \\\"StorageConsumedInMBs\\\", \\\"label\\\": \\\"Vault Storage (MB)\\\", \\\"selected\\\": \\\"true\\\" }]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"df3cc03c-53f7-4523-a29b-e50bf1b6d922\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ProtectedInstanceMetricOrder\",\"label\":\"Order\",\"type\":2,\"description\":\"Use to specify the sort order: Ascending/Descending\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"Ascending\\\"},\\r\\n    { \\\"value\\\":\\\"Descending\\\", \\\"selected\\\":true}\\r\\n]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"102bf69d-4952-4a1f-827d-fd726a82d666\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ProtectedInstanceMetricRowsPerGrid\",\"label\":\"Rows per page\",\"type\":2,\"description\":\"Number of rows to display in grid view\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":10, \\\"label\\\":\\\"10\\\", \\\"selected\\\":true  },\\r\\n    { \\\"value\\\":25, \\\"label\\\":\\\"25\\\" },\\r\\n    { \\\"value\\\":50, \\\"label\\\":\\\"50\\\" },\\r\\n    { \\\"value\\\":100, \\\"label\\\":\\\"100\\\" },\\r\\n    { \\\"value\\\":250, \\\"label\\\":\\\"250\\\" },\\r\\n    { \\\"value\\\":500, \\\"label\\\":\\\"500\\\" },\\r\\n    { \\\"value\\\":1000, \\\"label\\\":\\\"1000\\\" }\\r\\n]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"f4433681-963d-4204-867c-c54c6c89d3f8\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ProtectedInstanceMetricPageNumber\",\"label\":\"Page\",\"type\":2,\"description\":\"Select Page Number\",\"isRequired\":true,\"query\":\"// Time variable used\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet NumberOfDaysInRange = datetime_diff('day',RangeEnd, RangeStart);\\r\\n// AsonDay is needed to project consumption data only as per the last complete day.\\r\\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\\r\\nlet DPMVMwareVM = \\\"DPM/VMwareVM\\\";\\r\\nlet DPMHyperVVM = \\\"DPM/HyperVVM\\\";\\r\\nlet ExtractedBMSType =  todynamic(strcat( \\\"[\\\", replace(\\\"/[a-zA-Z]+\\\", \\\"\\\", @\\\"{BMSTypeWithBackupItemTypeParam}\\\"), \\\"]\\\"));\\r\\nlet BMSTypeMappingTable = datatable (BMSType:string, CustomBMSType:string)\\r\\n    [ \\\"IaaSVM\\\", \\\"Azure Virtual Machine\\\",\\r\\n\\t  \\\"AzureStorage\\\", \\\"Azure Storage (Azure Files)\\\",\\r\\n\\t  \\\"MAB\\\", \\\"Azure Backup Agent\\\",\\r\\n\\t  \\\"AzureWorkload/SAPAseDatabase\\\", \\\"SAP ASE in Azure VM\\\",\\r\\n\\t  \\\"AzureWorkload/SQLDataBase\\\", \\\"SQL in Azure VM\\\",\\r\\n\\t  \\\"AzureWorkload/SAPHanaDatabase\\\", \\\"SAP HANA in Azure VM\\\"\\r\\n\\t];\\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId, StorageReplicationType = StorageReplicationType_s\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n\\r\\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemFrontEndSizeTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemFrontEndSize = todouble(columnifexists(\\\"BackupItemFrontEndSize_s\\\", \\\"\\\")), BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let StorageAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"StorageAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), StorageUniqueId = columnifexists(\\\"StorageUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), StorageConsumedInMBs = todouble(columnifexists(\\\"StorageConsumedInMBs_s\\\", \\\"\\\")), \\r\\nStorageAllocatedInMBs = todouble(columnifexists(\\\"StorageAllocatedInMBs_s\\\", \\\"\\\")),  TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet StorageAssociationTable = AddonAzureBackupStorage \\r\\n| where OperationName == \\\"StorageAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedInstanceUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\\r\\n{\\r\\n let ProtectedInstanceTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedInstance\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),\\r\\n ProtectedInstanceCount = toint(columnifexists(\\\"ProtectedInstanceCount_s\\\", \\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| where (BackupItemUniqueId == \\\"\\\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \\\"\\\" and not(isProtectedContainerBillingType))\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedInstanceTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedInstanceUnderResourceSpecific = (isProtectedContainerBillingType:bool)\\r\\n{\\r\\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \\r\\n| where OperationName == \\\"ProtectedInstance\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where (BackupItemUniqueId == \\\"\\\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \\\"\\\" and not(isProtectedContainerBillingType))\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedInstanceTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n// To show as per as on 'AsonDay'\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType), BackupItemProtectionState};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics  | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics\\t\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId, TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId,  ResourceId, StorageReplicationType \\r\\n};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific  | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific \\t\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId, TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId,  ResourceId, StorageReplicationType  \\r\\n};\\r\\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\\r\\n{\\r\\nLatestBackupItemDimensionTable | join kind= inner\\r\\n(CombinedTable | union isfuzzy = true  \\r\\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\\r\\n),\\r\\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\\r\\n  on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| project ProtectedContainerName = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\" and isempty(ProtectedContainerName)),split(BackupItemName,\\\";\\\")[0],ProtectedContainerName), BackupItemUniqueId, BackupItemName, ProtectedContainerUniqueId, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, TimeGenerated, ResourceId, StorageReplicationType\\r\\n| project BackupItemUniqueId, ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, \\r\\nBMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, TimeGenerated, ResourceId, StorageReplicationType\\r\\n| parse BMSTypeWithBackupItemType with BMSType:string\\\"/\\\" *\\r\\n};\\r\\nlet LatestBackupItemInfoTable = (){\\r\\n// projecting TimeRangeDay to distill the report for RangeEndDay\\r\\nLatestBackupItemAssociationAndStorageConsumptionTable | project BackupItemUniqueId, ContainerNameWithBackupItemName, BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, TimeRangeEndDay = startofday(TimeGenerated), BMSType, ResourceId, StorageReplicationType\\r\\n};\\r\\nlet LatestProtectedContainerInfoTableExcludingDPMVMs = (){\\r\\n// projecting TimeRangeDay to distill the report for RangeEndDay\\r\\nLatestBackupItemAssociationAndStorageConsumptionTable \\r\\n| where not(BMSTypeWithBackupItemType has DPMVMwareVM or BMSTypeWithBackupItemType has DPMHyperVVM)\\r\\n| summarize StorageConsumedInMBs = sum(StorageConsumedInMBs), StorageAllocatedInMBs= sum(StorageAllocatedInMBs), BackupItemFrontEndSize = sum(BackupItemFrontEndSize), ProtectedContainerName = any(ProtectedContainerName), TimeRangeEndDay = startofday(any(TimeGenerated)),\\r\\n BMSType = iff((any(BMSTypeWithBackupItemType) startswith \\\"AzureWorkload\\\"), any(BMSTypeWithBackupItemType), any(BMSType)), StorageReplicationType = any(StorageReplicationType), ResourceId = any(ResourceId) by  ProtectedContainerUniqueId\\r\\n};\\r\\nlet LatestProtectedInstanceTable = (isProtectedContainerBillingType:bool) \\r\\n{CombinedTable | union isfuzzy = true \\r\\n(ProtectedInstanceUnderAzureDiagnostics(isProtectedContainerBillingType)),\\r\\n(ProtectedInstanceUnderResourceSpecific(isProtectedContainerBillingType))\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n// ProtectedInstance is at BillingEntity level. BMSType can be the filter used.\\r\\n| where BackupManagementType in (ExtractedBMSType) or \\\"'*'\\\" in (@\\\"{BMSTypeWithBackupItemTypeParam}\\\") \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId\\r\\n| project BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType, ResourceId, TimeGenerated, ProtectedInstanceCount, TimeRangeEndDay = startofday(TimeGenerated), StorageReplicationType\\r\\n};\\r\\nlet LatestProtectedInstanceTableFromProtectedContainerUniqueId = ()\\r\\n{ \\r\\nLatestProtectedInstanceTable(true)\\r\\n| join kind= rightouter (LatestProtectedContainerInfoTableExcludingDPMVMs ) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project TimeRangeEndDay = TimeRangeEndDay1, ProtectedInstanceCount, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, BackupManagementType, BMSType, BillingEntityType = \\\"ProtectedContainer\\\", BillingEntityName = ProtectedContainerName, \\r\\n BillingEntityUniqueId = ProtectedContainerUniqueId1, ResourceId = ResourceId1, StorageReplicationType = StorageReplicationType1\\r\\n};\\r\\nlet LatestProtectedInstanceTableFromBackupItemUniqueId = ()\\r\\n{ \\r\\nLatestProtectedInstanceTable(false)\\r\\n| join kind= rightouter \\r\\n// applicable only for DPM VM Scenarios\\r\\n(LatestBackupItemInfoTable | where BMSTypeWithBackupItemType has DPMVMwareVM or BMSTypeWithBackupItemType has DPMHyperVVM ) \\r\\non BackupItemUniqueId == BackupItemUniqueId\\r\\n| project TimeRangeEndDay = TimeRangeEndDay1, ProtectedInstanceCount, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, BackupManagementType, BMSType, BillingEntityType = \\\"BackupItem\\\", BillingEntityName = ContainerNameWithBackupItemName, \\r\\n BillingEntityUniqueId = BackupItemUniqueId1, ResourceId = ResourceId1, StorageReplicationType = StorageReplicationType1\\r\\n};\\r\\nlet ProtectedInstanceMetric = ( ) \\r\\n{ union \\r\\n(LatestProtectedInstanceTableFromBackupItemUniqueId() ),\\r\\n(LatestProtectedInstanceTableFromProtectedContainerUniqueId())\\r\\n| project  BMSType, BackupItemFrontEndSize, StorageConsumedInMBs, BillingEntityUniqueId, BillingEntityName = iff(array_length(split(BillingEntityName, \\\"/\\\")) == 2, split(BillingEntityName,\\\"/\\\")[1], BillingEntityName), ProtectedInstanceCount, ResourceId, BillingEntityType, StorageReplicationType, TimeRangeEndDay, BackupManagementType\\r\\n| where BillingEntityName contains (@\\\"{BillingEntityName}\\\") or '*' in ('{BillingEntityName}')\\r\\n| summarize arg_max(TimeRangeEndDay, *) by BillingEntityUniqueId \\r\\n};\\r\\nProtectedInstanceMetric\\r\\n| summarize c=count()\\r\\n| project num = (c-1)/{ProtectedInstanceMetricRowsPerGrid} + 1\\r\\n| project nums = range(1,num,1), num\\r\\n| mvexpand nums\\r\\n| project nums = tostring(nums), num = strcat(tostring(nums),\\\" of \\\",tostring(num))\",\"crossComponentResources\":[\"{Workspaces}\"],\"value\":\"1\",\"typeSettings\":{\"additionalResourceOptions\":[]},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"above\",\"doNotRunWhenHidden\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"name": "Usage-Grid1ParameterBlock",
		"styleSettings": {
		  "padding": "0% 0% 0% 0%"
		}
	  },
	  {
		"type": 3,
		"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet NumberOfDaysInRange = datetime_diff('day',RangeEnd, RangeStart);\\r\\n// AsonDay is needed to project consumption data only as per the last complete day.\\r\\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\\r\\nlet DPMVMwareVM = \\\"DPM/VMwareVM\\\";\\r\\nlet DPMHyperVVM = \\\"DPM/HyperVVM\\\";\\r\\nlet ExtractedBMSType =  todynamic(strcat( \\\"[\\\", replace(\\\"/[a-zA-Z]+\\\", \\\"\\\", @\\\"{BMSTypeWithBackupItemTypeParam}\\\"), \\\"]\\\"));\\r\\nlet BMSTypeMappingTable = datatable (BMSType:string, CustomBMSType:string)\\r\\n    [ \\\"IaaSVM\\\", \\\"Azure Virtual Machine\\\",\\r\\n\\t  \\\"AzureStorage\\\", \\\"Azure Storage (Azure Files)\\\",\\r\\n\\t  \\\"MAB\\\", \\\"Azure Backup Agent\\\",\\r\\n\\t  \\\"AzureWorkload/SAPAseDatabase\\\", \\\"SAP ASE in Azure VM\\\",\\r\\n\\t  \\\"AzureWorkload/SQLDataBase\\\", \\\"SQL in Azure VM\\\",\\r\\n\\t  \\\"AzureWorkload/SAPHanaDatabase\\\", \\\"SAP HANA in Azure VM\\\"\\r\\n\\t];\\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId, StorageReplicationType = StorageReplicationType_s\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n\\r\\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemFrontEndSizeTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemFrontEndSize = todouble(columnifexists(\\\"BackupItemFrontEndSize_s\\\", \\\"\\\")), BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let StorageAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"StorageAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), StorageUniqueId = columnifexists(\\\"StorageUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), StorageConsumedInMBs = todouble(columnifexists(\\\"StorageConsumedInMBs_s\\\", \\\"\\\")), \\r\\nStorageAllocatedInMBs = todouble(columnifexists(\\\"StorageAllocatedInMBs_s\\\", \\\"\\\")),  TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet StorageAssociationTable = AddonAzureBackupStorage \\r\\n| where OperationName == \\\"StorageAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedInstanceUnderAzureDiagnostics = (isProtectedContainerBillingType:bool)\\r\\n{\\r\\n let ProtectedInstanceTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedInstance\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"),\\r\\n ProtectedInstanceCount = toint(columnifexists(\\\"ProtectedInstanceCount_s\\\", \\\"\\\")), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| where (BackupItemUniqueId == \\\"\\\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \\\"\\\" and not(isProtectedContainerBillingType))\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedInstanceTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedInstanceUnderResourceSpecific = (isProtectedContainerBillingType:bool)\\r\\n{\\r\\nlet ProtectedInstanceTable = AddonAzureBackupProtectedInstance \\r\\n| where OperationName == \\\"ProtectedInstance\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where (BackupItemUniqueId == \\\"\\\" and isProtectedContainerBillingType) or (ProtectedContainerUniqueId == \\\"\\\" and not(isProtectedContainerBillingType))\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedInstanceTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n// To show as per as on 'AsonDay'\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType), BackupItemProtectionState};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics  | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics\\t\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId, TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId,  ResourceId, StorageReplicationType \\r\\n};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific  | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific \\t\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId, TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId,  ResourceId, StorageReplicationType  \\r\\n};\\r\\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\\r\\n{\\r\\nLatestBackupItemDimensionTable | join kind= inner\\r\\n(CombinedTable | union isfuzzy = true  \\r\\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\\r\\n),\\r\\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId)\\r\\n  on BackupItemUniqueId == BackupItemUniqueId\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| project ProtectedContainerName = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\" and isempty(ProtectedContainerName)),split(BackupItemName,\\\";\\\")[0],ProtectedContainerName), BackupItemUniqueId, BackupItemName, ProtectedContainerUniqueId, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, TimeGenerated, ResourceId, StorageReplicationType\\r\\n| project BackupItemUniqueId, ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, \\r\\nBMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, TimeGenerated, ResourceId, StorageReplicationType\\r\\n| parse BMSTypeWithBackupItemType with BMSType:string\\\"/\\\" *\\r\\n};\\r\\nlet LatestBackupItemInfoTable = (){\\r\\n// projecting TimeRangeDay to distill the report for RangeEndDay\\r\\nLatestBackupItemAssociationAndStorageConsumptionTable | project BackupItemUniqueId, ContainerNameWithBackupItemName, BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, TimeRangeEndDay = startofday(TimeGenerated), BMSType, ResourceId, StorageReplicationType\\r\\n};\\r\\nlet LatestProtectedContainerInfoTableExcludingDPMVMs = (){\\r\\n// projecting TimeRangeDay to distill the report for RangeEndDay\\r\\nLatestBackupItemAssociationAndStorageConsumptionTable \\r\\n| where not(BMSTypeWithBackupItemType has DPMVMwareVM or BMSTypeWithBackupItemType has DPMHyperVVM)\\r\\n| summarize StorageConsumedInMBs = sum(StorageConsumedInMBs), StorageAllocatedInMBs= sum(StorageAllocatedInMBs), BackupItemFrontEndSize = sum(BackupItemFrontEndSize), ProtectedContainerName = any(ProtectedContainerName), TimeRangeEndDay = startofday(any(TimeGenerated)),\\r\\n BMSType = iff((any(BMSTypeWithBackupItemType) startswith \\\"AzureWorkload\\\"), any(BMSTypeWithBackupItemType), any(BMSType)), StorageReplicationType = any(StorageReplicationType), ResourceId = any(ResourceId) by  ProtectedContainerUniqueId\\r\\n};\\r\\nlet LatestProtectedInstanceTable = (isProtectedContainerBillingType:bool) \\r\\n{CombinedTable | union isfuzzy = true \\r\\n(ProtectedInstanceUnderAzureDiagnostics(isProtectedContainerBillingType)),\\r\\n(ProtectedInstanceUnderResourceSpecific(isProtectedContainerBillingType))\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n// ProtectedInstance is at BillingEntity level. BMSType can be the filter used.\\r\\n| where BackupManagementType in (ExtractedBMSType) or \\\"'*'\\\" in (@\\\"{BMSTypeWithBackupItemTypeParam}\\\") \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, ProtectedContainerUniqueId\\r\\n| project BackupItemUniqueId, ProtectedContainerUniqueId, BackupManagementType, ResourceId, TimeGenerated, ProtectedInstanceCount, TimeRangeEndDay = startofday(TimeGenerated), StorageReplicationType\\r\\n};\\r\\nlet LatestProtectedInstanceTableFromProtectedContainerUniqueId = ()\\r\\n{ \\r\\nLatestProtectedInstanceTable(true)\\r\\n| join kind= rightouter (LatestProtectedContainerInfoTableExcludingDPMVMs ) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| project TimeRangeEndDay = TimeRangeEndDay1, ProtectedInstanceCount, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, BackupManagementType, BMSType, BillingEntityType = \\\"ProtectedContainer\\\", BillingEntityName = ProtectedContainerName, \\r\\n BillingEntityUniqueId = ProtectedContainerUniqueId1, ResourceId = ResourceId1, StorageReplicationType = StorageReplicationType1\\r\\n};\\r\\nlet LatestProtectedInstanceTableFromBackupItemUniqueId = ()\\r\\n{ \\r\\nLatestProtectedInstanceTable(false)\\r\\n| join kind= rightouter \\r\\n// applicable only for DPM VM Scenarios\\r\\n(LatestBackupItemInfoTable | where BMSTypeWithBackupItemType has DPMVMwareVM or BMSTypeWithBackupItemType has DPMHyperVVM ) \\r\\non BackupItemUniqueId == BackupItemUniqueId\\r\\n| project TimeRangeEndDay = TimeRangeEndDay1, ProtectedInstanceCount, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, BackupManagementType, BMSType, BillingEntityType = \\\"BackupItem\\\", BillingEntityName = ContainerNameWithBackupItemName, \\r\\n BillingEntityUniqueId = BackupItemUniqueId1, ResourceId = ResourceId1, StorageReplicationType = StorageReplicationType1\\r\\n};\\r\\nlet ProtectedInstanceMetric = ( ) \\r\\n{ union \\r\\n(LatestProtectedInstanceTableFromBackupItemUniqueId() ),\\r\\n(LatestProtectedInstanceTableFromProtectedContainerUniqueId())\\r\\n| project  BMSType, BackupItemFrontEndSize, StorageConsumedInMBs, BillingEntityUniqueId, BillingEntityName = iff(array_length(split(BillingEntityName, \\\"/\\\")) == 2, split(BillingEntityName,\\\"/\\\")[1], BillingEntityName), ProtectedInstanceCount, ResourceId, BillingEntityType, StorageReplicationType, TimeRangeEndDay, BackupManagementType\\r\\n| where BillingEntityName contains (@\\\"{BillingEntityName}\\\") or '*' in ('{BillingEntityName}')\\r\\n| summarize arg_max(TimeRangeEndDay, *) by BillingEntityUniqueId \\r\\n};\\r\\n// Display Tweaks for AFS and null ProtectedInstanceCount\\r\\n// Billing Entity is at BackupManagementType level and not at DS level. Hence BMSTypeWithBackupItemType can't be used.\\r\\nlet OutputTable = () {ProtectedInstanceMetric\\r\\n| project  BMSType = iff(isempty(BMSType), BackupManagementType, BMSType), BackupItemFrontEndSize = todouble(BackupItemFrontEndSize / 1), StorageConsumedInMBs = todouble(StorageConsumedInMBs / 1), BillingEntityUniqueId, BillingEntityName, ProtectedInstanceCount = todouble(ProtectedInstanceCount)/10, ResourceId, BillingEntityType, StorageReplicationType\\r\\n| project BillingEntityUniqueId, BillingEntityType, BillingEntityName, BMSType, ProtectedInstanceCount = iff(isempty(ProtectedInstanceCount) or BMSType == \\\"AzureStorage\\\", 0.0 ,ProtectedInstanceCount), \\r\\n StorageConsumedInMBs = iff(isempty(StorageConsumedInMBs), todouble(0), StorageConsumedInMBs), BackupItemFrontEndSize = iff(isempty(BackupItemFrontEndSize), todouble(0), BackupItemFrontEndSize), ResourceId, StorageReplicationType\\r\\n| extend TempColumn = column_ifexists(tostring('{ProtectedInstanceMetricSortBy}'), \\\"sum_StorageConsumedInMBs\\\")\\r\\n| extend ColumnToBeSorted = iff(tostring('{ProtectedInstanceMetricOrder}') == \\\"Ascending\\\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\\r\\n| sort by ColumnToBeSorted asc nulls last, BillingEntityUniqueId asc\\r\\n| extend row_num = row_number()\\r\\n| extend page_num = tostring(((row_num-1)/{ProtectedInstanceMetricRowsPerGrid} + 1))\\r\\n| where page_num has ('{ProtectedInstanceMetricPageNumber}') or '*' in ('{ProtectedInstanceMetricPageNumber}')\\r\\n|  extend container_array = split(BillingEntityName,\\\";\\\")\\r\\n|  extend container_arraylen = array_length(container_array)\\r\\n| project ContainerFriendlyName = container_array[(container_arraylen-1)], ContainerResourceGroup = iff(container_arraylen == 3, container_array[(container_arraylen-2)], \\\"(none)\\\"), BillingEntityType, BMSType, ProtectedInstanceCount, StorageConsumedInMBs, StorageReplicationType = iff(StorageReplicationType == \\\"Invalid\\\", \\\"GeoRedundant\\\", StorageReplicationType), BackupItemFrontEndSize, ResourceId, BillingEntityName \\r\\n| parse ResourceId with * \\\"/SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS/\\\" VaultResourceGroup:string \\\"/PROVIDERS/\\\" *};\\r\\nlet CustomOutputTable = () {BMSTypeMappingTable\\r\\n| join kind= rightouter (OutputTable) \\r\\non BMSType == BMSType\\r\\n| project BillingEntityName, ContainerFriendlyName, ContainerResourceGroup, BillingEntityType, BMSType = iff(CustomBMSType == \\\"\\\",BMSType1,CustomBMSType), ProtectedInstanceCount, StorageConsumedInMBs, StorageReplicationType = iff(StorageReplicationType == \\\"Invalid\\\", \\\"GeoRedundant\\\", StorageReplicationType), BackupItemFrontEndSize, ResourceId, VaultResourceGroup, SubscriptionId};\\r\\nCustomOutputTable \",\"size\":3,\"title\":\"Protected Instances and Storage by Billed Entity\",\"noDataMessage\":\"No records found for the selected time range and scope\",\"exportFieldName\":\"BillingEntityUniqueId\",\"exportParameterName\":\"SelectedBillingEntityUniqueId\",\"exportDefaultValue\":\"*\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"BillingEntityName\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ContainerFriendlyName\",\"formatter\":1,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ResourceGroup\",\"formatter\":14,\"formatOptions\":{\"linkTarget\":null,\"showIcon\":true}},{\"columnMatch\":\"BackupItemFriendlyName\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"BillingEntityType\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"BMSType\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ProtectedInstanceCount\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"minimumFractionDigits\":1,\"maximumFractionDigits\":1}}},{\"columnMatch\":\"StorageConsumedInMBs\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"minimumFractionDigits\":2,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"StorageReplicationType\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"BackupItemFrontEndSize\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ResourceId\",\"formatter\":13,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true}},{\"columnMatch\":\"SubscriptionId\",\"formatter\":15,\"formatOptions\":{\"linkTarget\":null,\"showIcon\":true}},{\"columnMatch\":\"BillingEntityUniqueId\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"TempColumn\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ColumnToBeSorted\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"row_num\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"page_num\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"BackupManagementType\",\"formatter\":1,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"sum_BackupItemFrontEndSize\",\"formatter\":5,\"formatOptions\":{\"palette\":\"orange\",\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":4}}},{\"columnMatch\":\"sum_StorageConsumedInMB\",\"formatter\":1,\"formatOptions\":{\"palette\":\"orange\",\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"minimumFractionDigits\":2,\"maximumFractionDigits\":2}}}],\"labelSettings\":[{\"columnId\":\"BillingEntityName\",\"label\":\"\"},{\"columnId\":\"ContainerFriendlyName\",\"label\":\"Billed Entity\"},{\"columnId\":\"ContainerResourceGroup\",\"label\":\"Entity Resource Group\"},{\"columnId\":\"BillingEntityType\",\"label\":\"Billed Entity Type\"},{\"columnId\":\"BMSType\",\"label\":\"Backup Management Type\"},{\"columnId\":\"ProtectedInstanceCount\",\"label\":\"# Protected Instances\"},{\"columnId\":\"StorageConsumedInMBs\",\"label\":\"Cloud Storage (MB)\"},{\"columnId\":\"StorageReplicationType\",\"label\":\"Storage Replication Type\"},{\"columnId\":\"ResourceId\",\"label\":\"Vault\"},{\"columnId\":\"VaultResourceGroup\",\"label\":\"Vault Resource Group\"},{\"columnId\":\"SubscriptionId\",\"label\":\"Subscription\"}]},\"sortBy\":[],\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Key\",\"formatOptions\":{\"showIcon\":true}},\"leftContent\":{\"columnMatch\":\"Value\",\"formatOptions\":{\"showIcon\":true}},\"showBorder\":true}}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"showPin": true,
		"name": "Usage-Grid1",
		"styleSettings": {
		  "showBorder": true
		}
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}