{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Subscriptions}"
        ],
        "parameters": [
          {
            "id": "d1f42f81-eb8f-4653-a0ff-38564d7487b4",
            "version": "KqlParameterItem/1.0",
            "name": "Subscriptions",
            "type": 6,
            "description": "Subscriptions to filter the list of workspaces",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": false,
              "selectAllValue": ""
            }
          },
          {
            "id": "2373a24f-ad32-4909-a7f6-59b373dcde6c",
            "version": "KqlParameterItem/1.0",
            "name": "Workspaces",
            "type": 5,
            "description": "LA Workspaces configured in vault diagnostic settings",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type =~ 'microsoft.operationalinsights/workspaces' | project id",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8c4ae44c-fa9a-4498-aedc-736a56e64b43",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "label": "Time Range",
            "type": 4,
            "description": "Time Range",
            "value": {
              "durationMs": 604800000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "bb7c8d78-cf0c-4b47-af95-1c07ac0f6829",
            "version": "KqlParameterItem/1.0",
            "name": "ErrorHandle",
            "label": "Error Handle",
            "type": 1,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Files & Folder\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\"];\r\nlet CustomBMSTypeParam = \"'Azure Backup Agent','Azure Storage (Azure Files)','Azure Virtual Machine','DPM','SAP ASE in Azure VM','SAP HANA in Azure VM','SQL in Azure VM'\";\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project  BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\") \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType \r\n};\r\nlet OutputTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| distinct BackupManagementType, BackupItemType\r\n| distinct strcat(BackupManagementType, \"/\", BackupItemType)\r\n| project BMSTypeWithBackupItemType = Column1};\r\nlet CustomOutputTable = () {BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\r\n| project BMSTypeWithBackupItemType1, CustomBMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1,CustomBMSTypeWithBackupItemType )};\r\nCustomOutputTable\r\n// convert to a list of internal names\r\n| project  s2 =  strcat(\"'\", CustomBMSTypeWithBackupItemType, \"'\"), s1 = CustomBMSTypeParam, s3 =  strcat(\"'\", BMSTypeWithBackupItemType1, \"'\") \r\n| mv-apply s2 = split(s2, \",\") to typeof(string) on (\r\n\twhere indexof(s1, substring(s2, 1, indexof(s2, \"/\") - 1)) >= 1)\r\n| summarize result = array_strcat(make_list(s3), \",\")\r\n| project result ",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "ab02c6b3-a9c9-4a3b-86fe-0694974335b0",
            "version": "KqlParameterItem/1.0",
            "name": "CustomBMSTypeParam",
            "label": "Backup Management Type",
            "type": 2,
            "description": "Backup Management Type",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "'Azure Backup Agent','Azure Storage (Azure Files)','Azure Virtual Machine','DPM','SAP ASE in Azure VM','SAP HANA in Azure VM','SQL in Azure VM'"
            },
            "jsonData": "[    \r\n\t\"Azure Backup Agent\",\r\n    \"Azure Storage (Azure Files)\",\r\n    \"Azure Virtual Machine\",\r\n    \"DPM\",\r\n    \"SAP ASE in Azure VM\",\r\n    \"SAP HANA in Azure VM\",\r\n    \"SQL in Azure VM\"\r\n]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "f61266ea-f32a-4b60-8eeb-f3b428ac4951",
            "version": "KqlParameterItem/1.0",
            "name": "BMSTypeWithBackupItemTypeParam",
            "type": 1,
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// BMSTypeWithBackupItemType MappingTable\r\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\r\n    [ \"AzureWorkload/SAPHanaDatabase\", \"SAP HANA in Azure VM/SAP HANA in Azure VM\",\r\n      \"AzureWorkload/SQLDataBase\", \"SQL in Azure VM/SQL Database\",\r\n      \"IaaSVM/VM\", \"Azure Virtual Machine/Azure VM\",\r\n\t  \"AzureStorage/AzureFileShare\", \"Azure Storage (Azure Files)/Azure File Share\",\r\n\t  \"AzureWorkload/SAPAseDatabase\", \"SAP ASE in Azure VM/SAP ASE in Azure VM\",\r\n\t  \"MAB/FileFolder\", \"Azure Backup Agent/Files and Folder\",\r\n\t  \"DPM/SQLDB\", \"DPM/SQL Database\",\r\n\t  \"DPM/VMwareVM\", \"DPM/VMWare VM\",\r\n\t  \"DPM/HyperVVM\", \"DPM/Hyper-V VM\",\r\n\t  \"DPM/FileFolder\", \"DPM/Files and Folder\",\r\n\t  \"DPM/Client\", \"DPM/Files & Folder\",\r\n\t  \"DPM/SystemState\", \"DPM/System State\",\r\n\t  \"DPM/Sharepoint\", \"DPM/Sharepoint Database\",\r\n\t  \"DPM/Exchange\", \"DPM/Exchange Mailbox Database\"];\r\n//let CustomBMSTypeParam = \"'SQL in Azure VM','Azure Virtual Machine','Azure Storage (Azure Files)','Azure Backup Agent','DPM'\";\r\nlet CustomBMSTypeParam = @\"{CustomBMSTypeParam}\";\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project  BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\") \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType \r\n};\r\nlet OutputTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| distinct BackupManagementType, BackupItemType\r\n| distinct strcat(BackupManagementType, \"/\", BackupItemType)\r\n| project BMSTypeWithBackupItemType = Column1};\r\nlet CustomOutputTable = () {BMSTypeWithBackupItemTypeMappingTable\r\n| join kind= rightouter (OutputTable) \r\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\r\n| project BMSTypeWithBackupItemType1, CustomBMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \"\",BMSTypeWithBackupItemType1,CustomBMSTypeWithBackupItemType )};\r\nCustomOutputTable\r\n// convert to a list of internal names\r\n| project  s2 =  strcat(\"'\", CustomBMSTypeWithBackupItemType, \"'\"), s1 = CustomBMSTypeParam, s3 =  strcat(\"'\", BMSTypeWithBackupItemType1, \"'\") \r\n| mv-apply s2 = split(s2, \",\") to typeof(string) on (\r\n\twhere indexof(s1, substring(s2, 1, indexof(s2, \"/\") - 1)) >= 1)\r\n| summarize result = array_strcat(make_list(s3), \",\")\r\n| project result ",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.resources/subscriptions"
      },
      "name": "Overview-WorkspaceParameterBlock"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "678680e5-76b5-4db8-bbef-5f73942caf2e",
            "version": "KqlParameterItem/1.0",
            "name": "VaultSubscription",
            "label": "Subscription Name",
            "type": 6,
            "description": "Subscription(s) under which the vault(s) exist",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId \r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType,  ResourceId \r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n};\r\nCombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| project BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), SubscriptionId \r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| distinct SubscriptionId",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2a83acc5-2123-476f-8a4c-da2fddf231a1",
            "version": "KqlParameterItem/1.0",
            "name": "Location",
            "label": "Vault Location",
            "type": 2,
            "description": "Location(s) in which the vault(s) were created",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used -  BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| distinct ResourceId, AzureDataCenter, VaultName\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| distinct ResourceId, AzureDataCenter, VaultName;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" * \r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics() | project AzureDataCenter),\r\n(BackupItemUnderResourceSpecific() | project AzureDataCenter)\r\n| distinct AzureDataCenter};\r\nLatestBackupItemTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "fefd31fa-2774-43ca-8cc3-44d477c969f0",
            "version": "KqlParameterItem/1.0",
            "name": "Vault",
            "label": "Vault Name",
            "type": 2,
            "description": "Name(s) of the vault(s)",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used -  BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\nlet RangeStart = startofday({TimeRange:start});\r\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\r\n// High-level Functions\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceId\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId, AzureDataCenter, VaultName\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"Vault\" \r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| distinct ResourceId, AzureDataCenter, VaultName;\r\n};\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), BackupItemType = columnifexists(\"BackupItemType_s\", \"\"), ResourceId\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderAzureDiagnostics | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| project BackupManagementType, BackupItemType, BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType), ResourceId\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\r\n| parse ResourceId with * \"SUBSCRIPTIONS/\" SubscriptionId:string \"/RESOURCEGROUPS\" *\r\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\r\n;\r\nVaultUnderResourceSpecific | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics() | project VaultName),\r\n(BackupItemUnderResourceSpecific() | project VaultName)\r\n| distinct VaultName};\r\nLatestBackupItemTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "doNotRunWhenHidden": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Workspaces",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "ErrorHandle",
          "comparison": "isNotEqualTo",
          "value": ""
        },
        {
          "parameterName": "CustomBMSTypeParam",
          "comparison": "isNotEqualTo"
        },
        {
          "parameterName": "BMSTypeWithBackupItemTypeParam",
          "comparison": "isNotEqualTo"
        }
      ],
      "conditionalVisibility": {
        "parameterName": "Workspaces",
        "comparison": "isNotEqualTo"
      },
      "customWidth": "60",
      "name": "Overview-ReportParameterBlock",
      "styleSettings": {
        "maxWidth": "100%"
      }
    },{
		"type": 9,
		"content": "{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Workspaces}\"],\"parameters\":[{\"id\":\"a29464c3-34f0-4d60-82bb-614b8128b7f9\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"PolicyName\",\"label\":\"Search Policy Name\",\"type\":1,\"description\":\"Use to search by Policy Name\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"value\":\"\"}],\"style\":\"above\",\"doNotRunWhenHidden\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"name": "PolicyDetails-SearchParameterBlock"
	  },
	  {
		"type": 1,
		"content": "{\"json\":\"______________\"}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"name": "PolicyDetails-DividingLine1"
	  },
	  {
		"type": 3,
		"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId, StorageReplicationType = StorageReplicationType_s\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemFrontEndSizeTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemFrontEndSize = todouble(columnifexists(\\\"BackupItemFrontEndSize_s\\\", \\\"\\\")), BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let StorageAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"StorageAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), StorageUniqueId = columnifexists(\\\"StorageUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), StorageConsumedInMBs = todouble(columnifexists(\\\"StorageConsumedInMBs_s\\\", \\\"\\\")), \\r\\nStorageAllocatedInMBs = todouble(columnifexists(\\\"StorageAllocatedInMBs_s\\\", \\\"\\\")),  TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet StorageAssociationTable = AddonAzureBackupStorage \\r\\n| where OperationName == \\\"StorageAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet PolicyUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet PolicyTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Policy\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   PolicyTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet PolicyUnderResourceSpecific = ()\\r\\n{\\r\\nlet PolicyTable = AddonAzureBackupPolicy\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Policy\\\" \\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   PolicyTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n// To show as per as on 'AsonDay'\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType), BackupItemProtectionState, ResourceId};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\\r\\n{\\r\\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\\r\\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics \\r\\n\\t// To show as per as on 'AsonDay'\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\\r\\n};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\\r\\n{\\r\\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\\r\\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific \\r\\n\\t// To show as per as on 'AsonDay'\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\\r\\n};\\r\\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\\r\\n{\\r\\nLatestBackupItemDimensionTable | join kind= inner\\r\\n(CombinedTable | union isfuzzy = true  \\r\\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\\r\\n),\\r\\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\\r\\n// Filtering out entities not reported as on 'AsonDay'\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n)on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId, ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, \\r\\nBMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\\r\\n};\\r\\nlet PolicyTable = () {LatestBackupItemAssociationAndStorageConsumptionTable\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| where PolicyName contains (@\\\"{PolicyName}\\\") or '*' in (@\\\"{PolicyName}\\\")\\r\\n//| extend PolicyLink = strcat(ResourceId, \\\"/backupPolicies/\\\", PolicyName)\\r\\n//| summarize sum(BackupItemFrontEndSize), sum(StorageConsumedInMBs), count(BackupItemUniqueId), StorageReplicationType = any(StorageReplicationType), PolicyName = //any(PolicyName), ResourceId = any(ResourceId) by PolicyLink = strcat(ResourceId, \\\"/backupPolicies/\\\", PolicyName)\\r\\n};\\r\\nlet TotalPolicyCount = () {(CombinedTable | union isfuzzy = true  \\r\\n(PolicyUnderAzureDiagnostics()\\r\\n),\\r\\n(PolicyUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId, ResourceId\\r\\n// Filtering out entities not reported as on 'AsonDay'\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n)\\r\\n| count};\\r\\nlet ActivePolicyCount = () \\r\\n{PolicyTable \\r\\n| summarize count(BackupItemUniqueId) by PolicyUniqueId, ResourceId\\r\\n| extend active = iff(PolicyUniqueId != \\\"\\\", 1, 0)\\r\\n| summarize ActivePolicy = sum(active)\\r\\n| extend  Key = pack_array(\\\"Active Policies\\\"), Value = pack_array( ActivePolicy), SubText = pack_array(\\\"Count\\\"), Row = pack_array(-2)\\r\\n| project Key, Value, SubText, Row\\r\\n| mvexpand  Key, Value, SubText, Row};\\r\\nlet StorageByStorageReplication = ()\\r\\n{PolicyTable\\r\\n| summarize sum(StorageConsumedInMBs) by StorageReplicationType \\r\\n| order by StorageReplicationType | extend rn = row_number()\\r\\n| extend  Key = pack_array(StorageReplicationType), Value = pack_array( sum_StorageConsumedInMBs), SubText = pack_array(\\\"Cloud Storage (MB)\\\"), Row = pack_array(rn)\\r\\n| project Key, Value, SubText, Row\\r\\n| mvexpand  Key, Value, SubText, Row\\r\\n};\\r\\nunion  ActivePolicyCount, StorageByStorageReplication \\r\\n| order by toint(Row) asc\\r\\n| order by toint(Row) asc\",\"size\":3,\"noDataMessage\":\"No records found for the selected time range and scope\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Key\",\"formatOptions\":{\"showIcon\":true}},\"subtitleContent\":{\"columnMatch\":\"SubText\",\"formatOptions\":{\"showIcon\":true}},\"leftContent\":{\"columnMatch\":\"Value\",\"formatter\":12,\"formatOptions\":{\"showIcon\":true}},\"showBorder\":true}}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"name": "PolicyDetails-Tiles"
	  },
	  {
		"type": 1,
		"content": "{\"json\":\"______________\"}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"name": "PolicyDetails-DividingLine2"
	  },
	  {
		"type": 3,
		"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemFrontEndSizeTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemFrontEndSize = todouble(columnifexists(\\\"BackupItemFrontEndSize_s\\\", \\\"\\\")), BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\n let StorageAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"StorageAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), StorageUniqueId = columnifexists(\\\"StorageUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), StorageConsumedInMBs = todouble(columnifexists(\\\"StorageConsumedInMBs_s\\\", \\\"\\\")), \\r\\nStorageAllocatedInMBs = todouble(columnifexists(\\\"StorageAllocatedInMBs_s\\\", \\\"\\\")),  TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nlet StorageAssociationTable = AddonAzureBackupStorage \\r\\n| where OperationName == \\\"StorageAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet PolicyUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet PolicyTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Policy\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   PolicyTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet PolicyUnderResourceSpecific = ()\\r\\n{\\r\\nlet PolicyTable = AddonAzureBackupPolicy\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Policy\\\" \\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   PolicyTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType), BackupItemProtectionState};\\r\\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n// To-do: Figure out why ResourceId is needed for policy join\\r\\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId , TimeRangeEndDay\\r\\n | join kind= leftouter (\\r\\n   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ProtectedContainerName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\\r\\n| join kind= leftouter (\\r\\n  StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \\r\\n};\\r\\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n// To-do: Figure out why ResourceId is needed for policy join\\r\\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay \\r\\n | join kind= leftouter (\\r\\n   BackupItemFrontEndSizeHistoryUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ProtectedContainerName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\\r\\n| join kind= leftouter (\\r\\n  StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \\r\\n};\\r\\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\\r\\n{\\r\\nTotalBackupItemDimensionTable | join kind= inner\\r\\n(CombinedTable | union isfuzzy = true  \\r\\n(BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics()\\r\\n),\\r\\n(BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\\r\\n  on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project TimeGenerated,  ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId, PolicyName, ProtectedContainerUniqueId, ProtectedContainerName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, ResourceId, BackupItemUniqueId, TimeRangeEndDay\\r\\n};\\r\\nlet StorageHistoryMetric = ()\\r\\n{\\r\\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable\\r\\n// To-do : 1 invalidDate record\\r\\n//| where isnotempty(TimeRangeEndDay)\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| where PolicyName contains (@\\\"{PolicyName}\\\") or '*' in (@\\\"{PolicyName}\\\")\\r\\n};\\r\\nStorageHistoryMetric\\r\\n| where PolicyUniqueId != \\\"\\\"\\r\\n| summarize ActivePolicyCount = dcount(strcat(ResourceId, PolicyUniqueId), 4) by  TimeRangeEndDay\",\"size\":0,\"aggregation\":5,\"title\":\"Active Policy Trend\",\"noDataMessage\":\"No records found for the selected time range and scope\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeRangeEndDay\",\"sortOrder\":2}]},\"sortBy\":[{\"itemKey\":\"TimeRangeEndDay\",\"sortOrder\":2}],\"chartSettings\":{\"xAxis\":\"TimeRangeEndDay\",\"seriesLabelSettings\":[{\"seriesName\":\"ActivePolicyCount\",\"label\":\"# Active Policies\"}]}}",
		"customWidth": "50",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo",
		  "value": ""
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo",
			"value": ""
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"showPin": true,
		"name": "PolicyDetails-ActivePoliciesTrendGraph"
	  },
	  {
		"type": 3,
		"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| distinct ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemFrontEndSizeTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemFrontEndSize = todouble(columnifexists(\\\"BackupItemFrontEndSize_s\\\", \\\"\\\")), BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\n let StorageAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"StorageAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), StorageUniqueId = columnifexists(\\\"StorageUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), StorageConsumedInMBs = todouble(columnifexists(\\\"StorageConsumedInMBs_s\\\", \\\"\\\")), \\r\\nStorageAllocatedInMBs = todouble(columnifexists(\\\"StorageAllocatedInMBs_s\\\", \\\"\\\")),  TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nlet StorageAssociationTable = AddonAzureBackupStorage \\r\\n| where OperationName == \\\"StorageAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet PolicyUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet PolicyTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Policy\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   PolicyTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet PolicyUnderResourceSpecific = ()\\r\\n{\\r\\nlet PolicyTable = AddonAzureBackupPolicy\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Policy\\\" \\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   PolicyTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet TotalBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType), BackupItemProtectionState};\\r\\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics = ()\\r\\n{\\r\\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationHistoryUnderAzureDiagnostics |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n// To-do: Figure out why ResourceId is needed for policy join\\r\\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId , TimeRangeEndDay\\r\\n | join kind= leftouter (\\r\\n   BackupItemFrontEndSizeHistoryUnderAzureDiagnostics | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ProtectedContainerName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\\r\\n| join kind= leftouter (\\r\\n  StorageAssociationHistoryUnderAzureDiagnostics | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \\r\\n};\\r\\nlet BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific = ()\\r\\n{\\r\\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationHistoryUnderResourceSpecific |  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n// To-do: Figure out why ResourceId is needed for policy join\\r\\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay \\r\\n | join kind= leftouter (\\r\\n   BackupItemFrontEndSizeHistoryUnderResourceSpecific | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId  \\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project TimeGenerated, TimeRangeEndDay, BackupItemUniqueId, BackupItemFrontEndSize, PolicyUniqueId, PolicyName, ProtectedContainerName, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ResourceId\\r\\n | summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay\\r\\n| join kind= leftouter (\\r\\n  StorageAssociationHistoryUnderResourceSpecific | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated, TimeRangeEndDay, ResourceId\\r\\n) on BackupItemUniqueId == BackupItemUniqueId, TimeRangeEndDay == TimeRangeEndDay\\r\\n| project BackupItemUniqueId,TimeGenerated, TimeRangeEndDay,ResourceId,  ProtectedContainerUniqueId, ProtectedContainerName, PolicyUniqueId, PolicyName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs \\r\\n};\\r\\nlet LatestBackupItemAssociationAndStorageConsumptionHistoryTable = ()\\r\\n{\\r\\nTotalBackupItemDimensionTable | join kind= inner\\r\\n(CombinedTable | union isfuzzy = true  \\r\\n(BackupItemAssociationAndStorageConsumptionHistoryUnderAzureDiagnostics()\\r\\n),\\r\\n(BackupItemAssociationAndStorageConsumptionHistoryUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay)\\r\\n  on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project TimeGenerated,  ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId, PolicyName, ProtectedContainerUniqueId, ProtectedContainerName, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState, ResourceId, BackupItemUniqueId, TimeRangeEndDay\\r\\n};\\r\\nlet StorageHistoryMetric = ()\\r\\n{\\r\\nLatestBackupItemAssociationAndStorageConsumptionHistoryTable\\r\\n// To-do : 1 invalidDate record\\r\\n//| where isnotempty(TimeRangeEndDay)\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| where PolicyName contains (@\\\"{PolicyName}\\\") or '*' in (@\\\"{PolicyName}\\\")\\r\\n};\\r\\nStorageHistoryMetric\\r\\n| summarize StorageConsumedInMBs = sum(StorageConsumedInMBs) by  TimeRangeEndDay\",\"size\":0,\"aggregation\":5,\"title\":\"Cloud Storage Trend\",\"noDataMessage\":\"No records found for the selected time range and scope\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeRangeEndDay\",\"sortOrder\":2}]},\"sortBy\":[{\"itemKey\":\"TimeRangeEndDay\",\"sortOrder\":2}],\"chartSettings\":{\"xAxis\":\"TimeRangeEndDay\",\"seriesLabelSettings\":[{\"seriesName\":\"StorageConsumedInMBs\",\"label\":\"Cloud Storage (MB)\"}]}}",
		"customWidth": "50",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo",
		  "value": ""
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo",
			"value": ""
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"showPin": true,
		"name": "PolicyDetails-CloudStorageTrendGraph"
	  },
	  {
		"type": 1,
		"content": "{\"json\":\"_________________\"}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"name": "PolicyDetails-DividingLine3"
	  },
	  {
		"type": 9,
		"content": "{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Workspaces}\"],\"parameters\":[{\"id\":\"5dc2a074-b510-44f2-9530-cfcbd159b59c\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"BillingMetricSortBy\",\"label\":\"Sort By\",\"type\":2,\"description\":\"Use to sort by a certain column\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[{ \\\"value\\\": \\\"count_BackupItemUniqueId\\\", \\\"label\\\": \\\"# BackupItems\\\" },\\r\\n{ \\\"value\\\": \\\"sum_StorageConsumedInMBs\\\", \\\"label\\\": \\\"Vault Storage (MB)\\\", \\\"selected\\\": \\\"true\\\" }]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"df3cc03c-53f7-4523-a29b-e50bf1b6d922\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"BillingMetricOrder\",\"label\":\"Order\",\"type\":2,\"description\":\"Use to specify the sort order: Ascending/Descending\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"Ascending\\\"},\\r\\n    { \\\"value\\\":\\\"Descending\\\", \\\"selected\\\":true}\\r\\n]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"44b4c590-ecc4-4d3d-840e-16c4638000d4\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"StorageMetricRowsPerGrid\",\"label\":\"Rows Per Page\",\"type\":2,\"description\":\"Number of rows to display in grid view\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":10, \\\"label\\\":\\\"10\\\", \\\"selected\\\":true  },\\r\\n    { \\\"value\\\":25, \\\"label\\\":\\\"25\\\" },\\r\\n    { \\\"value\\\":50, \\\"label\\\":\\\"50\\\" },\\r\\n    { \\\"value\\\":100, \\\"label\\\":\\\"100\\\" },\\r\\n    { \\\"value\\\":250, \\\"label\\\":\\\"250\\\" },\\r\\n    { \\\"value\\\":500, \\\"label\\\":\\\"500\\\" },\\r\\n    { \\\"value\\\":1000, \\\"label\\\":\\\"1000\\\" }\\r\\n]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"90478836-8cb6-4235-98a0-7724ac01d29a\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"StorageMetricPageNumber\",\"label\":\"Page\",\"type\":2,\"description\":\"Select Page Number\",\"isRequired\":true,\"query\":\"// Time variable used\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId, StorageReplicationType = StorageReplicationType_s\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemFrontEndSizeTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemFrontEndSize = todouble(columnifexists(\\\"BackupItemFrontEndSize_s\\\", \\\"\\\")), BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let StorageAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"StorageAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), StorageUniqueId = columnifexists(\\\"StorageUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), StorageConsumedInMBs = todouble(columnifexists(\\\"StorageConsumedInMBs_s\\\", \\\"\\\")), \\r\\nStorageAllocatedInMBs = todouble(columnifexists(\\\"StorageAllocatedInMBs_s\\\", \\\"\\\")),  TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet StorageAssociationTable = AddonAzureBackupStorage \\r\\n| where OperationName == \\\"StorageAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet PolicyUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet PolicyTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Policy\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   PolicyTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet PolicyUnderResourceSpecific = ()\\r\\n{\\r\\nlet PolicyTable = AddonAzureBackupPolicy\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Policy\\\" \\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   PolicyTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n// To show as per as on 'AsonDay'\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType), BackupItemProtectionState, ResourceId};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\\r\\n{\\r\\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\\r\\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics \\r\\n\\t// To show as per as on 'AsonDay'\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\\r\\n};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\\r\\n{\\r\\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\\r\\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific \\r\\n\\t// To show as per as on 'AsonDay'\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\\r\\n};\\r\\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\\r\\n{\\r\\nLatestBackupItemDimensionTable | join kind= inner\\r\\n(CombinedTable | union isfuzzy = true  \\r\\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\\r\\n),\\r\\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\\r\\n// Filtering out entities not reported as on 'AsonDay'\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n)on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId, ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, \\r\\nBMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\\r\\n};\\r\\nlet StorageMetric = ()\\r\\n{LatestBackupItemAssociationAndStorageConsumptionTable\\r\\n| where PolicyUniqueId != \\\"\\\"\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| where PolicyName contains (@\\\"{PolicyName}\\\") or '*' in (@\\\"{PolicyName}\\\")\\r\\n| summarize sum(BackupItemFrontEndSize), sum(StorageConsumedInMBs), count(BackupItemUniqueId), StorageReplicationType = any(StorageReplicationType), PolicyName = any(PolicyName), ResourceId = any(ResourceId), PolicyUniqueId = any(PolicyUniqueId) by PolicyLink = strcat(ResourceId, PolicyUniqueId)\\r\\n};\\r\\nStorageMetric\\r\\n| summarize c=count()\\r\\n| project num = (c-1)/{StorageMetricRowsPerGrid} + 1\\r\\n| project nums = range(1,num,1), num\\r\\n| mvexpand nums\\r\\n| project nums = tostring(nums), num = strcat(tostring(nums),\\\" of \\\",tostring(num))\",\"crossComponentResources\":[\"{Workspaces}\"],\"value\":\"1\",\"typeSettings\":{\"additionalResourceOptions\":[]},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"above\",\"doNotRunWhenHidden\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"name": "PolicyDetails-Grid1ParameterBlock"
	  },
	  {
		"type": 3,
		"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId, StorageReplicationType = StorageReplicationType_s\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemFrontEndSizeTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemFrontEndSize = todouble(columnifexists(\\\"BackupItemFrontEndSize_s\\\", \\\"\\\")), BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let StorageAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"StorageAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), StorageUniqueId = columnifexists(\\\"StorageUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), StorageConsumedInMBs = todouble(columnifexists(\\\"StorageConsumedInMBs_s\\\", \\\"\\\")), \\r\\nStorageAllocatedInMBs = todouble(columnifexists(\\\"StorageAllocatedInMBs_s\\\", \\\"\\\")),  TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet StorageAssociationTable = AddonAzureBackupStorage \\r\\n| where OperationName == \\\"StorageAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet PolicyUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet PolicyTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Policy\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   PolicyTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet PolicyUnderResourceSpecific = ()\\r\\n{\\r\\nlet PolicyTable = AddonAzureBackupPolicy\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Policy\\\" \\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   PolicyTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n// To show as per as on 'AsonDay'\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType), BackupItemProtectionState, ResourceId};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\\r\\n{\\r\\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\\r\\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics \\r\\n\\t// To show as per as on 'AsonDay'\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\\r\\n};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\\r\\n{\\r\\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\\r\\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific \\r\\n\\t// To show as per as on 'AsonDay'\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\\r\\n};\\r\\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\\r\\n{\\r\\nLatestBackupItemDimensionTable | join kind= inner\\r\\n(CombinedTable | union isfuzzy = true  \\r\\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\\r\\n),\\r\\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\\r\\n// Filtering out entities not reported as on 'AsonDay'\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n)on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project ProtectedContainerName = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\" and isempty(ProtectedContainerName)),split(BackupItemName,\\\";\\\")[0],ProtectedContainerName), BackupItemName, ProtectedContainerUniqueId, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType, BackupItemUniqueId\\r\\n| project BackupItemUniqueId, ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, \\r\\nBMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\\r\\n};\\r\\nLatestBackupItemAssociationAndStorageConsumptionTable\\r\\n| where PolicyUniqueId != \\\"\\\"\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n| where PolicyName contains (@\\\"{PolicyName}\\\") or '*' in (@\\\"{PolicyName}\\\")\\r\\n| summarize sum(BackupItemFrontEndSize), sum(StorageConsumedInMBs), count(BackupItemUniqueId), StorageReplicationType = any(StorageReplicationType), PolicyName = any(PolicyName), ResourceId = any(ResourceId), PolicyUniqueId = any(PolicyUniqueId) by PolicyLink = strcat(ResourceId, PolicyUniqueId)\\r\\n| extend TempColumn = column_ifexists(tostring('{BillingMetricSortBy}'), \\\"sum_StorageConsumedInMBs\\\")\\r\\n| extend ColumnToBeSorted = iff(tostring('{BillingMetricOrder}') == \\\"Ascending\\\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\\r\\n| sort by ColumnToBeSorted asc nulls last, PolicyLink asc\\r\\n| extend row_num = row_number()\\r\\n| extend page_num = tostring(((row_num-1)/{StorageMetricRowsPerGrid} + 1))\\r\\n| where page_num has ('{StorageMetricPageNumber}') or '*' in ('{StorageMetricPageNumber}') \\r\\n| project PolicyName, count_BackupItemUniqueId, sum_StorageConsumedInMBs, ResourceId, StorageReplicationType, PolicyLink, PolicyUniqueId\",\"size\":3,\"title\":\"Backup Items and Storage by Policy\",\"noDataMessage\":\"No records found for the selected time range and scope\",\"exportFieldName\":\"PolicyLink\",\"exportParameterName\":\"SelectedPolicyLink\",\"exportDefaultValue\":\"*\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"PolicyName\",\"formatter\":16,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true},\"tooltipFormat\":{\"tooltip\":\"Name of the backup policy\"}},{\"columnMatch\":\"count_BackupItemUniqueId\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"showIcon\":true},\"tooltipFormat\":{\"tooltip\":\"Number of Backup Items being backed up with the policy\"}},{\"columnMatch\":\"sum_StorageConsumedInMB\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"minimumFractionDigits\":2,\"maximumFractionDigits\":2}},\"tooltipFormat\":{\"tooltip\":\"Total cloud storage consumed by items being backed up by the policy, as of the end of the selected time range\"}},{\"columnMatch\":\"ResourceId\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true},\"tooltipFormat\":{\"tooltip\":\"Vault to which the policy is associated\"}},{\"columnMatch\":\"StorageReplicationType\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"PolicyLink\",\"formatter\":5,\"formatOptions\":{\"linkColumn\":\"PolicyLink\",\"linkTarget\":\"Resource\",\"showIcon\":true}},{\"columnMatch\":\"PolicyUniqueId\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"sum_BackupItemFrontEndSize\",\"formatter\":5,\"formatOptions\":{\"min\":0,\"palette\":\"orange\",\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"TempColumn\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ColumnToBeSorted\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"row_num\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"page_num\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}}],\"labelSettings\":[{\"columnId\":\"PolicyName\",\"label\":\"Policy Name\"},{\"columnId\":\"count_BackupItemUniqueId\",\"label\":\"# Backup Items\"},{\"columnId\":\"sum_StorageConsumedInMBs\",\"label\":\"Cloud Storage (MB)\"},{\"columnId\":\"ResourceId\",\"label\":\"Vault\"},{\"columnId\":\"StorageReplicationType\",\"label\":\"Storage Replication Type\"}]},\"sortBy\":[]}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"showPin": true,
		"name": "PolicyDetails-Grid1",
		"styleSettings": {
		  "showBorder": true
		}
	  },
	  {
		"type": 1,
		"content": "{\"json\":\"<span style=\\\"font-size:12px;font-style:italic\\\"> Click on any row above to see all backup items associated with that policy.</span>\"}",
		"conditionalVisibility": {
		  "parameterName": "BMSTypeWithBackupItemTypeParam",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"name": "text - 65"
	  },
	  {
		"type": 9,
		"content": "{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Workspaces}\"],\"parameters\":[{\"id\":\"7bb4a71d-d932-4737-8715-d378be7ffba5\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"BillingMetricSortBy3\",\"label\":\"Sort By\",\"type\":2,\"description\":\"Use to sort by a certain column\",\"isRequired\":true,\"query\":\"{\\\"version\\\":\\\"1.0.0\\\",\\\"content\\\":\\\"[\\\\r\\\\n{ \\\\\\\"value\\\\\\\": \\\\\\\"StorageConsumedInMBs\\\\\\\", \\\\\\\"label\\\\\\\": \\\\\\\"Cloud Storage (MB)\\\\\\\", \\\\\\\"selected\\\\\\\": \\\\\\\"true\\\\\\\" }]\\\"}\",\"crossComponentResources\":[\"{Workspaces}\"],\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":8,\"resourceType\":\"microsoft.insights/components\"},{\"id\":\"595e5629-4f64-4038-bff5-5f3371259caa\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"BillingMetricOrder3\",\"label\":\"Order\",\"type\":2,\"description\":\"Use to specify the sort order: Ascending/Descending\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"Ascending\\\"},\\r\\n    { \\\"value\\\":\\\"Descending\\\", \\\"selected\\\":true}\\r\\n]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"0e4b3406-91aa-452e-90b2-6b22e71f0b82\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"StorageMetricRowsPerGrid3\",\"label\":\"Rows Per Page\",\"type\":2,\"description\":\"Number of rows to display in grid view\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":10, \\\"label\\\":\\\"10\\\", \\\"selected\\\":true  },\\r\\n    { \\\"value\\\":25, \\\"label\\\":\\\"25\\\" },\\r\\n    { \\\"value\\\":50, \\\"label\\\":\\\"50\\\" },\\r\\n    { \\\"value\\\":100, \\\"label\\\":\\\"100\\\" },\\r\\n    { \\\"value\\\":250, \\\"label\\\":\\\"250\\\" },\\r\\n    { \\\"value\\\":500, \\\"label\\\":\\\"500\\\" },\\r\\n    { \\\"value\\\":1000, \\\"label\\\":\\\"1000\\\" }\\r\\n]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"d1b7fe67-8c02-431c-904c-f82238dd112e\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"StorageMetricPageNumber3\",\"label\":\"Page\",\"type\":2,\"description\":\"Select Page Number\",\"isRequired\":true,\"query\":\"// Time variable used\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\\r\\n// BMSTypeWithBackupItemType MappingTable\\r\\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\\r\\n    [ \\\"AzureWorkload/SAPHanaDatabase\\\", \\\"SAP HANA in Azure VM/SAP HANA in Azure VM\\\",\\r\\n      \\\"AzureWorkload/SQLDataBase\\\", \\\"SQL in Azure VM/SQL Database\\\",\\r\\n      \\\"IaaSVM/VM\\\", \\\"Azure Virtual Machine/Azure VM\\\",\\r\\n\\t  \\\"AzureStorage/AzureFileShare\\\", \\\"Azure Storage (Azure Files)/Azure File Share\\\",\\r\\n\\t  \\\"AzureWorkload/SAPAseDatabase\\\", \\\"SAP ASE in Azure VM/SAP ASE in Azure VM\\\",\\r\\n\\t  \\\"MAB/FileFolder\\\", \\\"Azure Backup Agent/Files and Folder\\\",\\r\\n\\t  \\\"DPM/SQLDB\\\", \\\"DPM/SQL Database\\\",\\r\\n\\t  \\\"DPM/VMwareVM\\\", \\\"DPM/VMWare VM\\\",\\r\\n\\t  \\\"DPM/HyperVVM\\\", \\\"DPM/Hyper-V VM\\\",\\r\\n\\t  \\\"DPM/FileFolder\\\", \\\"DPM/Files and Folder\\\",\\r\\n\\t  \\\"DPM/Client\\\", \\\"DPM/Files & Folder\\\",\\r\\n\\t  \\\"DPM/SystemState\\\", \\\"DPM/System State\\\",\\r\\n\\t  \\\"DPM/Sharepoint\\\", \\\"DPM/Sharepoint Database\\\",\\r\\n\\t  \\\"DPM/Exchange\\\", \\\"DPM/Exchange Mailbox Database\\\"];\\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId, StorageReplicationType = StorageReplicationType_s\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n\\r\\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemFrontEndSizeTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemFrontEndSize = todouble(columnifexists(\\\"BackupItemFrontEndSize_s\\\", \\\"\\\")), BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let StorageAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"StorageAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), StorageUniqueId = columnifexists(\\\"StorageUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), StorageConsumedInMBs = todouble(columnifexists(\\\"StorageConsumedInMBs_s\\\", \\\"\\\")), \\r\\nStorageAllocatedInMBs = todouble(columnifexists(\\\"StorageAllocatedInMBs_s\\\", \\\"\\\")),  TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet StorageAssociationTable = AddonAzureBackupStorage \\r\\n| where OperationName == \\\"StorageAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet PolicyUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet PolicyTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Policy\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   PolicyTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet PolicyUnderResourceSpecific = ()\\r\\n{\\r\\nlet PolicyTable = AddonAzureBackupPolicy\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Policy\\\" \\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   PolicyTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n// To show as per as on 'AsonDay'\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType), BackupItemProtectionState, ResourceId};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\\r\\n{\\r\\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\\r\\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics \\r\\n\\t// To show as per as on 'AsonDay'\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\\r\\n};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\\r\\n{\\r\\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\\r\\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific \\r\\n\\t// To show as per as on 'AsonDay'\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\\r\\n};\\r\\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\\r\\n{\\r\\nLatestBackupItemDimensionTable | join kind= inner\\r\\n(CombinedTable | union isfuzzy = true  \\r\\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\\r\\n),\\r\\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\\r\\n// Filtering out entities not reported as on 'AsonDay'\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n)on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId, ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, \\r\\nBMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\\r\\n};\\r\\nlet OutputTable = () {LatestBackupItemAssociationAndStorageConsumptionTable\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n// PolicyLink Parameter\\r\\n| where strcat(ResourceId, PolicyUniqueId) == (@\\\"{SelectedPolicyLink}\\\") or '*' in (@\\\"{SelectedPolicyLink}\\\")\\r\\n| summarize ContainerNameWithBackupItemName = any(ContainerNameWithBackupItemName), PolicyName = any(PolicyName), BMSTypeWithBackupItemType = any(BMSTypeWithBackupItemType), BackupItemFrontEndSize = any(BackupItemFrontEndSize), StorageConsumedInMBs = any(StorageConsumedInMBs), ResourceId = any(ResourceId),  ProtectedContainerName = any(ProtectedContainerName), StorageReplicationType = any(StorageReplicationType)  by BackupItemUniqueId\\r\\n};\\r\\nOutputTable\\r\\n| summarize c=count()\\r\\n| project num = (c-1)/{StorageMetricRowsPerGrid3} + 1\\r\\n| project nums = range(1,num,1), num\\r\\n| mvexpand nums\\r\\n| project nums = tostring(nums), num = strcat(tostring(nums),\\\" of \\\",tostring(num))\",\"crossComponentResources\":[\"{Workspaces}\"],\"value\":\"1\",\"typeSettings\":{\"additionalResourceOptions\":[]},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"above\",\"doNotRunWhenHidden\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "SelectedPolicyLink",
			"comparison": "isNotEqualTo",
			"value": "*"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"name": "PolicyDetails-Grid2ParameterBlock"
	  },
	  {
		"type": 3,
		"content": "{\"version\":\"KqlItem/1.0\",\"query\":\"// Time variable used\\r\\nlet Today = startofday(now());\\r\\nlet RangeStart = startofday({TimeRange:start});\\r\\nlet RangeEnd = startofday({TimeRange:end}) + 1d;\\r\\nlet AsonDay = iff((RangeEnd-Today == 1d),RangeEnd-2d, RangeEnd-1d);\\r\\n// BMSTypeWithBackupItemType MappingTable\\r\\nlet BMSTypeWithBackupItemTypeMappingTable = datatable (BMSTypeWithBackupItemType:string, CustomBMSTypeWithBackupItemType:string)\\r\\n    [ \\\"AzureWorkload/SAPHanaDatabase\\\", \\\"SAP HANA in Azure VM/SAP HANA in Azure VM\\\",\\r\\n      \\\"AzureWorkload/SQLDataBase\\\", \\\"SQL in Azure VM/SQL Database\\\",\\r\\n      \\\"IaaSVM/VM\\\", \\\"Azure Virtual Machine/Azure VM\\\",\\r\\n\\t  \\\"AzureStorage/AzureFileShare\\\", \\\"Azure Storage (Azure Files)/Azure File Share\\\",\\r\\n\\t  \\\"AzureWorkload/SAPAseDatabase\\\", \\\"SAP ASE in Azure VM/SAP ASE in Azure VM\\\",\\r\\n\\t  \\\"MAB/FileFolder\\\", \\\"Azure Backup Agent/Files and Folder\\\",\\r\\n\\t  \\\"DPM/SQLDB\\\", \\\"DPM/SQL Database\\\",\\r\\n\\t  \\\"DPM/VMwareVM\\\", \\\"DPM/VMWare VM\\\",\\r\\n\\t  \\\"DPM/HyperVVM\\\", \\\"DPM/Hyper-V VM\\\",\\r\\n\\t  \\\"DPM/FileFolder\\\", \\\"DPM/Files and Folder\\\",\\r\\n\\t  \\\"DPM/Client\\\", \\\"DPM/Files & Folder\\\",\\r\\n\\t  \\\"DPM/SystemState\\\", \\\"DPM/System State\\\",\\r\\n\\t  \\\"DPM/Sharepoint\\\", \\\"DPM/Sharepoint Database\\\",\\r\\n\\t  \\\"DPM/Exchange\\\", \\\"DPM/Exchange Mailbox Database\\\"];\\r\\n// High-level Functions\\r\\nlet VaultUnderAzureDiagnostics = ()\\r\\n{\\r\\nAzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"Vault\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project VaultName = columnifexists(\\\"VaultName_s\\\", \\\"\\\"), AzureDataCenter =  columnifexists(\\\"AzureDataCenter_s\\\", \\\"\\\"), ResourceId, StorageReplicationType = StorageReplicationType_s\\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet VaultUnderResourceSpecific = ()\\r\\n{\\r\\nCoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Vault\\\" \\r\\n| parse ResourceId with * \\\"SUBSCRIPTIONS/\\\" SubscriptionId:string \\\"/RESOURCEGROUPS\\\" *\\r\\n| where SubscriptionId in ({VaultSubscription:value}) or '*' in ({VaultSubscription:value})\\r\\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\\r\\n| where VaultName in  ({Vault}) or '*' in ({Vault})\\r\\n| summarize StorageReplicationType = any(StorageReplicationType) by ResourceId\\r\\n};\\r\\nlet BackupItemUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet BackupItemTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItem\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupItemProtectionState = columnifexists(\\\"BackupItemProtectionState_s\\\", \\\"\\\"), BackupItemAppVersion = columnifexists(\\\"BackupItemAppVersion_s\\\", \\\"\\\"),\\r\\nSecondaryBackupProtectionState = columnifexists(\\\"SecondaryBackupProtectionState_s\\\", \\\"\\\"), BackupItemName = columnifexists(\\\"BackupItemName_s\\\", \\\"\\\"), BackupItemFriendlyName = columnifexists(\\\"BackupItemFriendlyName_s\\\", \\\"\\\"),\\r\\nBackupItemType = columnifexists(\\\"BackupItemType_s\\\", \\\"\\\"), ProtectionGroupName = columnifexists(\\\"ProtectionGroupName_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItem\\\" and State != \\\"Deleted\\\"\\r\\n//Handle MAB system state\\r\\n|  project BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), \\\"System State\\\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion,\\r\\nSecondaryBackupProtectionState, BackupItemFriendlyName, BackupItemType, ProtectionGroupName, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemAssociationTable = AzureDiagnostics \\r\\n // Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"), \\r\\nVaultUniqueId = columnifexists(\\\"VaultUniqueId_s\\\", \\\"\\\"), BackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"),\\r\\nTimeGenerated, ResourceId  \\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemAssociationTable = CoreAzureBackup \\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"BackupItemAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Handle MAB SystemState\\r\\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \\\"MAB\\\" and BackupItemUniqueId contains \\\"ssbv\\\\\\\\\\\"), replace(@\\\"[^;]+$\\\", @\\\"systemstate\\\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n\\r\\nlet BackupItemFrontEndSizeUnderAzureDiagnostics = ()\\r\\n{\\r\\n let BackupItemFrontEndSizeTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| project BackupItemFrontEndSize = todouble(columnifexists(\\\"BackupItemFrontEndSize_s\\\", \\\"\\\")), BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet BackupItemFrontEndSizeUnderResourceSpecific = ()\\r\\n{\\r\\nlet BackupItemFrontEndSizeTable = CoreAzureBackup \\r\\n| where OperationName == \\\"BackupItemFrontEndSizeConsumption\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   BackupItemFrontEndSizeTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderAzureDiagnostics = ()\\r\\n{\\r\\n let StorageAssociationTable = AzureDiagnostics \\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"StorageAssociation\\\" and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId = columnifexists(\\\"BackupItemUniqueId_s\\\", \\\"\\\"), StorageUniqueId = columnifexists(\\\"StorageUniqueId_s\\\", \\\"\\\"), BackupManagementServerUniqueId = columnifexists(\\\"BackupManagementServerUniqueId_s\\\", \\\"\\\"), StorageConsumedInMBs = todouble(columnifexists(\\\"StorageConsumedInMBs_s\\\", \\\"\\\")), \\r\\nStorageAllocatedInMBs = todouble(columnifexists(\\\"StorageAllocatedInMBs_s\\\", \\\"\\\")),  TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet StorageAssociationUnderResourceSpecific = ()\\r\\n{\\r\\nlet StorageAssociationTable = AddonAzureBackupStorage \\r\\n| where OperationName == \\\"StorageAssociation\\\" and State != \\\"Deleted\\\"\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n// Not Projecting ProtectedContainerUniqueId - DPM ProtectedContainer (incase of cluster) is node PS and not cluster PS\\r\\n| project BackupItemUniqueId, BackupManagementServerUniqueId, StorageUniqueId, StorageConsumedInMBs, StorageAllocatedInMBs, TimeGenerated, ResourceId \\r\\n// Providers like DPM, AzureBackupServer has Disk storage. Filtering out cloud storage only.\\r\\n| where split(StorageUniqueId, \\\";\\\")[2] has \\\"cloud\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   StorageAssociationTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet ProtectedContainerTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where Category == \\\"AzureBackupReport\\\" and OperationName == \\\"ProtectedContainer\\\"  and SchemaVersion_s == \\\"V2\\\" and State_s != \\\"Deleted\\\"\\r\\n| project ProtectedContainerUniqueId = columnifexists(\\\"ProtectedContainerUniqueId_s\\\", \\\"\\\"),  ProtectedContainerFriendlyName = columnifexists(\\\"ProtectedContainerFriendlyName_s\\\", \\\"\\\"), AgentVersion = columnifexists(\\\"AgentVersion_s\\\", \\\"\\\"),\\r\\nProtectedContainerOSType = columnifexists(\\\"ProtectedContainerOSType_s\\\", \\\"\\\"), ProtectedContainerOSVersion = columnifexists(\\\"ProtectedContainerOSVersion_s\\\", \\\"\\\"), ProtectedContainerWorkloadType = columnifexists(\\\"ProtectedContainerWorkloadType_s\\\", \\\"\\\"),  ProtectedContainerName = columnifexists(\\\"ProtectedContainerName_s\\\", \\\"\\\"), ProtectedContainerProtectionState = columnifexists(\\\"ProtectedContainerProtectionState_s\\\", \\\"\\\"), ProtectedContainerLocation = columnifexists(\\\"ProtectedContainerLocation_s\\\", \\\"\\\"), ProtectedContainerType = columnifexists(\\\"ProtectedContainerType_s\\\", \\\"\\\"),\\r\\nBackupManagementType = columnifexists(\\\"BackupManagementType_s\\\", \\\"\\\"), TimeGenerated, ResourceId \\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet ProtectedContainerUnderResourceSpecific = ()\\r\\n{\\r\\nlet ProtectedContainerTable = CoreAzureBackup\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"ProtectedContainer\\\" and State != \\\"Deleted\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   ProtectedContainerTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet PolicyUnderAzureDiagnostics = ()\\r\\n{\\r\\nlet PolicyTable = AzureDiagnostics\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Policy\\\" and SchemaVersion_s == \\\"V2\\\"\\r\\n| project PolicyUniqueIdGuid = columnifexists(\\\"PolicyUniqueId_g\\\", \\\"\\\") , PolicyUniqueIdStr = columnifexists(\\\"PolicyUniqueId_s\\\", \\\"\\\"), PolicyName = PolicyName_s, ResourceId, TimeGenerated\\r\\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \\\"\\\", PolicyUniqueIdStr, PolicyUniqueIdGuid), PolicyName, ResourceId, TimeGenerated \\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\\r\\nVaultUnderAzureDiagnostics | join kind= inner (\\r\\n   PolicyTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\nlet PolicyUnderResourceSpecific = ()\\r\\n{\\r\\nlet PolicyTable = AddonAzureBackupPolicy\\r\\n// Take records until previous day\\r\\n| where TimeGenerated >= RangeStart and TimeGenerated <= RangeEnd and TimeGenerated < Today\\r\\n| where OperationName == \\\"Policy\\\" \\r\\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\\r\\nVaultUnderResourceSpecific | join kind= inner (\\r\\n   PolicyTable \\r\\n) on ResourceId == ResourceId;\\r\\n};\\r\\n// BusinessLogic\\r\\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \\r\\n(BackupItemUnderAzureDiagnostics()),\\r\\n(BackupItemUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\\r\\n| where BackupItemUniqueId != \\\"\\\"\\r\\n// To show as per as on 'AsonDay'\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType = strcat(BackupManagementType, \\\"/\\\", BackupItemType), BackupItemProtectionState, ResourceId};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics = ()\\r\\n{\\r\\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\\r\\nProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderAzureDiagnostics \\r\\n\\t// To show as per as on 'AsonDay'\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderAzureDiagnostics | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\\r\\n};\\r\\nlet BackupItemAssociationAndStorageConsumptionUnderResourceSpecific = ()\\r\\n{\\r\\n// Using outer join for BackupItemAssociation - as there could be BackupItems without ProtectedContainer (in case of soft delete), BackupItems without policies\\r\\nProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerUniqueId \\r\\n| join kind= rightouter  (\\r\\n    BackupItemAssociationUnderResourceSpecific \\r\\n\\t// To show as per as on 'AsonDay'\\r\\n\\t| where startofday(TimeGenerated) == AsonDay\\r\\n\\t|  project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId, StorageReplicationType\\r\\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\\r\\n| join kind= leftouter (\\r\\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId ) on PolicyUniqueId == PolicyUniqueId, ResourceId == ResourceId\\r\\n| join kind= leftouter (\\r\\n   BackupItemFrontEndSizeUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project BackupItemFrontEndSize, BackupItemUniqueId, TimeGenerated \\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n// using leftouter due to AzureStorage - storageconsumption table is not emitted. inner join will exclude AzureStorage BackupItems.\\r\\n| join kind= leftouter (\\r\\n   StorageAssociationUnderResourceSpecific | where startofday(TimeGenerated) == AsonDay | project StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemUniqueId, TimeGenerated\\r\\n) on BackupItemUniqueId == BackupItemUniqueId\\r\\n| project BackupItemUniqueId,TimeGenerated, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, PolicyUniqueId, BackupItemFrontEndSize,\\r\\n StorageConsumedInMBs, StorageAllocatedInMBs, BackupManagementServerUniqueId, PolicyName, ResourceId, StorageReplicationType\\r\\n};\\r\\nlet LatestBackupItemAssociationAndStorageConsumptionTable = ()\\r\\n{\\r\\nLatestBackupItemDimensionTable | join kind= inner\\r\\n(CombinedTable | union isfuzzy = true  \\r\\n(BackupItemAssociationAndStorageConsumptionUnderAzureDiagnostics()\\r\\n),\\r\\n(BackupItemAssociationAndStorageConsumptionUnderResourceSpecific())\\r\\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\\r\\n// Filtering out entities not reported as on 'AsonDay'\\r\\n| where startofday(TimeGenerated) == AsonDay\\r\\n)on BackupItemUniqueId == BackupItemUniqueId\\r\\n// Handle AG container\\r\\n| project ProtectedContainerName = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\" and isempty(ProtectedContainerName)),split(BackupItemName,\\\";\\\")[0],ProtectedContainerName), BackupItemName, ProtectedContainerUniqueId, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType, BackupItemUniqueId\\r\\n| project BackupItemUniqueId, ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \\\"/\\\", BackupItemName), BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, \\r\\nBMSTypeWithBackupItemType, PolicyUniqueId, BackupItemFrontEndSize, StorageConsumedInMBs, StorageAllocatedInMBs, BackupItemProtectionState,PolicyName, ResourceId, TimeGenerated, StorageReplicationType\\r\\n};\\r\\nlet OutputTable = () {LatestBackupItemAssociationAndStorageConsumptionTable\\r\\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemTypeParam}) or '*' in ({BMSTypeWithBackupItemTypeParam})\\r\\n// PolicyLink Parameter\\r\\n| where strcat(ResourceId, PolicyUniqueId) == (@\\\"{SelectedPolicyLink}\\\") or '*' in (@\\\"{SelectedPolicyLink}\\\")\\r\\n| summarize ContainerNameWithBackupItemName = any(ContainerNameWithBackupItemName), PolicyName = any(PolicyName), BMSTypeWithBackupItemType = any(BMSTypeWithBackupItemType), BackupItemFrontEndSize = any(BackupItemFrontEndSize), StorageConsumedInMBs = any(StorageConsumedInMBs), ResourceId = any(ResourceId),  ProtectedContainerName = any(ProtectedContainerName), StorageReplicationType = any(StorageReplicationType)  by BackupItemUniqueId\\r\\n| parse ContainerNameWithBackupItemName with ExtractedContainerName:string \\\"/\\\" ExtractedBackupItemName:string\\r\\n| extend TempColumn = column_ifexists(tostring('{BillingMetricSortBy3}'), \\\"StorageConsumedInMBs\\\")\\r\\n| extend ColumnToBeSorted = iff(tostring('{BillingMetricOrder3}') == \\\"Ascending\\\", todouble(TempColumn) - 90000000, 90000000 - todouble(TempColumn))\\r\\n| sort by ColumnToBeSorted asc nulls last, BackupItemUniqueId asc\\r\\n| extend row_num = row_number()\\r\\n| extend page_num = tostring(((row_num-1)/{StorageMetricRowsPerGrid3} + 1))\\r\\n| where page_num has ('{StorageMetricPageNumber3}') or '*' in ('{StorageMetricPageNumber3}')\\r\\n| extend prefix = array_strcat(array_split(split(ResourceId,\\\"/\\\"), 4)[0] ,\\\"/\\\")\\r\\n| extend containerNameString = iff((split(ContainerNameWithBackupItemName, \\\"/\\\")[0] != \\\"\\\" and array_length(split((split(ContainerNameWithBackupItemName, \\\"/\\\")[0]),\\\";\\\")) == 3), split(ContainerNameWithBackupItemName,\\\"/\\\")[0], \\\"\\\")\\r\\n| parse containerNameString with entityType:string \\\";\\\" rgName:string \\\";\\\" entityName:string\\r\\n| extend entityTypeForAzureStorageUrl = iff(BMSTypeWithBackupItemType == \\\"AzureStorage/AzureFileShare\\\", iff(entityType == \\\"storage\\\", \\\"/Microsoft.Storage/storageAccounts/\\\", \\\"/Microsoft.ClassicStorage/storageAccounts/\\\"), \\\"\\\")\\r\\n| extend entityTypeForIaaSVMUrl = iff(BMSTypeWithBackupItemType == \\\"IaaSVM/VM\\\", iff(entityType =~ \\\"iaasvmcontainerv2\\\", \\\"/Microsoft.Compute/virtualMachines/\\\", \\\"/Microsoft.ClassicCompute/virtualMachines/\\\"), \\\"\\\")\\r\\n| extend entityTypeForAzureWorkloadUrl = iff((BMSTypeWithBackupItemType == \\\"AzureWorkload/SAPHanaDatabase\\\" or BMSTypeWithBackupItemType == \\\"AzureWorkload/SQLDataBase\\\"), iff(entityType =~ \\\"compute\\\", \\\"/Microsoft.Compute/virtualMachines/\\\", \\\"/Microsoft.ClassicCompute/virtualMachines/\\\"), \\\"\\\")\\r\\n| extend AzureResource = iff(BMSTypeWithBackupItemType startswith \\\"DPM\\\" or BMSTypeWithBackupItemType startswith \\\"MAB\\\", \\\"\\\" , iff(containerNameString != \\\"\\\", strcat(prefix, \\\"/\\\", rgName, \\\"/providers\\\", entityTypeForAzureStorageUrl, entityTypeForIaaSVMUrl, entityTypeForAzureWorkloadUrl, entityName), ResourceId))\\r\\n| extend BackupItemLink =  iff (BMSTypeWithBackupItemType has \\\"IaaSVM/VM\\\", strcat(ResourceId,\\\"/backupFabrics/Azure/protectionContainers/IaasVMContainer;\\\", ExtractedContainerName, \\\"/protectedItems/VM;\\\", ExtractedContainerName),\\r\\niff(BMSTypeWithBackupItemType has \\\"AzureStorage/AzureFileShare\\\", strcat(ResourceId,\\\"/backupFabrics/Azure/protectionContainers/StorageContainer;\\\", ExtractedContainerName, \\\"/protectedItems/AzureFileShare;\\\", ExtractedBackupItemName) , \\r\\niff(BMSTypeWithBackupItemType has \\\"AzureWorkload/SQLDataBase\\\", strcat(ResourceId,\\\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\\\", ExtractedContainerName, \\\"/protectedItems/SQLDataBase;\\\", ExtractedBackupItemName) , \\r\\niff(BMSTypeWithBackupItemType has \\\"AzureWorkload/SAPHanaDatabase\\\", strcat(ResourceId,\\\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\\\", ExtractedContainerName, \\\"/protectedItems/SAPHanaDatabase;\\\", ExtractedBackupItemName), \\\"\\\"))))\\r\\n|  extend container_array = split(ExtractedContainerName,\\\";\\\"), backupitem_array = split(ExtractedBackupItemName, \\\";\\\")\\r\\n|  extend container_arraylen = array_length(container_array), backupitem_arraylen = array_length(backupitem_array)\\r\\n| project  ExtractedBackupItemName = backupitem_array[(backupitem_arraylen-1)], ExtractedContainerName = container_array[(container_arraylen-1)], ContainerResourceGroup = iff(container_arraylen == 3, container_array[(container_arraylen-2)], \\\"(none)\\\"), PolicyName, BMSTypeWithBackupItemType, StorageConsumedInMBs, ResourceId, StorageReplicationType, AzureResource, BackupItemLink};\\r\\nlet CustomOutputTable = BMSTypeWithBackupItemTypeMappingTable\\r\\n| join kind= rightouter (OutputTable) \\r\\non BMSTypeWithBackupItemType == BMSTypeWithBackupItemType\\r\\n| project ExtractedBackupItemName, ExtractedContainerName, ContainerResourceGroup, PolicyName, BMSTypeWithBackupItemType = iff(CustomBMSTypeWithBackupItemType == \\\"\\\",BMSTypeWithBackupItemType1 ,CustomBMSTypeWithBackupItemType ), StorageConsumedInMBs, ResourceId, StorageReplicationType, AzureResource, BackupItemLink\\r\\n| parse BMSTypeWithBackupItemType with ExtractedBMSType:string \\\"/\\\" ExtractedBackupItemType:string\\r\\n| project ExtractedBackupItemName, ExtractedContainerName, ContainerResourceGroup, PolicyName, StorageConsumedInMBs, ResourceId, StorageReplicationType, AzureResource, BackupItemLink, ExtractedBMSType, ExtractedBackupItemType\\r\\n;\\r\\nCustomOutputTable\",\"size\":3,\"title\":\"List of Backup Items associated with the selected Policy ({$rowCount})\",\"noDataMessage\":\"No records found for the selected time range and scope\",\"exportFieldName\":\"BackupItemUniqueId\",\"exportParameterName\":\"SelectedBackupItemUniqueId\",\"exportDefaultValue\":\"*\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ExtractedBackupItemName\",\"formatter\":16,\"formatOptions\":{\"linkColumn\":\"BackupItemLink\",\"linkTarget\":\"Resource\",\"subTarget\":\"backupProtectedItems\",\"showIcon\":true},\"tooltipFormat\":{\"tooltip\":\"Name of the Backup Item\"}},{\"columnMatch\":\"ExtractedContainerName\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ContainerResourceGroup\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"PolicyName\",\"formatter\":16,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true},\"tooltipFormat\":{\"tooltip\":\"Name of the policy to which the Backup Item is associated\"}},{\"columnMatch\":\"StorageConsumedInMB\",\"formatter\":4,\"formatOptions\":{\"min\":0,\"palette\":\"blue\",\"showIcon\":true},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"minimumFractionDigits\":2,\"maximumFractionDigits\":2}},\"tooltipFormat\":{\"tooltip\":\"Total Cloud Storage consumed by the Backup Item, as of the end of the selected period\"}},{\"columnMatch\":\"ResourceId\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true},\"tooltipFormat\":{\"tooltip\":\"Vault associated with the Backup Item\"}},{\"columnMatch\":\"StorageReplicationType\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"AzureResource\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true},\"tooltipFormat\":{\"tooltip\":\"Azure Resource which contains the Backup Item. For Azure VM Backup, SQL in Azure VM Backup, or SAP HANA in Azure VM Backup - the Azure Resource is an Azure VM. For AzureFileShare Backup - the Azure Resource is an Azure Storage Account. Value of the column is <blank> for on-premises workloads.\"}},{\"columnMatch\":\"BackupItemLink\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ExtractedBMSType\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ExtractedBackupItemType\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"BMSTypeWithBackupItemType\",\"formatter\":13,\"formatOptions\":{\"linkColumn\":\"finalUrl\",\"linkTarget\":\"Resource\",\"showIcon\":true},\"tooltipFormat\":{\"tooltip\":\"Type of Backup Item, in format Backup Management Type/Backup Item Type\"}},{\"columnMatch\":\"ContainerNameWithBackupItemName\",\"formatter\":5,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true}},{\"columnMatch\":\"BackupItemFrontEndSize\",\"formatter\":5,\"formatOptions\":{\"min\":0,\"palette\":\"orange\",\"showIcon\":true}},{\"columnMatch\":\"PolicyLink\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ProtectedContainerName\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"BackupItemUniqueId\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"TempColumn\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"ColumnToBeSorted\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"row_num\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"page_num\",\"formatter\":5,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"finalUrl\",\"formatter\":5,\"formatOptions\":{\"linkTarget\":\"Resource\",\"showIcon\":true}},{\"columnMatch\":\"BackupItemFriendlyName\",\"formatter\":0,\"formatOptions\":{\"showIcon\":true}}],\"labelSettings\":[{\"columnId\":\"ExtractedBackupItemName\",\"label\":\"Backup Item Name\"},{\"columnId\":\"ExtractedContainerName\",\"label\":\"Container Name\"},{\"columnId\":\"ContainerResourceGroup\",\"label\":\"Backup Item Resource Group\"},{\"columnId\":\"PolicyName\",\"label\":\"Policy\"},{\"columnId\":\"StorageConsumedInMBs\",\"label\":\"Cloud Storage (MB)\"},{\"columnId\":\"ResourceId\",\"label\":\"Vault\"},{\"columnId\":\"StorageReplicationType\",\"label\":\"Storage Replication Type\"},{\"columnId\":\"AzureResource\",\"label\":\"Azure Resource\"},{\"columnId\":\"ExtractedBMSType\",\"label\":\"Backup Management Type\"},{\"columnId\":\"ExtractedBackupItemType\",\"label\":\"Backup Item Type\"}]},\"sortBy\":[]}",
		"conditionalVisibility": {
		  "parameterName": "Workspaces",
		  "comparison": "isNotEqualTo"
		},
		"conditionalVisibilities": [
		  {
			"parameterName": "Workspaces",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "SelectedPolicyLink",
			"comparison": "isNotEqualTo",
			"value": "*"
		  },
		  {
			"parameterName": "ErrorHandle",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "CustomBMSTypeParam",
			"comparison": "isNotEqualTo"
		  },
		  {
			"parameterName": "BMSTypeWithBackupItemTypeParam",
			"comparison": "isNotEqualTo"
		  }
		],
		"showPin": true,
		"name": "PolicyDetails-Grid2",
		"styleSettings": {
		  "showBorder": true
		}
	  }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}